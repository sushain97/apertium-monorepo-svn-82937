#import "java_io_InputStream.h"
#import "java_util_Map.h"
#import "org_apertium_lttoolbox_Pair.h"
#import "javax_xml_stream_XMLStreamException.h"
#import "org_apertium_lttoolbox_compile_XMLPrint.h"
#import "java_lang_StringBuilder.h"
#import "java_io_PrintStream.h"
#import "java_lang_System.h"
#import "java_util_HashMap.h"
#import "javax_xml_stream_XMLStreamReader.h"
#import "org_apertium_lttoolbox_Expander_SPair.h"
#import "java_lang_Character.h"
#import "javax_xml_stream_Location.h"
#import "javax_xml_stream_XMLInputFactory.h"
#import "java_util_Collection.h"
#import "java_io_FileInputStream.h"
#import "java_io_Writer.h"
#import "java_lang_String.h"
#import "org_apertium_lttoolbox_Expander_EntList.h"
#import "org_apertium_lttoolbox_compile_Compile.h"
#import "java_util_Iterator.h"
#import "java_lang_RuntimeException.h"
#import "java_io_FileNotFoundException.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_Expander.h"


@implementation org_apertium_lttoolbox_Expander;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_Expander") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_Expander_current_paradigm = (id) [NSNull null];
        org_apertium_lttoolbox_Expander_paradigm = (id) [NSNull null];
        org_apertium_lttoolbox_Expander_paradigm_lr = (id) [NSNull null];
        org_apertium_lttoolbox_Expander_paradigm_rl = (id) [NSNull null];
        org_apertium_lttoolbox_Expander_output = (id) [NSNull null];
        org_apertium_lttoolbox_Expander_reader = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_Expander_current_paradigm release];
    [org_apertium_lttoolbox_Expander_paradigm release];
    [org_apertium_lttoolbox_Expander_paradigm_lr release];
    [org_apertium_lttoolbox_Expander_paradigm_rl release];
    [org_apertium_lttoolbox_Expander_output release];
    [org_apertium_lttoolbox_Expander_reader release];
    [super dealloc];
}

- (java_lang_String*) _GET_current_paradigm
{
    return [[org_apertium_lttoolbox_Expander_current_paradigm retain] autorelease];
}

- (void) _PUT_current_paradigm: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_current_paradigm release];
    org_apertium_lttoolbox_Expander_current_paradigm = v;
}

- (java_util_Map*) _GET_paradigm
{
    return [[org_apertium_lttoolbox_Expander_paradigm retain] autorelease];
}

- (void) _PUT_paradigm: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_paradigm release];
    org_apertium_lttoolbox_Expander_paradigm = v;
}

- (java_util_Map*) _GET_paradigm_lr
{
    return [[org_apertium_lttoolbox_Expander_paradigm_lr retain] autorelease];
}

- (void) _PUT_paradigm_lr: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_paradigm_lr release];
    org_apertium_lttoolbox_Expander_paradigm_lr = v;
}

- (java_util_Map*) _GET_paradigm_rl
{
    return [[org_apertium_lttoolbox_Expander_paradigm_rl retain] autorelease];
}

- (void) _PUT_paradigm_rl: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_paradigm_rl release];
    org_apertium_lttoolbox_Expander_paradigm_rl = v;
}

- (java_io_Writer*) _GET_output
{
    return [[org_apertium_lttoolbox_Expander_output retain] autorelease];
}

- (void) _PUT_output: (java_io_Writer*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_output release];
    org_apertium_lttoolbox_Expander_output = v;
}

- (javax_xml_stream_XMLStreamReader*) _GET_reader
{
    return [[org_apertium_lttoolbox_Expander_reader retain] autorelease];
}

- (void) _PUT_reader: (javax_xml_stream_XMLStreamReader*) v
{
    [v retain];
    [org_apertium_lttoolbox_Expander_reader release];
    org_apertium_lttoolbox_Expander_reader = v;
}

- (void) __init_org_apertium_lttoolbox_Expander__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


- (void) expand___java_lang_String_java_io_Writer :(java_lang_String*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_paradigm: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_paradigm_lr: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_paradigm_rl: _op1.o];
    @try {
    @try {
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_output: _op1.o];
    _sp -= 0;
    _op1.o = [javax_xml_stream_XMLInputFactory newInstance__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    _op1.o = [((javax_xml_stream_XMLInputFactory*) _stack[_sp].o) createXMLStreamReader___java_io_InputStream:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_reader: _op1.o];
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procNode__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) close__];
    } @catch (java_io_FileNotFoundException* _ex) {
        _stack[_sp++].o = _ex;
        goto label15;
    }
    } @catch (javax_xml_stream_XMLStreamException* _ex) {
        _stack[_sp++].o = _ex;
        goto label12;
    }
    label10:;
    goto label2;
    label15:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label11:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Cannot open '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label12:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label13:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((javax_xml_stream_XMLStreamException*) _stack[_sp].o) printStackTrace__];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: An error occured parsing '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    [_pool release];
    return;
}


- (int) allBlanks__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label6:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasText__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getText__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label10:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label12:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label5:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].i = 1;
    goto label4;
    label2:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    _locals[3].i += 1;
    goto label5;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    label7:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (org_apertium_lttoolbox_Expander_EntList*) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList :(org_apertium_lttoolbox_Expander_EntList*)n1 :(org_apertium_lttoolbox_Expander_EntList*)n2
{
    XMLVMElem _stack[8];
    XMLVMElem _locals[6];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label4:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label10:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label3:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label2:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_SPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_Expander_SPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_SPair___org_apertium_lttoolbox_Expander_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _locals[5].i += 1;
    goto label2;
    label1:;
    _locals[4].i += 1;
    goto label3;
    label0:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    label5:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_Expander_EntList*) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String :(org_apertium_lttoolbox_Expander_EntList*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label2:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander_SPair*) _op2.o) _PUT_first: _op1.o];
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander_SPair*) _op2.o) _PUT_second: _op1.o];
    _locals[3].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_Expander_EntList*) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Pair :(org_apertium_lttoolbox_Expander_EntList*)n1 :(org_apertium_lttoolbox_Pair*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label2:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Pair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander_SPair*) _op2.o) _PUT_first: _op1.o];
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Pair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander_SPair*) _op2.o) _PUT_second: _op1.o];
    _locals[3].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) attrib___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 10;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getNamespaceURI__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getAttributeValue___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label1;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    label4:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (int) isEmpty___javax_xml_stream_XMLStreamReader :(javax_xml_stream_XMLStreamReader*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label4:;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"carefull, using the isEmpty() method, which is not really implemented yet";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasText__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 1;
    goto label3;
    label0:;
    _stack[_sp++].i = 0;
    label3:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) procEntry__
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[12];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label54:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label56:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_LEMMA_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label58:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label60:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IGNORE_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"yes";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Parse error.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    [_pool release];
    return;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label62:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label64:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label66:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_SPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _stack[_sp++].o = @"";
    _sp -= 4;
    [((org_apertium_lttoolbox_Expander_SPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_SPair___org_apertium_lttoolbox_Expander_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label5;
    label4:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_RL_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_SPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _stack[_sp++].o = @"";
    _sp -= 4;
    [((org_apertium_lttoolbox_Expander_SPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_SPair___org_apertium_lttoolbox_Expander_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label5;
    label6:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_SPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _stack[_sp++].o = @"";
    _sp -= 4;
    [((org_apertium_lttoolbox_Expander_SPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_SPair___org_apertium_lttoolbox_Expander_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label8;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Parse error.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) nextTag__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label68:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label70:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAIR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procTransduction__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label76:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Pair:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Pair:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Pair:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label77:;
    goto label11;
    label10:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IDENTITY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procIdentity__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label80:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label81:;
    goto label11;
    label13:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_REGEXP_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"__REGEXP__";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procRegexp__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label82:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label83:;
    goto label11;
    label16:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procPar__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label78:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [org_apertium_lttoolbox_compile_XMLPrint printEvent___javax_xml_stream_XMLStreamReader:_stack[_sp + 0].o];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Undefined paradigm '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label21:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label25;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label25;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) skip___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    [_pool release];
    return;
    label25:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label86:;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label87:;
    goto label27;
    label24:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_RL_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label29;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label29;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) skip___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    [_pool release];
    return;
    label29:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label96:;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label97:;
    goto label27;
    label28:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label32;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label32:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label33;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label33:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label94:;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label98:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[10].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) append___org_apertium_lttoolbox_Expander_EntList_org_apertium_lttoolbox_Expander_EntList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label27:;
    goto label11;
    label19:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label35;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label35;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label37;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label39:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label38;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label92:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 58;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 10;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label93:;
    goto label39;
    label38:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label41:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label40;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label90:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 58;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 62;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 58;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 10;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label91:;
    goto label41;
    label40:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label43:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label42;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label88:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_first];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 58;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 60;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 58;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander_SPair*) _op1.o)  _GET_second];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_output];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 10;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label89:;
    goto label43;
    label42:;
    goto label44;
    label37:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label45;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label45:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_lr];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label46;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label46:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm_rl];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label47;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_EntList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_EntList__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label47:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Expander_EntList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label44:;
    [_pool release];
    return;
    label35:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 5;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label48;
    goto label11;
    label48:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label50;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) allBlanks__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label50;
    goto label11;
    label50:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [org_apertium_lttoolbox_compile_XMLPrint printEvent___javax_xml_stream_XMLStreamReader:_stack[_sp + 0].o];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @", ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid inclusion of '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">' into '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label11:;
    goto label5;
}


- (java_lang_String*) procIdentity__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label4:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label6:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IDENTITY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) readString___java_lang_StringBuilder_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label5:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) procNode__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label19:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label21:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_DICTIONARY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    goto label2;
    label3:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ALPHABET_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    goto label2;
    label5:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SDEFS_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    goto label2;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SDEF_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    goto label2;
    label9:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PARDEFS_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    goto label2;
    label11:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PARDEF_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procParDef__];
    goto label2;
    label13:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) procEntry__];
    goto label2;
    label15:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SECTION_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    goto label2;
    label17:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid node '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    [_pool release];
    return;
}


- (java_lang_String*) procPar__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) procParDef__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label4:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_current_paradigm: _op1.o];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Expander*) _op2.o) _PUT_current_paradigm: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (java_lang_String*) procRegexp__
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextCharacters__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___char_ARRAYTYPE_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_Expander_SPair*) procTransduction__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label8:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label10:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label12:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_LEFT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) skip___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label0:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_LEFT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) readString___java_lang_StringBuilder_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RIGHT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) skip___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RIGHT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    goto label6;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) readString___java_lang_StringBuilder_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label7;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAIR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) skip___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Expander_SPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_Expander_SPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Expander_SPair___org_apertium_lttoolbox_Expander_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label9:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) readString___java_lang_StringBuilder_java_lang_String :(java_lang_StringBuilder*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label20:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label24:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextCharacters__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___char_ARRAYTYPE_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label21:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_BLANK_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label1;
    label3:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_JOIN_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 43;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label1;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_POSTGENERATOR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 126;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label1;
    label7:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_GROUP_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label22:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label10;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 35;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label10:;
    goto label1;
    label9:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_S_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label1;
    label12:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid specification of element '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">' in this context.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label1:;
    [_pool release];
    return;
}


- (void) requireEmptyError___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[0];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    [_pool release];
    return;
}


- (java_lang_String*) skip___java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Expander*) _stack[_sp].o) allBlanks__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label2;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid construction.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label4;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Expected '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label4:;
    _stack[_sp++].o = _locals[1].o;
    label6:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) skipBlanks___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isWhiteSpace__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid construction.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label2:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"possible problem at line (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @") in call to skipBlanks";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Expander*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[1].o;
    label5:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

