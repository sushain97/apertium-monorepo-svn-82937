#import "java_util_ArrayDeque.h"
#import "java_util_Map.h"
#import "java_lang_StringBuilder.h"
#import "java_io_PrintStream.h"
#import "org_apertium_lttoolbox_process_SetOfCharacters.h"
#import "java_lang_System.h"
#import "org_apertium_lttoolbox_process_TNodeState.h"
#import "java_lang_Character.h"
#import "java_util_Set.h"
#import "java_util_Collection.h"
#import "java_util_ArrayList.h"
#import "org_apertium_lttoolbox_process_Transition.h"
#import "java_util_List.h"
#import "java_lang_String.h"
#import "java_lang_Integer.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "org_apertium_lttoolbox_process_Node.h"
#import "java_util_Iterator.h"
#import "java_lang_Exception.h"
#import "java_lang_Math.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_process_State.h"

int _STATIC_org_apertium_lttoolbox_process_State_DEBUG;

@implementation org_apertium_lttoolbox_process_State;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_process_State") == 0) {
        [org_apertium_lttoolbox_process_State __clinit_org_apertium_lttoolbox_process_State];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_process_State_state = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_process_State_state release];
    [super dealloc];
}

- (java_util_ArrayList*) _GET_state
{
    return [[org_apertium_lttoolbox_process_State_state retain] autorelease];
}

- (void) _PUT_state: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_State_state release];
    org_apertium_lttoolbox_process_State_state = v;
}

+ (int) _GET_DEBUG
{
    return _STATIC_org_apertium_lttoolbox_process_State_DEBUG;
}

+ (void) _PUT_DEBUG: (int) v
{
    _STATIC_org_apertium_lttoolbox_process_State_DEBUG = v;
}

- (void) __init_org_apertium_lttoolbox_process_State__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_State*) _op2.o) _PUT_state: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (org_apertium_lttoolbox_process_State*) copy___org_apertium_lttoolbox_process_State :(org_apertium_lttoolbox_process_State*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_process_State*) copy__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_State alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_State__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) poolInit__
{
    XMLVMElem _stack[0];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    [_pool release];
    return;
}


- (int) size__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) init___org_apertium_lttoolbox_process_Node :(org_apertium_lttoolbox_process_Node*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) clear__];
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _stack[_sp++].i = 0;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_TNodeState*) _op2.o) _PUT_sequence: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) epsilonClosure__];
    label1:;
    [_pool release];
    return;
}


- (java_lang_String*) toString__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) apply___int :(int)n1
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label4:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label8:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label3:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[5].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Node*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label1;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[5].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label18:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[5].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_output_symbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_dest];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[5].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_next];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label19:;
    goto label2;
    label1:;
    _locals[3].i += 1;
    goto label3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_State*) _op2.o) _PUT_state: _op1.o];
    label5:;
    [_pool release];
    return;
}


- (void) apply___int_int :(int)n1 :(int)n2
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label6:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label12:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label5:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label18:;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Node*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label1;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label22:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_output_symbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_dest];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_next];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label23:;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Node*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label3;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label24:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_output_symbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_dest];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 1;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_next];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label25:;
    goto label4;
    label3:;
    _locals[4].i += 1;
    goto label5;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_State*) _op2.o) _PUT_state: _op1.o];
    label7:;
    [_pool release];
    return;
}


- (void) epsilonClosure__
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label5:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label4:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Node*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label1;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___java_util_Collection:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label13:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_output_symbol];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_output_symbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_dest];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Transition*) _op1.o)  _GET_next];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label14:;
    goto label3;
    label1:;
    _locals[1].i += 1;
    goto label4;
    label0:;
    [_pool release];
    return;
}


- (void) tjekDubletter__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label7:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label6:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label11:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label5:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label2;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[4].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_lang_Object*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Dublet!!! ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Dublet?: state_j = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"==";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = [[[java_lang_Exception alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_Exception*) _stack[_sp].o) __init_java_lang_Exception__];
    _sp -= 1;
    [((java_lang_Exception*) _stack[_sp].o) printStackTrace__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) remove___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[3].i += -1;
    label2:;
    _locals[3].i += 1;
    goto label5;
    label1:;
    _locals[1].i += 1;
    goto label6;
    label0:;
    [_pool release];
    return;
}


- (void) step___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label6:;
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    [((java_io_PrintStream*) _stack[_sp].o) println__];
    label0:;
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"state f = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"     - apply (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) tjekDubletter__];
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) apply___int:_stack[_sp + 1].i];
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) tjekDubletter__];
    label3:;
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"state e1= ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) epsilonClosure__];
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"state e2= ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label5:;
    [_pool release];
    return;
}


- (void) step___int_int :(int)n1 :(int)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) apply___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) epsilonClosure__];
    label1:;
    [_pool release];
    return;
}


- (void) step_case___char_boolean :(int)n1 :(int)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label3:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int:_stack[_sp + 1].i];
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toLowerCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label2:;
    [_pool release];
    return;
}


- (void) step_case___int_boolean :(int)n1 :(int)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label4:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Alphabet isTag___int:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___int:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int:_stack[_sp + 1].i];
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toLowerCase___int:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label3:;
    [_pool release];
    return;
}


- (int) isFinal___java_util_Set :(java_util_Set*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _locals[2].i += 1;
    goto label2;
    label0:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (java_lang_String*) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean :(java_util_Set*)n1 :(org_apertium_lttoolbox_Alphabet*)n2 :(org_apertium_lttoolbox_process_SetOfCharacters*)n3 :(int)n4 :(int)n5
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[15];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    _locals[4].i = n4;
    _locals[5].i = n5;
    label13:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label25:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label27:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label12:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label33:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].i = 1;
    goto label4;
    label2:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label35:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label37:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label7:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label5;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label41:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label6:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label42:;
    _locals[12].i += 1;
    goto label7;
    label5:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 126;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label10;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label1;
    label10:;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label1:;
    _locals[7].i += 1;
    goto label12;
    label0:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label14:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) restartFinals___java_util_Set_int_org_apertium_lttoolbox_process_State_int :(java_util_Set*)n1 :(int)n2 :(org_apertium_lttoolbox_process_State*)n3 :(int)n4
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[12];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    _locals[3].o = n3;
    _locals[4].i = n4;
    label8:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label18:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label7:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label22:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) lastPartHasRequiredSymbol___java_util_List_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label24:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label1;
    _op1.i = [org_apertium_lttoolbox_process_State _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"restart state ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"= ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label4:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label28:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label30:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[11].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TNodeState alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_caseWasChanged];
    _stack[_sp++].i = _op2.i;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_TNodeState*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TNodeState___org_apertium_lttoolbox_process_Node_java_util_List_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label29:;
    goto label6;
    label1:;
    _locals[6].i += 1;
    goto label7;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label9:;
    [_pool release];
    return;
}


- (int) lastPartHasRequiredSymbol___java_util_List_int_int :(java_util_List*)n1 :(int)n2 :(int)n3
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[7];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    _locals[3].i = n3;
    label6:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label5:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label18:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    goto label0;
    label1:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    goto label0;
    label3:;
    _locals[5].i += -1;
    goto label5;
    label0:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    label7:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) pruneStatesWithForbiddenSymbol___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label3:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label11:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) remove___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label1:;
    _locals[3].i += -1;
    goto label2;
    label0:;
    [_pool release];
    return;
}


- (void) pruneCompounds___int_int :(int)n1 :(int)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label10:;
    _stack[_sp++].i = 2147483646;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label16:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:5 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label18:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label6:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label24:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) lastPartHasRequiredSymbol___java_util_List_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    goto label2;
    label1:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label26:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label5:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label3;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _locals[7].i += 1;
    label4:;
    _locals[8].i += -1;
    goto label5;
    label3:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [java_lang_Math min___int_int:_stack[_sp + 0].i:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _locals[5].i += 1;
    goto label6;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label9:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label7;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) remove___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label8:;
    _locals[5].i += -1;
    goto label9;
    label7:;
    [_pool release];
    return;
}


- (java_lang_String*) filterFinalsSAO___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean_int :(java_util_Set*)n1 :(org_apertium_lttoolbox_Alphabet*)n2 :(org_apertium_lttoolbox_process_SetOfCharacters*)n3 :(int)n4 :(int)n5 :(int)n6
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[14];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    _locals[4].i = n4;
    _locals[5].i = n5;
    _locals[6].i = n6;
    label11:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label25:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label27:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label10:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label33:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label35:;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label6:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label2;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label3:;
    _stack[_sp++].o = _locals[2].o;
    _sp--;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Alphabet isTag___int:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 38;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].i = 59;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label5;
    label4:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label5:;
    _locals[12].i += 1;
    goto label6;
    label2:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 126;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label8;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label1;
    label8:;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label1:;
    _locals[8].i += 1;
    goto label10;
    label0:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label12:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) filterFinalsTM___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_java_util_ArrayDeque_java_util_ArrayList :(java_util_Set*)n1 :(org_apertium_lttoolbox_Alphabet*)n2 :(org_apertium_lttoolbox_process_SetOfCharacters*)n3 :(java_util_ArrayDeque*)n4 :(java_util_ArrayList*)n5
{
    XMLVMElem _stack[7];
    XMLVMElem _locals[17];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    _locals[4].o = n4;
    _locals[5].o = n5;
    label33:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label45:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label47:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label5:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label61:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_where];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label65:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label4:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label3:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _locals[10].i += 1;
    goto label4;
    label1:;
    _locals[7].i += 1;
    goto label5;
    label0:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label49:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label53:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label59:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label9:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label6;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 41;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label8;
    label7:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) set___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label8:;
    _locals[9].i += 1;
    goto label9;
    label6:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label57:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label30:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label10;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label11;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label12;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"(#";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label73:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) getFirst__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) removeFirst__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) set___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label74:;
    goto label11;
    label12:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label75:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label28:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label16;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label17;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 64;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label79:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label81:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[15].i = _op1.i;
    label83:;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[16].i = _op1.i;
    label25:;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[16].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) iswdigit___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 10;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i * _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 48;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    goto label23;
    label22:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    goto label21;
    label23:;
    _locals[15].i += 1;
    goto label25;
    label21:;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) set___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    goto label16;
    label17:;
    _locals[12].i += -1;
    goto label28;
    label16:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label11;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 41;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) set___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label11:;
    _locals[9].i += 1;
    goto label30;
    label10:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label55:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label32:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label31;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _locals[9].i += 1;
    goto label32;
    label31:;
    _stack[_sp++].o = _locals[6].o;
    label34:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (int) iswdigit___char :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label6:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label10:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 48;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 57;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label0:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 178;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 179;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 185;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    label1:;
    _stack[_sp++].i = 1;
    goto label5;
    label4:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


+ (void) __clinit_org_apertium_lttoolbox_process_State
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[0];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_process_State _PUT_DEBUG: _op1.i];
    [_pool release];
    return;
}



@end

