#import "java_util_ArrayList.h"
#import "java_util_Iterator.h"
#import "java_util_List.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_process_Pool.h"


@implementation org_apertium_lttoolbox_process_Pool;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_process_Pool") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_process_Pool_free = (id) [NSNull null];
        org_apertium_lttoolbox_process_Pool_created = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_process_Pool_free release];
    [org_apertium_lttoolbox_process_Pool_created release];
    [super dealloc];
}

- (java_util_List*) _GET_free
{
    return [[org_apertium_lttoolbox_process_Pool_free retain] autorelease];
}

- (void) _PUT_free: (java_util_List*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_Pool_free release];
    org_apertium_lttoolbox_process_Pool_free = v;
}

- (java_util_List*) _GET_created
{
    return [[org_apertium_lttoolbox_process_Pool_created retain] autorelease];
}

- (void) _PUT_created: (java_util_List*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_Pool_created release];
    org_apertium_lttoolbox_process_Pool_created = v;
}

- (void) copy___org_apertium_lttoolbox_process_Pool :(org_apertium_lttoolbox_process_Pool*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Pool*) _op2.o) _PUT_created: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_List*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label9:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) destroy__
{
    XMLVMElem _stack[0];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    [_pool release];
    return;
}


- (void) init___int :(int)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Pool*) _op2.o) _PUT_created: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Pool*) _op2.o) _PUT_free: _op1.o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = [NSNull null];
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    _locals[2].i += 1;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) init___int_java_lang_Object :(int)n1 :(java_lang_Object*)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_List*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_List*) _stack[_sp].o) clear__];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    _locals[3].i += 1;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Pool__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Pool*) _stack[_sp].o) init___int:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Pool___int_java_lang_Object :(int)n1 :(java_lang_Object*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_Pool*) _stack[_sp].o) init___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Pool___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Pool*) _stack[_sp].o) init___int:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Pool___org_apertium_lttoolbox_process_Pool :(org_apertium_lttoolbox_process_Pool*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Pool*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_Pool:_stack[_sp + 1].o];
    label1:;
    [_pool release];
    return;
}


- (java_lang_Object*) get__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) remove___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = [NSNull null];
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_created];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label2:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) release___java_lang_Object :(java_lang_Object*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Pool*) _op1.o)  _GET_free];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label1:;
    [_pool release];
    return;
}



@end

