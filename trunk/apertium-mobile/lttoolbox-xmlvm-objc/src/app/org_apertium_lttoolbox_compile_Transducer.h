#import "xmlvm.h"
#import "java_lang_Object.h"

// For circular include:
@class java_io_InputStream;
@class java_util_Map;
@class java_lang_StringBuilder;
@class org_apertium_lttoolbox_compile_Transducer;
@class java_io_PrintStream;
@class java_lang_System;
@class java_util_HashMap;
@class java_util_TreeSet;
@class java_util_Set;
@class java_util_Collection;
@class java_util_ArrayList;
@class java_util_Map_Entry;
@class java_lang_Object;
@class java_util_List;
@class java_lang_String;
@class java_lang_Integer;
@class java_util_TreeMap;
@class org_apertium_lttoolbox_Compression;
@class java_util_Iterator;
@class java_lang_RuntimeException;
@class java_util_HashSet;
@class java_io_OutputStream;

// Automatically generated by xmlvm2obj. Do not edit!


	
@interface org_apertium_lttoolbox_compile_Transducer : java_lang_Object
{
@private java_lang_Integer* org_apertium_lttoolbox_compile_Transducer_initial;
@private java_lang_Integer* org_apertium_lttoolbox_compile_Transducer_epsilon_tag;
@private java_util_Set* org_apertium_lttoolbox_compile_Transducer_finals;
@private java_util_Map* org_apertium_lttoolbox_compile_Transducer_transitions;

}
+ (void) initialize;
- (id) init;
- (java_lang_Integer*) _GET_initial;
- (void) _PUT_initial: (java_lang_Integer*) v;
- (java_lang_Integer*) _GET_epsilon_tag;
- (void) _PUT_epsilon_tag: (java_lang_Integer*) v;
- (java_util_Set*) _GET_finals;
- (void) _PUT_finals: (java_util_Set*) v;
- (java_util_Map*) _GET_transitions;
- (void) _PUT_transitions: (java_util_Map*) v;
+ (int) _GET_DEBUG;
+ (void) _PUT_DEBUG: (int) v;
- (java_lang_String*) toString__;
- (void) clear__;
- (int) isEmpty__;
- (void) minimize__;
- (java_lang_Integer*) getInitial__;
- (int) isFinal___int :(int)n1;
- (void) setFinal___int :(int)n1;
- (void) setFinal___int_boolean :(int)n1 :(int)n2;
- (void) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer :(java_lang_Integer*)n1 :(java_lang_Integer*)n2 :(java_lang_Integer*)n3;
- (java_lang_Integer*) newState__;
- (void) __init_org_apertium_lttoolbox_compile_Transducer__;
- (java_lang_Integer*) insertSingleTransduction___java_lang_Integer_java_lang_Integer :(java_lang_Integer*)n1 :(java_lang_Integer*)n2;
- (java_lang_Integer*) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer :(java_lang_Integer*)n1 :(java_lang_Integer*)n2;
- (java_lang_Integer*) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer :(java_lang_Integer*)n1 :(org_apertium_lttoolbox_compile_Transducer*)n2;
- (int) numberOfTransitions__;
- (void) setFinal___java_lang_Integer :(java_lang_Integer*)n1;
- (int) size__;
- (void) zeroOrMore__;
- (int) isEmptyIntersection___java_util_Set_java_util_Set :(java_util_Set*)n1 :(java_util_Set*)n2;
- (void) determinize__;
- (void) joinFinals__;
- (void) oneOrMore__;
- (void) optional__;
- (void) reverse__;
- (void) setEpsilon_Tag___int :(int)n1;
- (java_util_Set*) closure___java_lang_Integer :(java_lang_Integer*)n1;
- (void) addTransition___java_lang_Integer_java_lang_Integer_java_lang_Integer :(java_lang_Integer*)n1 :(java_lang_Integer*)n2 :(java_lang_Integer*)n3;
- (int) DEBUG_compare___org_apertium_lttoolbox_compile_Transducer :(org_apertium_lttoolbox_compile_Transducer*)n1;
+ (org_apertium_lttoolbox_compile_Transducer*) read___java_io_InputStream :(java_io_InputStream*)n1;
- (void) write___java_io_OutputStream_int :(java_io_OutputStream*)n1 :(int)n2;
+ (void) __clinit_org_apertium_lttoolbox_compile_Transducer;

@end

