#import "java_util_List.h"
#import "java_lang_Throwable.h"
#import "java_lang_UnsupportedOperationException.h"
#import "java_lang_String.h"
#import "java_util_Collection.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_transfer_PatternStore.h"


@implementation org_apertium_lttoolbox_transfer_PatternStore;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_transfer_PatternStore") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

- (void) __init_org_apertium_lttoolbox_transfer_PatternStore__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


- (java_util_Collection*) get___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = [[[java_lang_UnsupportedOperationException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Not yet implemented";
    _sp -= 2;
    [((java_lang_UnsupportedOperationException*) _stack[_sp].o) __init_java_lang_UnsupportedOperationException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


- (void) put___int_java_util_List :(int)n1 :(java_util_List*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    label0:;
    _stack[_sp++].o = [[[java_lang_UnsupportedOperationException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Not yet implemented";
    _sp -= 2;
    [((java_lang_UnsupportedOperationException*) _stack[_sp].o) __init_java_lang_UnsupportedOperationException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}



@end

