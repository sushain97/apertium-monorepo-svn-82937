#import "java_io_InputStream.h"
#import "java_lang_StringBuilder.h"
#import "java_lang_String.h"
#import "java_lang_RuntimeException.h"
#import "java_io_OutputStream.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_Compression.h"


@implementation org_apertium_lttoolbox_Compression;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_Compression") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

- (void) __init_org_apertium_lttoolbox_Compression__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


+ (void) multibyte_write___long_java_io_OutputStream :(long)n1 :(java_io_OutputStream*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[7];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].l = n1;
    _locals[2].o = n2;
    label8:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].l = 64;
    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _op3.i = 1;
    if (_op1.l > _op2.l)
      _op3.i = 1;
    else if (_op1.l == _op2.l)
      _op3.i = 0;
    else if (_op1.l < _op2.l)
      _op3.i = -1;
    _stack[_sp++].i = _op3.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label0;
    _stack[_sp++].o = _locals[2].o;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label1;
    label0:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].l = 16384;
    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _op3.i = 1;
    if (_op1.l > _op2.l)
      _op3.i = 1;
    else if (_op1.l == _op2.l)
      _op3.i = 0;
    else if (_op1.l < _op2.l)
      _op3.i = -1;
    _stack[_sp++].i = _op3.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label2;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label16:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 8;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label18:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 64;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label17:;
    goto label1;
    label2:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].l = 4194304;
    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _op3.i = 1;
    if (_op1.l > _op2.l)
      _op3.i = 1;
    else if (_op1.l == _op2.l)
      _op3.i = 0;
    else if (_op1.l < _op2.l)
      _op3.i = -1;
    _stack[_sp++].i = _op3.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label4;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label14:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 8;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label22:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 16;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label24:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 128;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label15:;
    goto label1;
    label4:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].l = 1073741824;
    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _op3.i = 1;
    if (_op1.l > _op2.l)
      _op3.i = 1;
    else if (_op1.l == _op2.l)
      _op3.i = 0;
    else if (_op1.l < _op2.l)
      _op3.i = -1;
    _stack[_sp++].i = _op3.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label6;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label12:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 8;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label20:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 16;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label26:;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _stack[_sp++].i = 24;
      ERROR("jvm:lshr");
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label28:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 192;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label13:;
    goto label1;
    label6:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Out of range: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.l = _locals[0].l;
  _stack[_sp++].l = _op1.l;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___long:_stack[_sp + 1].l];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label1:;
    [_pool release];
    return;
}


+ (int) multibyte_read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label6:;
    _stack[_sp++].l = 0;
    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label8:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 64;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    goto label1;
    label0:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 128;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label2;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 63;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i & _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label16:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label18:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _stack[_sp++].l = _op1.l | _op2.l;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    label17:;
    goto label1;
    label2:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 192;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label4;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 63;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i & _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label14:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label20:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label24:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _stack[_sp++].l = _op1.l | _op2.l;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    label15:;
    goto label1;
    label4:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 63;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i & _op2.i;    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label12:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label22:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label26:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label28:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _op2.l = _stack[--_sp].l;
    _op1.l = _stack[--_sp].l;
    _stack[_sp++].l = _op1.l | _op2.l;    _op1.l = _stack[--_sp].l;
    _locals[2].l = _op1.l;
    label1:;
    _op1.l = _locals[2].l;
  _stack[_sp++].l = _op1.l;
    _op1.l = _stack[--_sp].l;
  _stack[_sp++].i = (int) _op1.l;    label7:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


+ (void) String_write___java_lang_String_java_io_OutputStream :(java_lang_String*)n1 :(java_io_OutputStream*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    _locals[1].o = n2;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _locals[2].i += 1;
    goto label1;
    label0:;
    [_pool release];
    return;
}


+ (java_lang_String*) String_read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label2:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _locals[2].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

