#import "java_lang_String.h"
#import "java_lang_Integer.h"
#import "org_apertium_lttoolbox_compile_Transducer.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "java_util_Iterator.h"
#import "java_util_TreeSet.h"
#import "java_lang_RuntimeException.h"
#import "java_lang_Throwable.h"
#import "java_util_Set.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_compile_RegexpCompiler.h"

int _STATIC_org_apertium_lttoolbox_compile_RegexpCompiler_FIN_FICHERO = -1;

@implementation org_apertium_lttoolbox_compile_RegexpCompiler;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_compile_RegexpCompiler") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_compile_RegexpCompiler_input = (id) [NSNull null];
        org_apertium_lttoolbox_compile_RegexpCompiler_alphabet = (id) [NSNull null];
        org_apertium_lttoolbox_compile_RegexpCompiler_transducer = (id) [NSNull null];
        org_apertium_lttoolbox_compile_RegexpCompiler_state = (id) [NSNull null];
        org_apertium_lttoolbox_compile_RegexpCompiler_postop = (id) [NSNull null];
        org_apertium_lttoolbox_compile_RegexpCompiler_brackets = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_compile_RegexpCompiler_input release];
    [org_apertium_lttoolbox_compile_RegexpCompiler_alphabet release];
    [org_apertium_lttoolbox_compile_RegexpCompiler_transducer release];
    [org_apertium_lttoolbox_compile_RegexpCompiler_state release];
    [org_apertium_lttoolbox_compile_RegexpCompiler_postop release];
    [org_apertium_lttoolbox_compile_RegexpCompiler_brackets release];
    [super dealloc];
}

+ (int) _GET_FIN_FICHERO
{
    return _STATIC_org_apertium_lttoolbox_compile_RegexpCompiler_FIN_FICHERO;
}

+ (void) _PUT_FIN_FICHERO: (int) v
{
    _STATIC_org_apertium_lttoolbox_compile_RegexpCompiler_FIN_FICHERO = v;
}

- (int) _GET_token
{
    return org_apertium_lttoolbox_compile_RegexpCompiler_token;
}

- (void) _PUT_token: (int) v
{
    org_apertium_lttoolbox_compile_RegexpCompiler_token = v;
}

- (java_lang_String*) _GET_input
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_input retain] autorelease];
}

- (void) _PUT_input: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_input release];
    org_apertium_lttoolbox_compile_RegexpCompiler_input = v;
}

- (org_apertium_lttoolbox_Alphabet*) _GET_alphabet
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_alphabet retain] autorelease];
}

- (void) _PUT_alphabet: (org_apertium_lttoolbox_Alphabet*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_alphabet release];
    org_apertium_lttoolbox_compile_RegexpCompiler_alphabet = v;
}

- (org_apertium_lttoolbox_compile_Transducer*) _GET_transducer
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_transducer retain] autorelease];
}

- (void) _PUT_transducer: (org_apertium_lttoolbox_compile_Transducer*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_transducer release];
    org_apertium_lttoolbox_compile_RegexpCompiler_transducer = v;
}

- (java_lang_Integer*) _GET_state
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_state retain] autorelease];
}

- (void) _PUT_state: (java_lang_Integer*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_state release];
    org_apertium_lttoolbox_compile_RegexpCompiler_state = v;
}

- (int) _GET_letter
{
    return org_apertium_lttoolbox_compile_RegexpCompiler_letter;
}

- (void) _PUT_letter: (int) v
{
    org_apertium_lttoolbox_compile_RegexpCompiler_letter = v;
}

- (java_lang_String*) _GET_postop
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_postop retain] autorelease];
}

- (void) _PUT_postop: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_postop release];
    org_apertium_lttoolbox_compile_RegexpCompiler_postop = v;
}

- (java_util_Set*) _GET_brackets
{
    return [[org_apertium_lttoolbox_compile_RegexpCompiler_brackets retain] autorelease];
}

- (void) _PUT_brackets: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_RegexpCompiler_brackets release];
    org_apertium_lttoolbox_compile_RegexpCompiler_brackets = v;
}

- (void) __init_org_apertium_lttoolbox_compile_RegexpCompiler__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_transducer: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_TreeSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeSet*) _stack[_sp].o) __init_java_util_TreeSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_brackets: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (int) isReserved___int :(int)n1
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label13:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch (_op1.i) {
        case -1: goto label0;
        case 40: goto label0;
        case 41: goto label0;
        case 42: goto label0;
        case 43: goto label0;
        case 45: goto label0;
        case 63: goto label0;
        case 91: goto label0;
        case 92: goto label0;
        case 93: goto label0;
        case 94: goto label0;
        case 124: goto label0;
        default: goto label12;
    }
    label0:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label12:;
    _stack[_sp++].i = 0;
    label14:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) error__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error parsing regexp";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


- (void) errorConsuming___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error parsing regexp";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


- (void) consume___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_input];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_input: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_input];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_token: _op1.i];
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_input];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_token: _op1.i];
    goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) errorConsuming___int:_stack[_sp + 1].i];
    label2:;
    [_pool release];
    return;
}


- (void) compile___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_input: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_input];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_token: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) S__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    label1:;
    [_pool release];
    return;
}


- (void) S__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) RExpr__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Cola__];
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label4:;
    [_pool release];
    return;
}


- (void) RExpr__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Term__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) RExprp__];
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label4:;
    [_pool release];
    return;
}


- (void) Cola__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 41;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    goto label0;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 124;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 124;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) RExpr__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Cola__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label8:;
    goto label0;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label0:;
    [_pool release];
    return;
}


- (void) Term__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label17:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label21:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Letra__];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_letter];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_letter];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Postop__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"*";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) zeroOrMore__];
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"+";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) oneOrMore__];
    goto label3;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"?";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) optional__];
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    label22:;
    goto label7;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label19:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_transducer: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 40;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) S__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 41;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Postop__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"*";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) zeroOrMore__];
    goto label10;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"+";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) oneOrMore__];
    goto label10;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"?";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) optional__];
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_transducer: _op1.o];
    label20:;
    goto label7;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label15;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 91;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Esp__];
    goto label7;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label7:;
    [_pool release];
    return;
}


- (void) RExprp__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Term__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) RExprp__];
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 124;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 41;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    goto label4;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label4:;
    [_pool release];
    return;
}


- (void) Letra__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_letter: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_letter: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Reservado__];
    goto label1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label1:;
    [_pool release];
    return;
}


- (void) Postop__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 42;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"*";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 63;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 63;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"?";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    goto label1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 43;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 43;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"+";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    goto label1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 40;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 124;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 41;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label12;
    goto label1;
    label12:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label1:;
    [_pool release];
    return;
}


- (void) Esp__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label16:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label18:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 93;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Lista__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 93;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Postop__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_brackets];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label24:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label28:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    label25:;
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) joinFinals__];
    goto label5;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 94;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label6;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 94;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Lista__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 93;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Postop__];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label9:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 256;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_brackets];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) contains___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label8;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label26:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    label8:;
    _locals[2].i += 1;
    goto label9;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) joinFinals__];
    goto label5;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"+";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) oneOrMore__];
    goto label12;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"*";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) zeroOrMore__];
    goto label12;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_postop];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"?";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) optional__];
    label12:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_brackets];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_Set*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_state: _op1.o];
    label17:;
    [_pool release];
    return;
}


- (void) Lista__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Elem__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Lista__];
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 93;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    goto label2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label2:;
    [_pool release];
    return;
}


- (void) Reservado__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label1:;
    [_pool release];
    return;
}


- (void) Elem__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Letra__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_letter];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) ColaLetra__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_letter];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label11:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    goto label3;
    label2:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label5:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_brackets];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _locals[3].i += 1;
    goto label5;
    label3:;
    goto label6;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label6:;
    [_pool release];
    return;
}


- (void) ColaLetra__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 45;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 45;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) consume___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) Letra__];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) isReserved___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_token];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 93;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    goto label1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) error__];
    label1:;
    [_pool release];
    return;
}


- (void) setAlphabet___org_apertium_lttoolbox_Alphabet :(org_apertium_lttoolbox_Alphabet*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_alphabet: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (org_apertium_lttoolbox_compile_Transducer*) getTransducer__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) initialize___org_apertium_lttoolbox_Alphabet :(org_apertium_lttoolbox_Alphabet*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) setAlphabet___org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op1.o)  _GET_brackets];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_Set*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _op2.o) _PUT_postop: _op1.o];
    label1:;
    [_pool release];
    return;
}



@end

