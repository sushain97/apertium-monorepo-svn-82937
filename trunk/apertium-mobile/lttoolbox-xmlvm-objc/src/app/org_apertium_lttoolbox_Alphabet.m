#import "java_lang_IllegalArgumentException.h"
#import "org_apertium_lttoolbox_Alphabet_IntegerPair.h"
#import "java_io_InputStream.h"
#import "java_io_BufferedOutputStream.h"
#import "java_lang_StringBuilder.h"
#import "java_io_PrintStream.h"
#import "java_lang_System.h"
#import "java_util_HashMap.h"
#import "java_lang_Character.h"
#import "java_io_BufferedInputStream.h"
#import "java_util_Set.h"
#import "java_util_Collection.h"
#import "java_io_FileInputStream.h"
#import "java_util_ArrayList.h"
#import "java_io_FileOutputStream.h"
#import "java_lang_String.h"
#import "java_lang_Integer.h"
#import "org_apertium_lttoolbox_Compression.h"
#import "java_util_Iterator.h"
#import "java_io_OutputStream.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_Alphabet.h"

org_apertium_lttoolbox_Alphabet* _STATIC_org_apertium_lttoolbox_Alphabet_debuggingInstance;

@implementation org_apertium_lttoolbox_Alphabet;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_Alphabet") == 0) {
        _STATIC_org_apertium_lttoolbox_Alphabet_debuggingInstance = (id) [NSNull null];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_Alphabet_slexic = (id) [NSNull null];
        org_apertium_lttoolbox_Alphabet_slexicinv = (id) [NSNull null];
        org_apertium_lttoolbox_Alphabet_spair = (id) [NSNull null];
        org_apertium_lttoolbox_Alphabet_spairinv = (id) [NSNull null];
        org_apertium_lttoolbox_Alphabet_tmp = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_Alphabet_slexic release];
    [org_apertium_lttoolbox_Alphabet_slexicinv release];
    [org_apertium_lttoolbox_Alphabet_spair release];
    [org_apertium_lttoolbox_Alphabet_spairinv release];
    [org_apertium_lttoolbox_Alphabet_tmp release];
    [super dealloc];
}

- (java_util_HashMap*) _GET_slexic
{
    return [[org_apertium_lttoolbox_Alphabet_slexic retain] autorelease];
}

- (void) _PUT_slexic: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_Alphabet_slexic release];
    org_apertium_lttoolbox_Alphabet_slexic = v;
}

- (java_util_ArrayList*) _GET_slexicinv
{
    return [[org_apertium_lttoolbox_Alphabet_slexicinv retain] autorelease];
}

- (void) _PUT_slexicinv: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_Alphabet_slexicinv release];
    org_apertium_lttoolbox_Alphabet_slexicinv = v;
}

- (java_util_HashMap*) _GET_spair
{
    return [[org_apertium_lttoolbox_Alphabet_spair retain] autorelease];
}

- (void) _PUT_spair: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_Alphabet_spair release];
    org_apertium_lttoolbox_Alphabet_spair = v;
}

- (java_util_ArrayList*) _GET_spairinv
{
    return [[org_apertium_lttoolbox_Alphabet_spairinv retain] autorelease];
}

- (void) _PUT_spairinv: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_Alphabet_spairinv release];
    org_apertium_lttoolbox_Alphabet_spairinv = v;
}

+ (org_apertium_lttoolbox_Alphabet*) _GET_debuggingInstance
{
    return [[_STATIC_org_apertium_lttoolbox_Alphabet_debuggingInstance retain] autorelease];
}

+ (void) _PUT_debuggingInstance: (org_apertium_lttoolbox_Alphabet*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_Alphabet_debuggingInstance release];
    _STATIC_org_apertium_lttoolbox_Alphabet_debuggingInstance = v;
}

- (org_apertium_lttoolbox_Alphabet_IntegerPair*) _GET_tmp
{
    return [[org_apertium_lttoolbox_Alphabet_tmp retain] autorelease];
}

- (void) _PUT_tmp: (org_apertium_lttoolbox_Alphabet_IntegerPair*) v
{
    [v retain];
    [org_apertium_lttoolbox_Alphabet_tmp release];
    org_apertium_lttoolbox_Alphabet_tmp = v;
}

- (int) _GET_cast00
{
    return org_apertium_lttoolbox_Alphabet_cast00;
}

- (void) _PUT_cast00: (int) v
{
    org_apertium_lttoolbox_Alphabet_cast00 = v;
}

- (void) debug_remember_removed_symbols__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_Alphabet _PUT_debuggingInstance: _op1.o];
    _op1.o = [org_apertium_lttoolbox_Alphabet _GET_debuggingInstance];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_Alphabet__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_slexic: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_slexicinv: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_spair: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_spairinv: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet_IntegerPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet_IntegerPair___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_tmp: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 0;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_cast00: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_Alphabet _PUT_debuggingInstance: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (java_util_Set*) getFlagMatchSymbols__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) includeSymbol___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label0:;
    [_pool release];
    return;
}


- (int) cast___int_int :(int)n1 :(int)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_tmp];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op2.o) _PUT_first: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_tmp];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op2.o) _PUT_second: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_tmp];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_tmp];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_tmp];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet_IntegerPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet_IntegerPair___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_Alphabet*) _op2.o) _PUT_tmp: _op1.o];
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    label2:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) cast___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) isSymbolDefined___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) size__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) write___java_io_OutputStream :(java_io_OutputStream*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 1;
    _stack[_sp++].i = 1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression String_write___java_lang_String_java_io_OutputStream:_stack[_sp + 0].o:_stack[_sp + 1].o];
    _locals[2].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label3:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_first];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_second];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _locals[3].i += 1;
    goto label3;
    label2:;
    [_pool release];
    return;
}


- (int) DEBUG_compare___org_apertium_lttoolbox_Alphabet :(org_apertium_lttoolbox_Alphabet*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[12];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label33:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"now comparing the alphabets this with other:\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label37:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label43:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    goto label0;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label3;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    goto label0;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) remove___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label44:;
    goto label5;
    label0:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the slexic attributes are the same : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___boolean:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label41:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label45:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label13:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label6;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label57:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label61:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label10:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label7;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    
  _op2.i = _stack[--_sp].i; // Integer remainder of 
  _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i % _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label69:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    goto label7;
    label8:;
    _locals[7].i += 1;
    goto label10;
    label7:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label11;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label6;
    label11:;
    _locals[4].i += 1;
    goto label13;
    label6:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label47:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the slexicinv attributes are the same : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___boolean:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label19:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label59:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label15;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    goto label14;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label17;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    goto label14;
    label17:;
    goto label19;
    label14:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the spair attributes are the same : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___boolean:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label49:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label55:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label27:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label20;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label67:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label71:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label24:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label21;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    
  _op2.i = _stack[--_sp].i; // Integer remainder of 
  _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i % _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label75:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    goto label21;
    label22:;
    _locals[9].i += 1;
    goto label24;
    label21:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label25;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    goto label20;
    label25:;
    _locals[6].i += 1;
    goto label27;
    label20:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the spairinv attributes are the same : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___boolean:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _stack[_sp++].i = 1;
    goto label32;
    label28:;
    _stack[_sp++].i = 0;
    label32:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) testIO__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = [[[java_io_BufferedOutputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileOutputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"testAlphabet.bin";
    _sp -= 2;
    [((java_io_FileOutputStream*) _stack[_sp].o) __init_java_io_FileOutputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedOutputStream*) _stack[_sp].o) __init_java_io_BufferedOutputStream___java_io_OutputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) write___java_io_OutputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((java_io_OutputStream*) _stack[_sp].o) close__];
    _stack[_sp++].o = [[[java_io_BufferedInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"testAlphabet.bin";
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedInputStream*) _stack[_sp].o) __init_java_io_BufferedInputStream___java_io_InputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label6:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Alphabet read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    [((java_io_InputStream*) _stack[_sp].o) close__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) DEBUG_compare___org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two alphabets are the same : true";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label1;
    label0:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two alphabets are the same : false";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label1:;
    [_pool release];
    return;
}


- (void) display__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label4:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"slexicinv : \012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"slexic : \012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"spairinv :\012 ";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"[";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_first];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_second];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">; ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    _locals[1].i += 1;
    goto label1;
    label0:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_first];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_second];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"]";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"spair :\012 ";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"[";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label10:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"\173<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_first];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_second];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"> =>";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"\175, ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    label11:;
    goto label3;
    label2:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"]";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label5:;
    [_pool release];
    return;
}


+ (org_apertium_lttoolbox_Alphabet*) read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label4:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _locals[2].i += -1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexic];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label11:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label12:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label3:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label2;
    _locals[2].i += -1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label16:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet_IntegerPair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet_IntegerPair___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label18:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label20:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spair];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label15:;
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    label5:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) toString__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) getSymbol___java_lang_String_int :(java_lang_String*)n1 :(int)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___java_lang_String_int_boolean:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) getSymbol___java_lang_String_int_boolean :(java_lang_String*)n1 :(int)n2 :(int)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    _locals[3].i = n3;
    label0:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) getSymbol___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) getSymbol___int_boolean :(int)n1 :(int)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label3:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label0:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label2;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label2:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label4:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) setSymbol___int_java_lang_String :(int)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label0;
    _stack[_sp++].o = [[[java_lang_IllegalArgumentException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Symbol may not be a normal character:";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_IllegalArgumentException*) _stack[_sp].o) __init_java_lang_IllegalArgumentException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_slexicinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) set___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label2:;
    [_pool release];
    return;
}


+ (int) isTag___int :(int)n1
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].i = n1;
    label2:;
    _op1.i = _locals[0].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= 0) goto label0;
    _stack[_sp++].i = 1;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (org_apertium_lttoolbox_Alphabet_IntegerPair*) decode___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_spairinv];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

