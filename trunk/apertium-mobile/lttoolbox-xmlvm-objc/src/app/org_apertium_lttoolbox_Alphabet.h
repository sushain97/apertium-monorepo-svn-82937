#import "xmlvm.h"
#import "java_lang_Object.h"

// For circular include:
@class java_lang_IllegalArgumentException;
@class org_apertium_lttoolbox_Alphabet_IntegerPair;
@class java_io_InputStream;
@class java_io_BufferedOutputStream;
@class java_lang_StringBuilder;
@class java_io_PrintStream;
@class java_lang_System;
@class java_util_HashMap;
@class java_lang_Character;
@class java_io_BufferedInputStream;
@class java_util_Set;
@class java_util_Collection;
@class java_io_FileInputStream;
@class java_util_ArrayList;
@class java_io_FileOutputStream;
@class java_lang_Object;
@class java_lang_String;
@class java_lang_Integer;
@class org_apertium_lttoolbox_Compression;
@class org_apertium_lttoolbox_Alphabet;
@class java_util_Iterator;
@class java_io_OutputStream;

// Automatically generated by xmlvm2obj. Do not edit!


	
@interface org_apertium_lttoolbox_Alphabet : java_lang_Object
{
@private java_util_HashMap* org_apertium_lttoolbox_Alphabet_slexic;
@private java_util_ArrayList* org_apertium_lttoolbox_Alphabet_slexicinv;
@private java_util_HashMap* org_apertium_lttoolbox_Alphabet_spair;
@private java_util_ArrayList* org_apertium_lttoolbox_Alphabet_spairinv;
@private org_apertium_lttoolbox_Alphabet_IntegerPair* org_apertium_lttoolbox_Alphabet_tmp;
@private int org_apertium_lttoolbox_Alphabet_cast00;

}
+ (void) initialize;
- (id) init;
- (java_util_HashMap*) _GET_slexic;
- (void) _PUT_slexic: (java_util_HashMap*) v;
- (java_util_ArrayList*) _GET_slexicinv;
- (void) _PUT_slexicinv: (java_util_ArrayList*) v;
- (java_util_HashMap*) _GET_spair;
- (void) _PUT_spair: (java_util_HashMap*) v;
- (java_util_ArrayList*) _GET_spairinv;
- (void) _PUT_spairinv: (java_util_ArrayList*) v;
+ (org_apertium_lttoolbox_Alphabet*) _GET_debuggingInstance;
+ (void) _PUT_debuggingInstance: (org_apertium_lttoolbox_Alphabet*) v;
- (org_apertium_lttoolbox_Alphabet_IntegerPair*) _GET_tmp;
- (void) _PUT_tmp: (org_apertium_lttoolbox_Alphabet_IntegerPair*) v;
- (int) _GET_cast00;
- (void) _PUT_cast00: (int) v;
- (void) debug_remember_removed_symbols__;
- (void) __init_org_apertium_lttoolbox_Alphabet__;
- (java_util_Set*) getFlagMatchSymbols__;
- (void) includeSymbol___java_lang_String :(java_lang_String*)n1;
- (int) cast___int_int :(int)n1 :(int)n2;
- (int) cast___java_lang_String :(java_lang_String*)n1;
- (int) isSymbolDefined___java_lang_String :(java_lang_String*)n1;
- (int) size__;
- (void) write___java_io_OutputStream :(java_io_OutputStream*)n1;
- (int) DEBUG_compare___org_apertium_lttoolbox_Alphabet :(org_apertium_lttoolbox_Alphabet*)n1;
- (void) testIO__;
- (void) display__;
+ (org_apertium_lttoolbox_Alphabet*) read___java_io_InputStream :(java_io_InputStream*)n1;
- (java_lang_String*) toString__;
- (java_lang_String*) getSymbol___java_lang_String_int :(java_lang_String*)n1 :(int)n2;
- (java_lang_String*) getSymbol___java_lang_String_int_boolean :(java_lang_String*)n1 :(int)n2 :(int)n3;
- (java_lang_String*) getSymbol___int :(int)n1;
- (java_lang_String*) getSymbol___int_boolean :(int)n1 :(int)n2;
- (void) setSymbol___int_java_lang_String :(int)n1 :(java_lang_String*)n2;
+ (int) isTag___int :(int)n1;
- (org_apertium_lttoolbox_Alphabet_IntegerPair*) decode___int :(int)n1;

@end

