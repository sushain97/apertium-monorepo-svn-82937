#import "java_io_InputStream.h"
#import "java_util_Map.h"
#import "java_lang_Boolean.h"
#import "javax_xml_stream_XMLStreamException.h"
#import "org_apertium_lttoolbox_compile_EntryToken.h"
#import "org_apertium_lttoolbox_compile_XMLPrint.h"
#import "java_lang_StringBuilder.h"
#import "org_apertium_lttoolbox_compile_Transducer.h"
#import "java_io_PrintStream.h"
#import "java_lang_System.h"
#import "java_util_HashMap.h"
#import "javax_xml_stream_XMLStreamReader.h"
#import "java_lang_Throwable.h"
#import "java_lang_Character.h"
#import "java_io_BufferedInputStream.h"
#import "java_util_Set.h"
#import "javax_xml_stream_Location.h"
#import "javax_xml_stream_XMLInputFactory.h"
#import "java_util_Collection.h"
#import "java_io_FileInputStream.h"
#import "java_util_ArrayList.h"
#import "java_util_List.h"
#import "java_lang_Integer.h"
#import "java_util_TreeMap.h"
#import "java_lang_String.h"
#import "org_apertium_lttoolbox_Compression.h"
#import "java_lang_IllegalStateException.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "org_apertium_lttoolbox_compile_RegexpCompiler.h"
#import "java_util_Iterator.h"
#import "java_util_HashSet.h"
#import "java_lang_RuntimeException.h"
#import "java_io_OutputStream.h"
#import "java_io_FileNotFoundException.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_compile_Compile.h"

java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_DICTIONARY_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ALPHABET_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEFS_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEF_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_N_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEFS_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEF_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAR_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ENTRY_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_LR_VAL;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_RL_VAL;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAIR_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEFT_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RIGHT_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_S_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_REGEXP_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SECTION_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ID_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_TYPE_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IDENTITY_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_FLAG_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_VALUE_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_JOIN_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_BLANK_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_POSTGENERATOR_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_GROUP_ELEM;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEMMA_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_ATTR;
java_lang_String* _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_YES_VAL;
int _STATIC_org_apertium_lttoolbox_compile_Compile_DEBUG;

@implementation org_apertium_lttoolbox_compile_Compile;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_compile_Compile") == 0) {
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_DICTIONARY_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ALPHABET_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEFS_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEF_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_N_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEFS_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEF_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAR_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ENTRY_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_LR_VAL = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_RL_VAL = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAIR_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEFT_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RIGHT_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_S_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_REGEXP_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SECTION_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ID_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_TYPE_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IDENTITY_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_FLAG_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_VALUE_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_JOIN_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_BLANK_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_POSTGENERATOR_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_GROUP_ELEM = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEMMA_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_ATTR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_YES_VAL = (id) [NSNull null];
        [org_apertium_lttoolbox_compile_Compile __clinit_org_apertium_lttoolbox_compile_Compile];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_compile_Compile_current_paradigm = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_current_section = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_direction = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_letters = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_alphabet = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_paradigms = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_sections = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_prefix_paradigms = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_suffix_paradigms = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_postsuffix_paradigms = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_acx_map = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_version = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_encoding = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_standalone = (id) [NSNull null];
        org_apertium_lttoolbox_compile_Compile_reader = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_compile_Compile_current_paradigm release];
    [org_apertium_lttoolbox_compile_Compile_current_section release];
    [org_apertium_lttoolbox_compile_Compile_direction release];
    [org_apertium_lttoolbox_compile_Compile_letters release];
    [org_apertium_lttoolbox_compile_Compile_alphabet release];
    [org_apertium_lttoolbox_compile_Compile_paradigms release];
    [org_apertium_lttoolbox_compile_Compile_sections release];
    [org_apertium_lttoolbox_compile_Compile_prefix_paradigms release];
    [org_apertium_lttoolbox_compile_Compile_suffix_paradigms release];
    [org_apertium_lttoolbox_compile_Compile_postsuffix_paradigms release];
    [org_apertium_lttoolbox_compile_Compile_acx_map release];
    [org_apertium_lttoolbox_compile_Compile_version release];
    [org_apertium_lttoolbox_compile_Compile_encoding release];
    [org_apertium_lttoolbox_compile_Compile_standalone release];
    [org_apertium_lttoolbox_compile_Compile_reader release];
    [super dealloc];
}

+ (java_lang_String*) _GET_COMPILER_DICTIONARY_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_DICTIONARY_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_DICTIONARY_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_DICTIONARY_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_DICTIONARY_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_ALPHABET_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ALPHABET_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_ALPHABET_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ALPHABET_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ALPHABET_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_SDEFS_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEFS_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_SDEFS_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEFS_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEFS_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_SDEF_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEF_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_SDEF_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEF_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SDEF_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_N_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_N_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_N_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_N_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_N_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_PARDEFS_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEFS_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_PARDEFS_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEFS_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEFS_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_PARDEF_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEF_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_PARDEF_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEF_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PARDEF_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_PAR_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAR_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_PAR_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAR_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAR_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_ENTRY_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ENTRY_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_ENTRY_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ENTRY_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ENTRY_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_RESTRICTION_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_RESTRICTION_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_RESTRICTION_LR_VAL
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_LR_VAL retain] autorelease];
}

+ (void) _PUT_COMPILER_RESTRICTION_LR_VAL: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_LR_VAL release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_LR_VAL = v;
}

+ (java_lang_String*) _GET_COMPILER_RESTRICTION_RL_VAL
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_RL_VAL retain] autorelease];
}

+ (void) _PUT_COMPILER_RESTRICTION_RL_VAL: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_RL_VAL release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RESTRICTION_RL_VAL = v;
}

+ (java_lang_String*) _GET_COMPILER_PAIR_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAIR_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_PAIR_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAIR_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_PAIR_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_LEFT_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEFT_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_LEFT_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEFT_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEFT_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_RIGHT_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RIGHT_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_RIGHT_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RIGHT_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_RIGHT_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_S_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_S_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_S_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_S_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_S_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_REGEXP_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_REGEXP_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_REGEXP_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_REGEXP_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_REGEXP_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_SECTION_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SECTION_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_SECTION_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SECTION_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_SECTION_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_ID_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ID_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_ID_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ID_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_ID_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_TYPE_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_TYPE_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_TYPE_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_TYPE_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_TYPE_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_IDENTITY_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IDENTITY_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_IDENTITY_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IDENTITY_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IDENTITY_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_FLAG_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_FLAG_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_FLAG_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_FLAG_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_FLAG_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_VALUE_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_VALUE_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_VALUE_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_VALUE_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_VALUE_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_JOIN_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_JOIN_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_JOIN_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_JOIN_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_JOIN_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_BLANK_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_BLANK_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_BLANK_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_BLANK_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_BLANK_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_POSTGENERATOR_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_POSTGENERATOR_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_POSTGENERATOR_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_POSTGENERATOR_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_POSTGENERATOR_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_GROUP_ELEM
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_GROUP_ELEM retain] autorelease];
}

+ (void) _PUT_COMPILER_GROUP_ELEM: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_GROUP_ELEM release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_GROUP_ELEM = v;
}

+ (java_lang_String*) _GET_COMPILER_LEMMA_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEMMA_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_LEMMA_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEMMA_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_LEMMA_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_IGNORE_ATTR
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_ATTR retain] autorelease];
}

+ (void) _PUT_COMPILER_IGNORE_ATTR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_ATTR release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_ATTR = v;
}

+ (java_lang_String*) _GET_COMPILER_IGNORE_YES_VAL
{
    return [[_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_YES_VAL retain] autorelease];
}

+ (void) _PUT_COMPILER_IGNORE_YES_VAL: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_YES_VAL release];
    _STATIC_org_apertium_lttoolbox_compile_Compile_COMPILER_IGNORE_YES_VAL = v;
}

- (java_lang_String*) _GET_current_paradigm
{
    return [[org_apertium_lttoolbox_compile_Compile_current_paradigm retain] autorelease];
}

- (void) _PUT_current_paradigm: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_current_paradigm release];
    org_apertium_lttoolbox_compile_Compile_current_paradigm = v;
}

- (java_lang_String*) _GET_current_section
{
    return [[org_apertium_lttoolbox_compile_Compile_current_section retain] autorelease];
}

- (void) _PUT_current_section: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_current_section release];
    org_apertium_lttoolbox_compile_Compile_current_section = v;
}

- (java_lang_String*) _GET_direction
{
    return [[org_apertium_lttoolbox_compile_Compile_direction retain] autorelease];
}

- (void) _PUT_direction: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_direction release];
    org_apertium_lttoolbox_compile_Compile_direction = v;
}

- (java_lang_String*) _GET_letters
{
    return [[org_apertium_lttoolbox_compile_Compile_letters retain] autorelease];
}

- (void) _PUT_letters: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_letters release];
    org_apertium_lttoolbox_compile_Compile_letters = v;
}

- (org_apertium_lttoolbox_Alphabet*) _GET_alphabet
{
    return [[org_apertium_lttoolbox_compile_Compile_alphabet retain] autorelease];
}

- (void) _PUT_alphabet: (org_apertium_lttoolbox_Alphabet*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_alphabet release];
    org_apertium_lttoolbox_compile_Compile_alphabet = v;
}

- (java_util_Map*) _GET_paradigms
{
    return [[org_apertium_lttoolbox_compile_Compile_paradigms retain] autorelease];
}

- (void) _PUT_paradigms: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_paradigms release];
    org_apertium_lttoolbox_compile_Compile_paradigms = v;
}

- (java_util_Map*) _GET_sections
{
    return [[org_apertium_lttoolbox_compile_Compile_sections retain] autorelease];
}

- (void) _PUT_sections: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_sections release];
    org_apertium_lttoolbox_compile_Compile_sections = v;
}

- (java_util_HashMap*) _GET_prefix_paradigms
{
    return [[org_apertium_lttoolbox_compile_Compile_prefix_paradigms retain] autorelease];
}

- (void) _PUT_prefix_paradigms: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_prefix_paradigms release];
    org_apertium_lttoolbox_compile_Compile_prefix_paradigms = v;
}

- (java_util_HashMap*) _GET_suffix_paradigms
{
    return [[org_apertium_lttoolbox_compile_Compile_suffix_paradigms retain] autorelease];
}

- (void) _PUT_suffix_paradigms: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_suffix_paradigms release];
    org_apertium_lttoolbox_compile_Compile_suffix_paradigms = v;
}

- (java_util_HashMap*) _GET_postsuffix_paradigms
{
    return [[org_apertium_lttoolbox_compile_Compile_postsuffix_paradigms retain] autorelease];
}

- (void) _PUT_postsuffix_paradigms: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_postsuffix_paradigms release];
    org_apertium_lttoolbox_compile_Compile_postsuffix_paradigms = v;
}

- (java_util_HashMap*) _GET_acx_map
{
    return [[org_apertium_lttoolbox_compile_Compile_acx_map retain] autorelease];
}

- (void) _PUT_acx_map: (java_util_HashMap*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_acx_map release];
    org_apertium_lttoolbox_compile_Compile_acx_map = v;
}

- (int) _GET_acx_current_char
{
    return org_apertium_lttoolbox_compile_Compile_acx_current_char;
}

- (void) _PUT_acx_current_char: (int) v
{
    org_apertium_lttoolbox_compile_Compile_acx_current_char = v;
}

- (java_lang_String*) _GET_version
{
    return [[org_apertium_lttoolbox_compile_Compile_version retain] autorelease];
}

- (void) _PUT_version: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_version release];
    org_apertium_lttoolbox_compile_Compile_version = v;
}

- (java_lang_String*) _GET_encoding
{
    return [[org_apertium_lttoolbox_compile_Compile_encoding retain] autorelease];
}

- (void) _PUT_encoding: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_encoding release];
    org_apertium_lttoolbox_compile_Compile_encoding = v;
}

- (java_lang_Boolean*) _GET_standalone
{
    return [[org_apertium_lttoolbox_compile_Compile_standalone retain] autorelease];
}

- (void) _PUT_standalone: (java_lang_Boolean*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_standalone release];
    org_apertium_lttoolbox_compile_Compile_standalone = v;
}

- (javax_xml_stream_XMLStreamReader*) _GET_reader
{
    return [[org_apertium_lttoolbox_compile_Compile_reader retain] autorelease];
}

- (void) _PUT_reader: (javax_xml_stream_XMLStreamReader*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_Compile_reader release];
    org_apertium_lttoolbox_compile_Compile_reader = v;
}

+ (int) _GET_DEBUG
{
    return _STATIC_org_apertium_lttoolbox_compile_Compile_DEBUG;
}

+ (void) _PUT_DEBUG: (int) v
{
    _STATIC_org_apertium_lttoolbox_compile_Compile_DEBUG = v;
}

- (void) __init_org_apertium_lttoolbox_compile_Compile__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_paradigm: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_section: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_direction: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_letters: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_paradigms: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_TreeMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeMap*) _stack[_sp].o) __init_java_util_TreeMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_sections: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_prefix_paradigms: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_suffix_paradigms: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_postsuffix_paradigms: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_acx_map: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_version: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_encoding: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Boolean valueOf___boolean:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_standalone: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_alphabet: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (void) parse___java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[6];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label7:;
    @try {
    @try {
    @try {
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_direction: _op1.o];
    _sp -= 0;
    _op1.o = [javax_xml_stream_XMLInputFactory newInstance__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"-";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [java_lang_System _GET_in];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((javax_xml_stream_XMLInputFactory*) _stack[_sp].o) createXMLStreamReader___java_io_InputStream:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_reader: _op1.o];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    _op1.o = [((javax_xml_stream_XMLInputFactory*) _stack[_sp].o) createXMLStreamReader___java_io_InputStream:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_reader: _op1.o];
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procNode__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) close__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) values__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Collection*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label23:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) minimize__];
    label24:;
    goto label5;
    } @catch (java_io_FileNotFoundException* _ex) {
        _stack[_sp++].o = _ex;
        goto label25;
    }
    } @catch (java_lang_RuntimeException* _ex) {
        _stack[_sp++].o = _ex;
        goto label20;
    }
    } @catch (java_lang_Throwable* _ex) {
        _stack[_sp++].o = _ex;
        goto label16;
    }
    label4:;
    goto label6;
    label25:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label19:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Cannot open '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label20:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label15:;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @") at line ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label16:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label13:;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @") at line ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error t ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String_java_lang_Throwable:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label6:;
    [_pool release];
    return;
}


- (void) parseACX___java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label5:;
    @try {
    @try {
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _sp -= 0;
    _op1.o = [javax_xml_stream_XMLInputFactory newInstance__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    _op1.o = [((javax_xml_stream_XMLInputFactory*) _stack[_sp].o) createXMLStreamReader___java_io_InputStream:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_reader: _op1.o];
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procNodeACX__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) close__];
    label12:;
    goto label3;
    label0:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"parseACX must only be called while lr compilation";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    } @catch (java_io_FileNotFoundException* _ex) {
        _stack[_sp++].o = _ex;
        goto label17;
    }
    } @catch (javax_xml_stream_XMLStreamException* _ex) {
        _stack[_sp++].o = _ex;
        goto label14;
    }
    label3:;
    goto label4;
    label17:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label13:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Cannot open '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label14:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((javax_xml_stream_XMLStreamException*) _stack[_sp].o) printStackTrace__];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: An error occured parsing '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label4:;
    [_pool release];
    return;
}


- (void) write___java_io_OutputStream :(java_io_OutputStream*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_letters];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression String_write___java_lang_String_java_io_OutputStream:_stack[_sp + 0].o:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) write___java_io_OutputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].l = (long) _op1.i;    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression multibyte_write___long_java_io_OutputStream:_stack[_sp + 0].l:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label10:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) numberOfTransitions__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [org_apertium_lttoolbox_Compression String_write___java_lang_String_java_io_OutputStream:_stack[_sp + 0].o:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) write___java_io_OutputStream_int:_stack[_sp + 1].o:_stack[_sp + 2].i];
    label9:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (int) allBlanks__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label6:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasText__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getText__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label10:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label12:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label5:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].i = 1;
    goto label4;
    label2:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    _locals[3].i += 1;
    goto label5;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    label7:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) insertEntryTokens___java_util_ArrayList :(java_util_ArrayList*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label33:;
    _op1.i = [org_apertium_lttoolbox_compile_Compile _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"insertEntryTokens( ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label41:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label2;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label2:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label45:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label49:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label11:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label55:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) isParadigm__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    goto label6;
    label4:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) isSingleTransduction__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_leftSide];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_rightSide];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 5;
    _op1.i = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) matchTransduction___java_util_ArrayList_java_util_ArrayList_int_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i:_stack[_sp + 4].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    goto label6;
    label7:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) isRegexp__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_RegexpCompiler alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_RegexpCompiler__];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label59:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) initialize___org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_regexp];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) compile___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) getTransducer__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label60:;
    goto label6;
    label9:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid entry token.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label6:;
    _locals[4].i += 1;
    goto label11;
    label3:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___java_lang_Integer:_stack[_sp + 1].o];
    label42:;
    goto label12;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label13;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label37:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label14;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label43:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label47:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label32:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label15;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label57:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) isParadigm__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label61:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_suffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label18;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_suffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label18:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_suffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_suffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_postsuffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label20;
    label19:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_suffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_postsuffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_postsuffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label21:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_postsuffix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label20;
    label17:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label23;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_prefix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label24;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_prefix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label24:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_prefix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label25;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_prefix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label20;
    label25:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_prefix_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_section];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label20;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label28;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label28:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label20:;
    goto label29;
    label16:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) isRegexp__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label30;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_RegexpCompiler alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_RegexpCompiler__];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label63:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) initialize___org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_regexp];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) compile___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setEpsilon_Tag___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_RegexpCompiler*) _stack[_sp].o) getTransducer__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertTransducer___java_lang_Integer_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label64:;
    goto label29;
    label30:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_leftSide];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_rightSide];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 5;
    _op1.i = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) matchTransduction___java_util_ArrayList_java_util_ArrayList_int_org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i:_stack[_sp + 4].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label29:;
    _locals[4].i += 1;
    goto label32;
    label15:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___int:_stack[_sp + 1].i];
    label12:;
    [_pool release];
    return;
}


- (int) matchTransduction___java_util_ArrayList_java_util_ArrayList_int_org_apertium_lttoolbox_compile_Transducer :(java_util_ArrayList*)n1 :(java_util_ArrayList*)n2 :(int)n3 :(org_apertium_lttoolbox_compile_Transducer*)n4
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[15];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].i = n3;
    _locals[4].o = n4;
    label30:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_direction];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label40:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label44:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label48:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label54:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _op1.i = [org_apertium_lttoolbox_compile_Compile _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"e = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label3:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label4;
    label1:;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label58:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label15:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label5;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label5;
    goto label4;
    label5:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label72:;
    _locals[6].i += 1;
    goto label9;
    label8:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label10;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label78:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label70:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _locals[5].i += 1;
    label79:;
    goto label9;
    label10:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label80:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label94:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label68:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _locals[5].i += 1;
    _locals[6].i += 1;
    label9:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label76:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label12;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_HashSet*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label96:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[14].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label97:;
    goto label14;
    label12:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label69:;
    goto label15;
    label4:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label42:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label46:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label50:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label52:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label16;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label16;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet*) _op1.o)  _GET_cast00];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertNewSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label18;
    label16:;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label56:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label29:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label19;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label19;
    goto label18;
    label19:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label22;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label74:;
    _locals[6].i += 1;
    goto label23;
    label22:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label24;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label86:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label66:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _locals[5].i += 1;
    label87:;
    goto label23;
    label24:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label82:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label90:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label64:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _locals[5].i += 1;
    _locals[6].i += 1;
    label23:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label84:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label26;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_HashSet*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label28:;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label98:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[14].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label99:;
    goto label28;
    label26:;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label65:;
    goto label29;
    label18:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    label31:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (org_apertium_lttoolbox_compile_EntryToken*) procRegexp__
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextCharacters__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___char_ARRAYTYPE_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_EntryToken alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_EntryToken__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setRegexp___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[4].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) procAlphabet__
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextCharacters__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___char_ARRAYTYPE_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_letters: _op1.o];
    label6:;
    goto label0;
    label1:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Missing alphabet symbols.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    [_pool release];
    return;
}


- (void) procEntry__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label32:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label34:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IGNORE_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label36:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label38:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IGNORE_YES_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_direction];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    label0:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    goto label0;
    label3:;
    [_pool release];
    return;
    label1:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label6;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Parse error.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) skipBlanks__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label42:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAIR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procTransduction__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label9;
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IDENTITY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procIdentity__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label9;
    label10:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_FLAG_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procFlag__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label9;
    label12:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_REGEXP_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procRegexp__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label9;
    label14:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procPar__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label44:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label46:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label48:;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label17;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Undefined paradigm '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label17:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    label22:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label20;
    label19:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label21;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label21:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    goto label22;
    label20:;
    [_pool release];
    return;
    label18:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label45:;
    goto label9;
    label16:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label24;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) insertEntryTokens___java_util_ArrayList:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    [_pool release];
    return;
    label24:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isWhiteSpace__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    goto label9;
    label26:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) allBlanks__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasText__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label9;
    goto label9;
    label28:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid inclusion of '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">' into '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label9:;
    goto label31;
}


- (void) procNode__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label32:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label34:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label36:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label1;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ENTRY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procEntry__];
    goto label4;
    label3:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 6;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label5;
    goto label4;
    label5:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    goto label4;
    label7:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 5;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    goto label4;
    label9:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PARDEF_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procParDef__];
    goto label4;
    label11:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_DICTIONARY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    goto label4;
    label13:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label15;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PARDEF_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label15;
    goto label4;
    label15:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ALPHABET_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procAlphabet__];
    goto label4;
    label18:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SDEFS_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    goto label4;
    label20:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SDEF_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procSDef__];
    goto label4;
    label22:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PARDEFS_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    goto label4;
    label24:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SECTION_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) procSection__];
    goto label4;
    label26:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 7;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label28;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getVersion__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_version: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getCharacterEncodingScheme__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_encoding: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStandalone__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Boolean valueOf___boolean:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_standalone: _op1.o];
    goto label4;
    label28:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label30;
    goto label4;
    label30:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [org_apertium_lttoolbox_compile_XMLPrint printEvent___javax_xml_stream_XMLStreamReader:_stack[_sp + 0].o];
    _stack[_sp++].o = [[[java_lang_IllegalStateException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"procNode(): don't know how to treat <";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"> ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_XMLPrint getEventTypeString___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_IllegalStateException*) _stack[_sp].o) __init_java_lang_IllegalStateException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label4:;
    [_pool release];
    return;
}


- (void) procNodeACX__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label19:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label21:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) hasName__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label0:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"char";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"value";
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_acx_current_char: _op1.i];
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"equiv-char";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_current_char];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_HashMap*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label5;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_current_char];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_map];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_acx_current_char];
    _stack[_sp++].i = _op2.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_HashMap*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"value";
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_HashSet*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label3;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 6;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    goto label3;
    label7:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    goto label3;
    label9:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 8;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    goto label3;
    label11:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 7;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label13;
    goto label3;
    label13:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label15;
    goto label3;
    label15:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 5;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    goto label3;
    label17:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error in ACX file (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): invalid node '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_XMLPrint getEventTypeString___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label3:;
    [_pool release];
    return;
}


- (void) procParDef__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_paradigm: _op1.o];
    _op1.i = [org_apertium_lttoolbox_compile_Compile _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"current_paradigm1 = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label1;
    label0:;
    _op1.i = [org_apertium_lttoolbox_compile_Compile _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"current_paradigm2 = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) minimize__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) joinFinals__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_paradigm: _op1.o];
    goto label1;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_current_paradigm];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label1:;
    [_pool release];
    return;
}


- (java_lang_String*) attrib___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getNamespaceURI__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getAttributeValue___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label0;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label0:;
    _stack[_sp++].o = _locals[2].o;
    label2:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) procSDef__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) includeSymbol___java_lang_String:_stack[_sp + 1].o];
    label0:;
    [_pool release];
    return;
}


- (void) procSection__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label4:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ID_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_TYPE_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_ID_ATTR];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SECTION_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireAttribute___java_lang_String_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_TYPE_ATTR];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_SECTION_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireAttribute___java_lang_String_java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_section: _op1.o];
    label7:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_current_section: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (org_apertium_lttoolbox_compile_EntryToken*) procIdentity__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label11:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    label0:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_IDENTITY_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    goto label4;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label6;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label6;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label6;
    label9:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected type of event.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label4:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_EntryToken alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_EntryToken__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setSingleTransduction___java_util_ArrayList_java_util_ArrayList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[3].o;
    label12:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_compile_EntryToken*) procFlag__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label11:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label13:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_FLAG_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label7:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected type of event.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_EntryToken alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_EntryToken__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_direction];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setSingleTransduction___java_util_ArrayList_java_util_ArrayList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label10;
    label9:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setSingleTransduction___java_util_ArrayList_java_util_ArrayList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label10:;
    _stack[_sp++].o = _locals[3].o;
    label12:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_compile_EntryToken*) procTransduction__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label18:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label20:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label22:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"";
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_LEFT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) skipUntil___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_LEFT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label7:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected type of event.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RIGHT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) skipUntil___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RIGHT_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    goto label11;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label13;
    label12:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) readString___java_util_List_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label13;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label13;
    label16:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected type of event.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_PAIR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) skipUntil___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_EntryToken alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_EntryToken__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label26:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setSingleTransduction___java_util_ArrayList_java_util_ArrayList:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[4].o;
    label19:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_compile_EntryToken*) procPar__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_paradigms];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Undefined paradigm '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_EntryToken alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_EntryToken__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_EntryToken*) _stack[_sp].o) setParadigm___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    label2:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) readString___java_util_List_java_lang_String :(java_util_List*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[7];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label26:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextStart__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label36:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextLength__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label38:;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getTextCharacters__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 4;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___char_ARRAYTYPE_int_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label40:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label2:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _locals[6].i += 1;
    goto label2;
    label1:;
    goto label3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_BLANK_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 32;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label3;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_JOIN_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 43;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label3;
    label7:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_POSTGENERATOR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 126;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label3;
    label9:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_GROUP_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label34:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label12;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 35;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label12:;
    goto label3;
    label11:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_S_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) requireEmptyError___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_N_ATTR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) attrib___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label32:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) isSymbolDefined___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label15;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Undefined symbol '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label15:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label33:;
    goto label3;
    label14:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid specification of element '<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">' in this context.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label17;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_BLANK_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    goto label3;
    label18:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_JOIN_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    goto label3;
    label20:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_POSTGENERATOR_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    goto label3;
    label22:;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_GROUP_ELEM];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    goto label3;
    label24:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected event type '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_XMLPrint getEventTypeString___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label17:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @",";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): unexpected event type '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_XMLPrint getEventTypeString___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label3:;
    [_pool release];
    return;
}


- (void) requireAttribute___java_lang_String_java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2 :(java_lang_String*)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"' must be specified non-void '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"' attribute";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    [_pool release];
    return;
}


- (void) requireEmptyError___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[0];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    [_pool release];
    return;
}


- (void) skipBlanks__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isStartElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isEndElement__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    label0:;
    [_pool release];
    return;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getEventType__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 5;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isCharacters__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) isWhiteSpace__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label5;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Invalid construction.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label8:;
    goto label3;
}


- (void) skipUntil___java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) skipBlanks__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocalName__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    [_pool release];
    return;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 3;
    _sp -= 2;
    [org_apertium_lttoolbox_compile_XMLPrint printNEvent___javax_xml_stream_XMLStreamReader_int:_stack[_sp + 0].o:_stack[_sp + 1].i];
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error (";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getLineNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @", ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_reader];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((javax_xml_stream_XMLStreamReader*) _stack[_sp].o) getLocation__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((javax_xml_stream_Location*) _stack[_sp].o) getColumnNumber__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"): Parse error.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    label2:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


+ (org_apertium_lttoolbox_compile_Compile*) DEBUG_read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label2:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Compile alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Compile__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_letters: _op1.o];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Alphabet read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Compile*) _op2.o) _PUT_alphabet: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_Transducer read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[2].i += -1;
    label9:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (int) DEBUG_compare___org_apertium_lttoolbox_compile_Compile :(org_apertium_lttoolbox_compile_Compile*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label11:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label15:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"comparing this:";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" with other";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) DEBUG_compare___org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two alphabets are the same : true";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two alphabets are the NOT same:";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) display__];
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) display__];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label17:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label19:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label21:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label2;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two instances of NewCompiler don't have the same number of sections";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) DEBUG_compare___org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label4;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the transducers from section '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"' are different";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    goto label5;
    label4:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"the transducers from section '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"' are the same";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label5:;
    goto label6;
    label3:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"sections de this :\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"\012sections de c :\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].i = 1;
    goto label10;
    label7:;
    _stack[_sp++].i = 0;
    label10:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


+ (void) main___java_lang_String_ARRAYTYPE :(XMLVMArray*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label2:;
    _stack[_sp++].o = [[[java_io_BufferedInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"xxx/c.bin";
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedInputStream*) _stack[_sp].o) __init_java_io_BufferedInputStream___java_io_InputStream:_stack[_sp + 1].o];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_Compile DEBUG_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = [[[java_io_BufferedInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"xxx/c2.bin";
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedInputStream*) _stack[_sp].o) __init_java_io_BufferedInputStream___java_io_InputStream:_stack[_sp + 1].o];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_Compile DEBUG_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) DEBUG_compare___org_apertium_lttoolbox_compile_Compile:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two instances of NewCompiler are the same : true";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label1;
    label0:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"the two instances of NewCompiler are the same : false";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label1:;
    [_pool release];
    return;
}


+ (void) __clinit_org_apertium_lttoolbox_compile_Compile
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[0];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _stack[_sp++].o = @"dictionary";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_DICTIONARY_ELEM: _op1.o];
    _stack[_sp++].o = @"alphabet";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_ALPHABET_ELEM: _op1.o];
    _stack[_sp++].o = @"sdefs";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_SDEFS_ELEM: _op1.o];
    _stack[_sp++].o = @"sdef";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_SDEF_ELEM: _op1.o];
    _stack[_sp++].o = @"n";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_N_ATTR: _op1.o];
    _stack[_sp++].o = @"pardefs";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_PARDEFS_ELEM: _op1.o];
    _stack[_sp++].o = @"pardef";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_PARDEF_ELEM: _op1.o];
    _stack[_sp++].o = @"par";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_PAR_ELEM: _op1.o];
    _stack[_sp++].o = @"e";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_ENTRY_ELEM: _op1.o];
    _stack[_sp++].o = @"r";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_RESTRICTION_ATTR: _op1.o];
    _stack[_sp++].o = @"LR";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_RESTRICTION_LR_VAL: _op1.o];
    _stack[_sp++].o = @"RL";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_RESTRICTION_RL_VAL: _op1.o];
    _stack[_sp++].o = @"p";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_PAIR_ELEM: _op1.o];
    _stack[_sp++].o = @"l";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_LEFT_ELEM: _op1.o];
    _stack[_sp++].o = @"r";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_RIGHT_ELEM: _op1.o];
    _stack[_sp++].o = @"s";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_S_ELEM: _op1.o];
    _stack[_sp++].o = @"re";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_REGEXP_ELEM: _op1.o];
    _stack[_sp++].o = @"section";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_SECTION_ELEM: _op1.o];
    _stack[_sp++].o = @"id";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_ID_ATTR: _op1.o];
    _stack[_sp++].o = @"type";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_TYPE_ATTR: _op1.o];
    _stack[_sp++].o = @"i";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_IDENTITY_ELEM: _op1.o];
    _stack[_sp++].o = @"f";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_FLAG_ELEM: _op1.o];
    _stack[_sp++].o = @"v";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_VALUE_ATTR: _op1.o];
    _stack[_sp++].o = @"j";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_JOIN_ELEM: _op1.o];
    _stack[_sp++].o = @"b";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_BLANK_ELEM: _op1.o];
    _stack[_sp++].o = @"a";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_POSTGENERATOR_ELEM: _op1.o];
    _stack[_sp++].o = @"g";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_GROUP_ELEM: _op1.o];
    _stack[_sp++].o = @"lm";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_LEMMA_ATTR: _op1.o];
    _stack[_sp++].o = @"i";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_IGNORE_ATTR: _op1.o];
    _stack[_sp++].o = @"yes";
    _op1.o = _stack[--_sp].o;
    [org_apertium_lttoolbox_compile_Compile _PUT_COMPILER_IGNORE_YES_VAL: _op1.o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_compile_Compile _PUT_DEBUG: _op1.i];
    [_pool release];
    return;
}



@end


  
      
int main(int argc, char* argv[])
{
    [org_apertium_lttoolbox_compile_Compile main___java_lang_String_ARRAYTYPE: nil];
	return 0;						 
}
  
  
