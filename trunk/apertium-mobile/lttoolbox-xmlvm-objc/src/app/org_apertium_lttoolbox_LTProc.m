#import "java_io_InputStream.h"
#import "java_util_Properties.h"
#import "java_io_BufferedWriter.h"
#import "java_io_FileReader.h"
#import "java_lang_StringBuilder.h"
#import "java_io_PrintStream.h"
#import "java_lang_System.h"
#import "java_io_BufferedInputStream.h"
#import "java_io_FileInputStream.h"
#import "java_io_FileOutputStream.h"
#import "org_apertium_lttoolbox_process_FSTProcessor_GenerationMode.h"
#import "java_io_Writer.h"
#import "java_lang_String.h"
#import "java_io_InputStreamReader.h"
#import "org_apertium_lttoolbox_process_FSTProcessor.h"
#import "org_apertium_lttoolbox_process_State.h"
#import "java_io_OutputStreamWriter.h"
#import "java_lang_RuntimeException.h"
#import "java_lang_Exception.h"
#import "java_io_File.h"
#import "java_io_OutputStream.h"
#import "org_apertium_lttoolbox_MyGetOpt.h"
#import "java_io_Reader.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_LTProc.h"

java_lang_String* _STATIC_org_apertium_lttoolbox_LTProc_PACKAGE_VERSION = @"0.1j";

@implementation org_apertium_lttoolbox_LTProc;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_LTProc") == 0) {
        _STATIC_org_apertium_lttoolbox_LTProc_PACKAGE_VERSION = (id) [NSNull null];
    }
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

+ (java_lang_String*) _GET_PACKAGE_VERSION
{
    return [[_STATIC_org_apertium_lttoolbox_LTProc_PACKAGE_VERSION retain] autorelease];
}

+ (void) _PUT_PACKAGE_VERSION: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_LTProc_PACKAGE_VERSION release];
    _STATIC_org_apertium_lttoolbox_LTProc_PACKAGE_VERSION = v;
}

- (void) __init_org_apertium_lttoolbox_LTProc__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


+ (void) endProgram___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label0:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @": process a stream with a letter transducer\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"USAGE: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" [-c] [-a\174-g\174-n\174-d\174-b\174-p\174-s\174-t] fst_file [input_file [output_file]]\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Options:\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -a:   morphological analysis (default behavior)\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -c:   use the literal case of the incoming characters\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -e:   morphological analysis, with compound analysis on unknown words\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -f:   match flags (experimental)\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -g:   morphological generation\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -n:   morph. generation without unknown word marks\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -d:   morph. generation with all the stuff\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -t:   morph. generation, but retaining part-of-speech\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -p:   post-generation\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -s:   SAO annotation system input processing\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -t:   apply transliteration dictionary\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -z:   flush output on the null character \012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -v:   version\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -D:   debug; print diagnostics to stderr\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"  -h:   show this help\012";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) print___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = -1;
    _sp -= 1;
    [java_lang_System exit___int:_stack[_sp + 0].i];
    label1:;
    [_pool release];
    return;
}


+ (void) checkValidity___org_apertium_lttoolbox_process_FSTProcessor :(org_apertium_lttoolbox_process_FSTProcessor*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) valid__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Validity test for FSTProcessor failed";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    [_pool release];
    return;
}


+ (void) main___java_lang_String_ARRAYTYPE :(XMLVMArray*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[11];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label109:;
    _stack[_sp++].o = @"file.encoding";
    _stack[_sp++].o = @"UTF-8";
    _sp -= 2;
    _op1.o = [java_lang_System setProperty___java_lang_String_java_lang_String:_stack[_sp + 0].o:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label111:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label113:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_FSTProcessor alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_FSTProcessor__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label115:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_MyGetOpt alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = @"Dacdefgndpstzvh";
    _sp -= 3;
    [((org_apertium_lttoolbox_MyGetOpt*) _stack[_sp].o) __init_org_apertium_lttoolbox_MyGetOpt___java_lang_String_ARRAYTYPE_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label117:;
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label119:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label66:;
    @try {
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_MyGetOpt*) _stack[_sp].o) getNextOption__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label125:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    } @catch (java_lang_Exception* _ex) {
        _stack[_sp++].o = _ex;
        goto label145;
    }
    goto label2;
    label1:;
    @try {
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch(_op1.i) {
    case 68: goto label3;
    case 69: goto label4;
    case 70: goto label4;
    case 71: goto label4;
    case 72: goto label4;
    case 73: goto label4;
    case 74: goto label4;
    case 75: goto label4;
    case 76: goto label4;
    case 77: goto label4;
    case 78: goto label4;
    case 79: goto label4;
    case 80: goto label4;
    case 81: goto label4;
    case 82: goto label4;
    case 83: goto label4;
    case 84: goto label4;
    case 85: goto label4;
    case 86: goto label4;
    case 87: goto label4;
    case 88: goto label4;
    case 89: goto label4;
    case 90: goto label4;
    case 91: goto label4;
    case 92: goto label4;
    case 93: goto label4;
    case 94: goto label4;
    case 95: goto label4;
    case 96: goto label4;
    case 97: goto label32;
    case 98: goto label32;
    case 99: goto label34;
    case 100: goto label32;
    case 101: goto label32;
    case 102: goto label37;
    case 103: goto label32;
    case 104: goto label4;
    case 105: goto label4;
    case 106: goto label4;
    case 107: goto label4;
    case 108: goto label4;
    case 109: goto label4;
    case 110: goto label32;
    case 111: goto label4;
    case 112: goto label32;
    case 113: goto label4;
    case 114: goto label4;
    case 115: goto label32;
    case 116: goto label32;
    case 117: goto label4;
    case 118: goto label53;
    case 119: goto label4;
    case 120: goto label4;
    case 121: goto label4;
    case 122: goto label57;
    default: goto label4;
    }
    label34:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setCaseSensitiveMode___boolean:_stack[_sp + 1].i];
    goto label59;
    label37:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setFlagMatchMode___boolean:_stack[_sp + 1].i];
    goto label59;
    label3:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_process_FSTProcessor _PUT_DEBUG: _op1.i];
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_process_State _PUT_DEBUG: _op1.i];
    goto label59;
    label32:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label62;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    goto label59;
    label62:;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    goto label59;
    label57:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setNullFlush___boolean:_stack[_sp + 1].i];
    goto label59;
    label53:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"org.apertium.lttoolbox.LTProc version 0.1j";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    } @catch (java_lang_Exception* _ex) {
        _stack[_sp++].o = _ex;
        goto label145;
    }
    [_pool release];
    return;
    label4:;
    @try {
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label59:;
    _locals[6].i += 1;
    } @catch (java_lang_Exception* _ex) {
        _stack[_sp++].o = _ex;
        goto label145;
    }
    label126:;
    goto label66;
    label145:;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label123:;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label124:;
    goto label66;
    label2:;
    _stack[_sp++].o = [[[java_io_OutputStreamWriter alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_OutputStreamWriter*) _stack[_sp].o) __init_java_io_OutputStreamWriter___java_io_OutputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label133:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 4;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label68;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc fopen___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label137:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label69;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label69:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc openReader___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label127:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label70;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label70:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc fout___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label71;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label71:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) load___java_io_InputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    [((java_io_InputStream*) _stack[_sp].o) close__];
    label138:;
    goto label72;
    label68:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label73;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc fopen___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label135:;
    _stack[_sp++].o = _locals[9].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label74;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label74:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc openReader___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label129:;
    _stack[_sp++].o = _locals[7].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label75;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label75:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) load___java_io_InputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    [((java_io_InputStream*) _stack[_sp].o) close__];
    label136:;
    goto label72;
    label73:;
    _stack[_sp++].o = [[[java_io_InputStreamReader alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = [java_lang_System _GET_in];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_InputStreamReader*) _stack[_sp].o) __init_java_io_InputStreamReader___java_io_InputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label131:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label77;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label139:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_LTProc fopen___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label143:;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label78;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label78:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) load___java_io_InputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[10].o;
    _sp -= 1;
    [((java_io_InputStream*) _stack[_sp].o) close__];
    label140:;
    goto label72;
    label77:;
    _stack[_sp++].o = @"LTProc";
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc endProgram___java_lang_String:_stack[_sp + 0].o];
    label72:;
    @try {
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch(_op1.i) {
    case 97: goto label80;
    case 98: goto label81;
    case 99: goto label80;
    case 100: goto label83;
    case 101: goto label84;
    case 102: goto label80;
    case 103: goto label86;
    case 104: goto label80;
    case 105: goto label80;
    case 106: goto label80;
    case 107: goto label80;
    case 108: goto label80;
    case 109: goto label80;
    case 110: goto label93;
    case 111: goto label80;
    case 112: goto label95;
    case 113: goto label80;
    case 114: goto label80;
    case 115: goto label98;
    case 116: goto label99;
    default: goto label80;
    }
    label93:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_clean];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label101;
    label86:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_unknown];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label101;
    label83:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_all];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label81:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_tagged];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label95:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initPostgeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) postgeneration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label101;
    label98:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initAnalysis__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) SAO___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label101;
    label99:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initPostgeneration__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) transliteration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label101;
    label84:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initDecomposition___boolean:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) analysis___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label101;
    label80:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initAnalysis__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [org_apertium_lttoolbox_LTProc checkValidity___org_apertium_lttoolbox_process_FSTProcessor:_stack[_sp + 0].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) analysis___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    } @catch (java_lang_Exception* _ex) {
        _stack[_sp++].o = _ex;
        goto label148;
    }
    label101:;
    goto label107;
    label148:;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label141:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    [((java_lang_Exception*) _stack[_sp].o) printStackTrace__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) getNullFlush__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label108;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label108:;
    _stack[_sp++].i = 1;
    _sp -= 1;
    [java_lang_System exit___int:_stack[_sp + 0].i];
    label107:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    [((java_io_Reader*) _stack[_sp].o) close__];
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    [((java_io_Writer*) _stack[_sp].o) close__];
    label110:;
    [_pool release];
    return;
}


+ (java_io_Writer*) fout___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[9];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label1:;
    _stack[_sp++].o = @"UTF-8";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _sp -= 0;
    _op1.o = [java_lang_System getProperties__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"file.encoding";
    _sp -= 2;
    _op1.i = [((java_util_Properties*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = @"file.encoding";
    _sp -= 1;
    _op1.o = [java_lang_System getProperty___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label0:;
    _stack[_sp++].o = [[[java_io_BufferedWriter alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_OutputStreamWriter alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileOutputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_File alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    [((java_io_File*) _stack[_sp].o) __init_java_io_File___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_FileOutputStream*) _stack[_sp].o) __init_java_io_FileOutputStream___java_io_File:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 3;
    [((java_io_OutputStreamWriter*) _stack[_sp].o) __init_java_io_OutputStreamWriter___java_io_OutputStream_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _sp -= 2;
    [((java_io_BufferedWriter*) _stack[_sp].o) __init_java_io_BufferedWriter___java_io_Writer:_stack[_sp + 1].o];
    label2:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


+ (java_io_InputStream*) fopen___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label1:;
    _stack[_sp++].o = @"UTF-8";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label3:;
    _sp -= 0;
    _op1.o = [java_lang_System getProperties__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"file.encoding";
    _sp -= 2;
    _op1.i = [((java_util_Properties*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = @"file.encoding";
    _sp -= 1;
    _op1.o = [java_lang_System getProperty___java_lang_String:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label0:;
    _stack[_sp++].o = [[[java_io_BufferedInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedInputStream*) _stack[_sp].o) __init_java_io_BufferedInputStream___java_io_InputStream:_stack[_sp + 1].o];
    label2:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


+ (java_io_Reader*) openReader___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label0:;
    _stack[_sp++].o = [[[java_io_FileReader alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 2;
    [((java_io_FileReader*) _stack[_sp].o) __init_java_io_FileReader___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end


  
      
int main(int argc, char* argv[])
{
    [org_apertium_lttoolbox_LTProc main___java_lang_String_ARRAYTYPE: nil];
	return 0;						 
}
  
  
