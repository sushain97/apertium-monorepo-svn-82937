#import "java_util_Vector.h"
#import "java_util_List.h"
#import "java_util_Collection.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_transfer_MatchNode.h"


@implementation org_apertium_lttoolbox_transfer_MatchNode;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_transfer_MatchNode") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_transfer_MatchNode_transitions = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_transfer_MatchNode_transitions release];
    [super dealloc];
}

- (java_util_List*) _GET_transitions
{
    return [[org_apertium_lttoolbox_transfer_MatchNode_transitions retain] autorelease];
}

- (void) _PUT_transitions: (java_util_List*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_MatchNode_transitions release];
    org_apertium_lttoolbox_transfer_MatchNode_transitions = v;
}

- (void) __init_org_apertium_lttoolbox_transfer_MatchNode__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_MatchNode*) _op2.o) _PUT_transitions: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_transfer_MatchNode___int :(int)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_MatchNode*) _op2.o) _PUT_transitions: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_transfer_MatchNode___org_apertium_lttoolbox_transfer_MatchNode :(org_apertium_lttoolbox_transfer_MatchNode*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_MatchNode*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector___java_util_Collection:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_MatchNode*) _op2.o) _PUT_transitions: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (void) addTransition___int_org_apertium_lttoolbox_transfer_MatchNode_int :(int)n1 :(org_apertium_lttoolbox_transfer_MatchNode*)n2 :(int)n3
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    _locals[3].i = n3;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_MatchNode*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((java_util_List*) _stack[_sp].o) add___int_java_lang_Object:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label1:;
    [_pool release];
    return;
}



@end

