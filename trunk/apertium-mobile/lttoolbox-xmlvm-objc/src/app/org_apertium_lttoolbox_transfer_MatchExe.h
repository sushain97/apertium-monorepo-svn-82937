#import "xmlvm.h"
#import "java_lang_Object.h"

// For circular include:
@class java_lang_Object;
@class java_util_Map;
@class java_util_List;
@class java_lang_Integer;
@class org_apertium_lttoolbox_compile_Transducer;
@class java_util_Iterator;
@class java_util_Vector;
@class org_apertium_lttoolbox_transfer_MatchExe;
@class org_apertium_lttoolbox_transfer_MatchNode;
@class java_util_Set;
@class java_util_Collection;

// Automatically generated by xmlvm2obj. Do not edit!


	
@interface org_apertium_lttoolbox_transfer_MatchExe : java_lang_Object
{
@private int org_apertium_lttoolbox_transfer_MatchExe_initial_id;
@private java_util_List* org_apertium_lttoolbox_transfer_MatchExe_node_list;
@private java_util_Map* org_apertium_lttoolbox_transfer_MatchExe_finals;

}
+ (void) initialize;
- (id) init;
- (int) _GET_initial_id;
- (void) _PUT_initial_id: (int) v;
- (java_util_List*) _GET_node_list;
- (void) _PUT_node_list: (java_util_List*) v;
- (java_util_Map*) _GET_finals;
- (void) _PUT_finals: (java_util_Map*) v;
- (void) __init_org_apertium_lttoolbox_transfer_MatchExe__;
- (void) __init_org_apertium_lttoolbox_transfer_MatchExe___org_apertium_lttoolbox_transfer_MatchExe :(org_apertium_lttoolbox_transfer_MatchExe*)n1;
- (void) __init_org_apertium_lttoolbox_transfer_MatchExe___org_apertium_lttoolbox_compile_Transducer_java_util_Map :(org_apertium_lttoolbox_compile_Transducer*)n1 :(java_util_Map*)n2;
- (void) copy___org_apertium_lttoolbox_transfer_MatchExe :(org_apertium_lttoolbox_transfer_MatchExe*)n1;
- (org_apertium_lttoolbox_transfer_MatchNode*) getInitial__;
- (java_util_Map*) getFinals__;

@end

