#import "java_io_InputStream.h"
#import "java_io_BufferedOutputStream.h"
#import "java_util_Map.h"
#import "java_lang_StringBuilder.h"
#import "org_apertium_lttoolbox_compile_Transducer.h"
#import "java_io_PrintStream.h"
#import "java_lang_System.h"
#import "java_util_HashMap.h"
#import "java_util_TreeSet.h"
#import "java_io_BufferedInputStream.h"
#import "java_util_Set.h"
#import "java_io_FileInputStream.h"
#import "java_io_FileOutputStream.h"
#import "java_lang_Integer.h"
#import "java_lang_String.h"
#import "java_util_TreeMap.h"
#import "org_apertium_lttoolbox_Compression.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "org_apertium_lttoolbox_compile_Compile.h"
#import "java_util_Iterator.h"
#import "java_io_OutputStream.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_compile_testTransducer.h"


@implementation org_apertium_lttoolbox_compile_testTransducer;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_compile_testTransducer") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

- (void) __init_org_apertium_lttoolbox_compile_testTransducer__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


+ (org_apertium_lttoolbox_compile_Transducer*) read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[10];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label8:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_Transducer*) _op2.o) _PUT_initial: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label12:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label14:;
    _stack[_sp++].o = [[[java_util_TreeSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeSet*) _stack[_sp].o) __init_java_util_TreeSet__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"finals_size : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _locals[2].i += -1;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_finals];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label18:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label7:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label22:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label24:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_util_TreeMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeMap*) _stack[_sp].o) __init_java_util_TreeMap__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label3:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label4;
    _locals[7].i += -1;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    
  _op2.i = _stack[--_sp].i; // Integer remainder of 
  _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i % _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label26:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label5;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_util_TreeSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeSet*) _stack[_sp].o) __init_java_util_TreeSet__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label5:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label27:;
    goto label3;
    label4:;
    _locals[5].i += -1;
    _locals[6].i += 1;
    label23:;
    goto label7;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    label9:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


+ (void) main___java_lang_String_ARRAYTYPE :(XMLVMArray*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[19];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = n1;
    label23:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Compile alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Compile__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label25:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Compile alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Compile__];
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label27:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"testdata/apertium-fr-es.fr.dix";
    _op1.o = [org_apertium_lttoolbox_compile_Compile _GET_COMPILER_RESTRICTION_LR_VAL];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) parse___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label33:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"considering transducer of section ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"number of states : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label39:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label41:;
    _stack[_sp++].f = 0.0;
    _op1.f = _stack[--_sp].f;
    _locals[7].f = _op1.f;
    label45:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label53:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1.f = _locals[7].f;
    _stack[_sp++].f = _op1.f;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].f = (float) _op1.i;    _op2.f = _stack[--_sp].f;
    _op1.f = _stack[--_sp].f;
    _stack[_sp++].f = _op1.f + _op2.f;    _op1.f = _stack[--_sp].f;
    _locals[7].f = _op1.f;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label2;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    goto label3;
    label2:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    label3:;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label54:;
    goto label4;
    label1:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"maximal number of transitions leaving a state ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"average number of transitions leaving a state ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.f = _locals[7].f;
    _stack[_sp++].f = _op1.f;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].f = (float) _op1.i;    _op2.f = _stack[--_sp].f;
  _op1.f = _stack[--_sp].f;
  _stack[_sp++].f = _op1.f / _op2.f;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___float:_stack[_sp + 1].f];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label34:;
    goto label5;
    label0:;
    _stack[_sp++].o = [[[java_io_BufferedOutputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileOutputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"testTransducer2.bin";
    _sp -= 2;
    [((java_io_FileOutputStream*) _stack[_sp].o) __init_java_io_FileOutputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedOutputStream*) _stack[_sp].o) __init_java_io_BufferedOutputStream___java_io_OutputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Compile*) _stack[_sp].o) write___java_io_OutputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((java_io_OutputStream*) _stack[_sp].o) close__];
    _stack[_sp++].o = [[[java_io_BufferedInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_io_FileInputStream alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"outc";
    _sp -= 2;
    [((java_io_FileInputStream*) _stack[_sp].o) __init_java_io_FileInputStream___java_lang_String:_stack[_sp + 1].o];
    _sp -= 2;
    [((java_io_BufferedInputStream*) _stack[_sp].o) __init_java_io_BufferedInputStream___java_io_InputStream:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label35:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label37:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label43:;
    _stack[_sp++].o = _locals[6].o;
    _sp--;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Alphabet read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = [[[java_util_HashMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashMap*) _stack[_sp].o) __init_java_util_HashMap__];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label47:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label10:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label6;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label57:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.i = [((java_util_Map*) _stack[_sp].o) containsKey___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label7;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_compile_Transducer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) __init_org_apertium_lttoolbox_compile_Transducer__];
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label7:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"reading : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_testTransducer read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[8].i += -1;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label8;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label8;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) DEBUG_compare___org_apertium_lttoolbox_compile_Transducer:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___boolean:_stack[_sp + 1].i];
    label8:;
    goto label10;
    label6:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    [((java_io_InputStream*) _stack[_sp].o) close__];
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label22:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label59:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label61:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label63:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label65:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label67:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[15].o = _op1.o;
    label16:;
    _stack[_sp++].o = _locals[15].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[15].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[16].o = _op1.o;
    label73:;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label13;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label13:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[17].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[17].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[17].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[18].o = _op1.o;
    label81:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Compile*) _op1.o)  _GET_sections];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[18].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label82:;
    goto label15;
    label14:;
    goto label16;
    label12:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[15].o = _op1.o;
    label21:;
    _stack[_sp++].o = _locals[15].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = _locals[15].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[16].o = _op1.o;
    label75:;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label18;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label18:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[17].o = _op1.o;
    label20:;
    _stack[_sp++].o = _locals[17].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].o = _locals[17].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[18].o = _op1.o;
    label83:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_Transducer*) _op1.o)  _GET_transitions];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[16].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[18].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label84:;
    goto label20;
    label19:;
    goto label21;
    label17:;
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"comparing transducers of section ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"original transducer has ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" transitions";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"original transducer higher state is ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"read transducer has ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" transitions";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_out];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"read transducer higher state is ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label60:;
    goto label22;
    label11:;
    [_pool release];
    return;
}



@end


  
      
int main(int argc, char* argv[])
{
    [org_apertium_lttoolbox_compile_testTransducer main___java_lang_String_ARRAYTYPE: nil];
	return 0;						 
}
  
  
