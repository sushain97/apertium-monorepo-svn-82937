#import "java_lang_RuntimeException.h"
#import "java_lang_StringBuilder.h"
#import "java_lang_String.h"
#import "java_lang_System.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_process_Buffer.h"


@implementation org_apertium_lttoolbox_process_Buffer;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_process_Buffer") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_process_Buffer_buf = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_process_Buffer_buf release];
    [super dealloc];
}

- (int) _GET_size
{
    return org_apertium_lttoolbox_process_Buffer_size;
}

- (void) _PUT_size: (int) v
{
    org_apertium_lttoolbox_process_Buffer_size = v;
}

- (XMLVMArray*) _GET_buf
{
    return [[org_apertium_lttoolbox_process_Buffer_buf retain] autorelease];
}

- (void) _PUT_buf: (XMLVMArray*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_Buffer_buf release];
    org_apertium_lttoolbox_process_Buffer_buf = v;
}

- (int) _GET_currentpos
{
    return org_apertium_lttoolbox_process_Buffer_currentpos;
}

- (void) _PUT_currentpos: (int) v
{
    org_apertium_lttoolbox_process_Buffer_currentpos = v;
}

- (int) _GET_lastpos
{
    return org_apertium_lttoolbox_process_Buffer_lastpos;
}

- (void) _PUT_lastpos: (int) v
{
    org_apertium_lttoolbox_process_Buffer_lastpos = v;
}

- (void) copy___org_apertium_lttoolbox_process_Buffer :(org_apertium_lttoolbox_process_Buffer*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_lastpos: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_size: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:2 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_buf: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _sp -= 5;
    [java_lang_System arraycopy___java_lang_Object_int_java_lang_Object_int_int:_stack[_sp + 0].o:_stack[_sp + 1].i:_stack[_sp + 2].o:_stack[_sp + 3].i:_stack[_sp + 4].i];
    label1:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Buffer___int :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error: Cannot create empty buffer.";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:2 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_buf: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_size: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_lastpos: _op1.i];
    label2:;
    [_pool release];
    return;
}


- (void) __init_org_apertium_lttoolbox_process_Buffer___org_apertium_lttoolbox_process_Buffer :(org_apertium_lttoolbox_process_Buffer*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_Buffer:_stack[_sp + 1].o];
    label1:;
    [_pool release];
    return;
}


- (void) add___char :(int)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_lastpos: _op1.i];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_lastpos: _op1.i];
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    label2:;
    [_pool release];
    return;
}


- (int) next__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op1 = _stack[--_sp];
    _op2 = _stack[--_sp];
    _stack[_sp++] = _op1;
    _stack[_sp++] = _op2;
    _stack[_sp++] = _op1;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) last__];
    _stack[_sp++].i = _op1.i;
    label3:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) last__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    label2:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) getPos__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) setPos___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (int) diffPrevPos___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    label2:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) diffPostPos___int :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label1:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label0;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    label2:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) isEmpty__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].i = 1;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) back___int :(int)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_size];
    _stack[_sp++].i = _op2.i;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_Buffer*) _op2.o) _PUT_currentpos: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (java_lang_String*) toString__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = [[[java_lang_String alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"content : ";
    _sp -= 2;
    [((java_lang_String*) _stack[_sp].o) __init_java_lang_String___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_buf];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _locals[2].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @", lastpos : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_lastpos];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @", currentpos : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_Buffer*) _op1.o)  _GET_currentpos];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    label3:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

