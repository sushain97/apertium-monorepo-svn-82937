#import "java_util_ArrayList.h"
#import "java_lang_StringBuilder.h"
#import "java_lang_String.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_compile_EntryToken.h"

int _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_paradigm;
int _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_single_transduction;
int _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_regexp;

@implementation org_apertium_lttoolbox_compile_EntryToken;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_compile_EntryToken") == 0) {
        [org_apertium_lttoolbox_compile_EntryToken __clinit_org_apertium_lttoolbox_compile_EntryToken];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_compile_EntryToken_paradigmName = (id) [NSNull null];
        org_apertium_lttoolbox_compile_EntryToken_leftSide = (id) [NSNull null];
        org_apertium_lttoolbox_compile_EntryToken_rightSide = (id) [NSNull null];
        org_apertium_lttoolbox_compile_EntryToken_regexp = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_compile_EntryToken_paradigmName release];
    [org_apertium_lttoolbox_compile_EntryToken_leftSide release];
    [org_apertium_lttoolbox_compile_EntryToken_rightSide release];
    [org_apertium_lttoolbox_compile_EntryToken_regexp release];
    [super dealloc];
}

+ (int) _GET_TYPE_paradigm
{
    return _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_paradigm;
}

+ (void) _PUT_TYPE_paradigm: (int) v
{
    _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_paradigm = v;
}

+ (int) _GET_TYPE_single_transduction
{
    return _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_single_transduction;
}

+ (void) _PUT_TYPE_single_transduction: (int) v
{
    _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_single_transduction = v;
}

+ (int) _GET_TYPE_regexp
{
    return _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_regexp;
}

+ (void) _PUT_TYPE_regexp: (int) v
{
    _STATIC_org_apertium_lttoolbox_compile_EntryToken_TYPE_regexp = v;
}

- (int) _GET_type
{
    return org_apertium_lttoolbox_compile_EntryToken_type;
}

- (void) _PUT_type: (int) v
{
    org_apertium_lttoolbox_compile_EntryToken_type = v;
}

- (java_lang_String*) _GET_paradigmName
{
    return [[org_apertium_lttoolbox_compile_EntryToken_paradigmName retain] autorelease];
}

- (void) _PUT_paradigmName: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_EntryToken_paradigmName release];
    org_apertium_lttoolbox_compile_EntryToken_paradigmName = v;
}

- (java_util_ArrayList*) _GET_leftSide
{
    return [[org_apertium_lttoolbox_compile_EntryToken_leftSide retain] autorelease];
}

- (void) _PUT_leftSide: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_EntryToken_leftSide release];
    org_apertium_lttoolbox_compile_EntryToken_leftSide = v;
}

- (java_util_ArrayList*) _GET_rightSide
{
    return [[org_apertium_lttoolbox_compile_EntryToken_rightSide retain] autorelease];
}

- (void) _PUT_rightSide: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_EntryToken_rightSide release];
    org_apertium_lttoolbox_compile_EntryToken_rightSide = v;
}

- (java_lang_String*) _GET_regexp
{
    return [[org_apertium_lttoolbox_compile_EntryToken_regexp retain] autorelease];
}

- (void) _PUT_regexp: (java_lang_String*) v
{
    [v retain];
    [org_apertium_lttoolbox_compile_EntryToken_regexp release];
    org_apertium_lttoolbox_compile_EntryToken_regexp = v;
}

- (void) __init_org_apertium_lttoolbox_compile_EntryToken__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


- (void) setParadigm___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_paradigmName: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_paradigm];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_type: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (void) setSingleTransduction___java_util_ArrayList_java_util_ArrayList :(java_util_ArrayList*)n1 :(java_util_ArrayList*)n2
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_leftSide: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_rightSide: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_single_transduction];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_type: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (void) setRegexp___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_regexp: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_regexp];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_compile_EntryToken*) _op2.o) _PUT_type: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (int) isParadigm__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_type];
    _stack[_sp++].i = _op2.i;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_paradigm];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].i = 1;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) isSingleTransduction__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_type];
    _stack[_sp++].i = _op2.i;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_single_transduction];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].i = 1;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) isRegexp__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_type];
    _stack[_sp++].i = _op2.i;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_regexp];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].i = 1;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (java_lang_String*) toString__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label4:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_type];
    _stack[_sp++].i = _op2.i;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_paradigm];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"paradigm name : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_paradigmName];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_type];
    _stack[_sp++].i = _op2.i;
    _op1.i = [org_apertium_lttoolbox_compile_EntryToken _GET_TYPE_regexp];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"regexp : ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_regexp];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    goto label1;
    label2:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"transduction : left ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_leftSide];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" right ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_compile_EntryToken*) _op1.o)  _GET_rightSide];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    label5:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


+ (void) __clinit_org_apertium_lttoolbox_compile_EntryToken
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[0];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_compile_EntryToken _PUT_TYPE_paradigm: _op1.i];
    _stack[_sp++].i = 2;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_compile_EntryToken _PUT_TYPE_single_transduction: _op1.i];
    _stack[_sp++].i = 3;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_compile_EntryToken _PUT_TYPE_regexp: _op1.i];
    [_pool release];
    return;
}



@end

