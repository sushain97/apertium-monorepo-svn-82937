#import "java_io_InputStream.h"
#import "java_util_Map.h"
#import "java_lang_StringBuilder.h"
#import "org_apertium_lttoolbox_compile_Transducer.h"
#import "java_util_Vector.h"
#import "org_apertium_lttoolbox_transfer_MatchExe.h"
#import "java_util_Set.h"
#import "org_apertium_lttoolbox_transfer_PatternStore.h"
#import "java_util_Collection.h"
#import "java_util_Map_Entry.h"
#import "java_util_List.h"
#import "java_lang_String.h"
#import "java_lang_Integer.h"
#import "java_lang_IllegalStateException.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "java_util_Iterator.h"
#import "java_lang_RuntimeException.h"
#import "java_io_OutputStream.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_transfer_PatternList.h"

java_lang_String* _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_CHAR;
java_lang_String* _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_TAG;
java_lang_String* _STATIC_org_apertium_lttoolbox_transfer_PatternList_QUEUE;

@implementation org_apertium_lttoolbox_transfer_PatternList;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_transfer_PatternList") == 0) {
        _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_CHAR = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_TAG = (id) [NSNull null];
        _STATIC_org_apertium_lttoolbox_transfer_PatternList_QUEUE = (id) [NSNull null];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_transfer_PatternList_alphabet = (id) [NSNull null];
        org_apertium_lttoolbox_transfer_PatternList_patterns = (id) [NSNull null];
        org_apertium_lttoolbox_transfer_PatternList_sequence_data = (id) [NSNull null];
        org_apertium_lttoolbox_transfer_PatternList_transducer = (id) [NSNull null];
        org_apertium_lttoolbox_transfer_PatternList_final_type = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_transfer_PatternList_alphabet release];
    [org_apertium_lttoolbox_transfer_PatternList_patterns release];
    [org_apertium_lttoolbox_transfer_PatternList_sequence_data release];
    [org_apertium_lttoolbox_transfer_PatternList_transducer release];
    [org_apertium_lttoolbox_transfer_PatternList_final_type release];
    [super dealloc];
}

- (org_apertium_lttoolbox_Alphabet*) _GET_alphabet
{
    return [[org_apertium_lttoolbox_transfer_PatternList_alphabet retain] autorelease];
}

- (void) _PUT_alphabet: (org_apertium_lttoolbox_Alphabet*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_PatternList_alphabet release];
    org_apertium_lttoolbox_transfer_PatternList_alphabet = v;
}

- (org_apertium_lttoolbox_transfer_PatternStore*) _GET_patterns
{
    return [[org_apertium_lttoolbox_transfer_PatternList_patterns retain] autorelease];
}

- (void) _PUT_patterns: (org_apertium_lttoolbox_transfer_PatternStore*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_PatternList_patterns release];
    org_apertium_lttoolbox_transfer_PatternList_patterns = v;
}

- (int) _GET_sequence
{
    return org_apertium_lttoolbox_transfer_PatternList_sequence;
}

- (void) _PUT_sequence: (int) v
{
    org_apertium_lttoolbox_transfer_PatternList_sequence = v;
}

- (java_util_List*) _GET_sequence_data
{
    return [[org_apertium_lttoolbox_transfer_PatternList_sequence_data retain] autorelease];
}

- (void) _PUT_sequence_data: (java_util_List*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_PatternList_sequence_data release];
    org_apertium_lttoolbox_transfer_PatternList_sequence_data = v;
}

- (org_apertium_lttoolbox_compile_Transducer*) _GET_transducer
{
    return [[org_apertium_lttoolbox_transfer_PatternList_transducer retain] autorelease];
}

- (void) _PUT_transducer: (org_apertium_lttoolbox_compile_Transducer*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_PatternList_transducer release];
    org_apertium_lttoolbox_transfer_PatternList_transducer = v;
}

- (java_util_Map*) _GET_final_type
{
    return [[org_apertium_lttoolbox_transfer_PatternList_final_type retain] autorelease];
}

- (void) _PUT_final_type: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_transfer_PatternList_final_type release];
    org_apertium_lttoolbox_transfer_PatternList_final_type = v;
}

- (int) _GET_sequence_id
{
    return org_apertium_lttoolbox_transfer_PatternList_sequence_id;
}

- (void) _PUT_sequence_id: (int) v
{
    org_apertium_lttoolbox_transfer_PatternList_sequence_id = v;
}

+ (java_lang_String*) _GET_ANY_CHAR
{
    return [[_STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_CHAR retain] autorelease];
}

+ (void) _PUT_ANY_CHAR: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_CHAR release];
    _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_CHAR = v;
}

+ (java_lang_String*) _GET_ANY_TAG
{
    return [[_STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_TAG retain] autorelease];
}

+ (void) _PUT_ANY_TAG: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_TAG release];
    _STATIC_org_apertium_lttoolbox_transfer_PatternList_ANY_TAG = v;
}

+ (java_lang_String*) _GET_QUEUE
{
    return [[_STATIC_org_apertium_lttoolbox_transfer_PatternList_QUEUE retain] autorelease];
}

+ (void) _PUT_QUEUE: (java_lang_String*) v
{
    [v retain];
    [_STATIC_org_apertium_lttoolbox_transfer_PatternList_QUEUE release];
    _STATIC_org_apertium_lttoolbox_transfer_PatternList_QUEUE = v;
}

- (void) __init_org_apertium_lttoolbox_transfer_PatternList__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    label1:;
    [_pool release];
    return;
}


- (void) beginSequence__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error: opening an unended sequence";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_List*) _stack[_sp].o) clear__];
    label2:;
    [_pool release];
    return;
}


- (void) endSequence__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error: ending an unopened sequence";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_List*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_QUEUE];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_patterns];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_id];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_transfer_PatternStore*) _stack[_sp].o) put___int_java_util_List:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label8:;
    goto label2;
    label1:;
    [_pool release];
    return;
}


- (void) insertOutOfSequence___java_lang_String_java_lang_String_java_util_List :(java_lang_String*)n1 :(java_lang_String*)n2 :(java_util_List*)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[7];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label12:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_CHAR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label1;
    label0:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label20:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label5:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_CHAR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label4;
    label3:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label4:;
    _locals[4].i += 1;
    goto label5;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_TAG];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label7;
    label6:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label22:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) tagCount___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label11:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label7;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) tagAt___java_lang_String_int:_stack[_sp + 1].o:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @">";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label28:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = @"<*>";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_TAG];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label10;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) includeSymbol___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label10:;
    _locals[4].i += 1;
    goto label11;
    label7:;
    [_pool release];
    return;
}


- (void) insertIntoSequence___int_java_lang_String_java_lang_String :(int)n1 :(java_lang_String*)n2 :(java_lang_String*)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[6];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence_id: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) insertOutOfSequence___java_lang_String_java_lang_String_java_util_List:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label15:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_List*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label16:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 43;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) insertOutOfSequence___java_lang_String_java_lang_String_java_util_List:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label17:;
    goto label3;
    label1:;
    [_pool release];
    return;
}


- (void) insert___int_java_lang_String_java_lang_String :(int)n1 :(java_lang_String*)n2 :(java_lang_String*)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) insertOutOfSequence___java_lang_String_java_lang_String_java_util_List:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_QUEUE];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_patterns];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_transfer_PatternStore*) _stack[_sp].o) put___int_java_util_List:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label11:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_transfer_PatternList*) _stack[_sp].o) insertIntoSequence___int_java_lang_String_java_lang_String:_stack[_sp + 1].i:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label1:;
    [_pool release];
    return;
}


- (void) insert___int_int :(int)n1 :(int)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].i = n2;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error: using labels outside of a sequence";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence_id: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_patterns];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_transfer_PatternStore*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((java_util_Collection*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label24:;
    goto label3;
    label2:;
    goto label4;
    label1:;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_List*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label8:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_patterns];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_transfer_PatternStore*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Collection*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label29:;
    _stack[_sp++].o = [[[java_util_Vector alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    [((java_util_Vector*) _stack[_sp].o) __init_java_util_Vector___java_util_Collection:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 43;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.i = [((java_util_List*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label30:;
    goto label7;
    label6:;
    goto label8;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence_data: _op1.o];
    label4:;
    [_pool release];
    return;
}


- (int) tagCount___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label5:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label9:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label11:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label4:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _locals[2].i += 1;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 46;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _locals[2].i += 1;
    label2:;
    _locals[3].i += 1;
    goto label4;
    label0:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    label6:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (java_lang_String*) tagAt___java_lang_String_int :(java_lang_String*)n1 :(int)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    label8:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label14:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label16:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label18:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label20:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label5:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 46;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _locals[5].i += 1;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label2;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label3;
    label2:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label3:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label1:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label4:;
    _locals[6].i += 1;
    goto label5;
    label0:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label6;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label6:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label9:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_transfer_PatternStore*) getPatterns__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_patterns];
    _stack[_sp++].o = _op2.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) buildTransducer__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label16:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[1].i = _op1.i;
    label15:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_sequence_data];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label20:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label22:;
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label24:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label26:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_List*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label11:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_List*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label30:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_CHAR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_TAG];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label5;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_QUEUE];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label6;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label7;
    goto label5;
    label7:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 95;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 32;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 35;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.o = [org_apertium_lttoolbox_transfer_PatternList _GET_ANY_CHAR];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label5;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) insertSingleTransduction___java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) linkStates___java_lang_Integer_java_lang_Integer_java_lang_Integer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label5:;
    _locals[5].i += 1;
    goto label11;
    label1:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label12;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) isFinal___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label13;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label13:;
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label12:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) isFinal___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label14;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) setFinal___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label14:;
    _locals[1].i += 1;
    goto label15;
    label0:;
    [_pool release];
    return;
}


- (void) write___java_io_OutputStream :(java_io_OutputStream*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) write___java_io_OutputStream:_stack[_sp + 1].o];
    _stack[_sp++].o = @"tagger";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label0;
    _stack[_sp++].o = [[[java_lang_IllegalStateException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"code commented out below";
    _sp -= 2;
    [((java_lang_IllegalStateException*) _stack[_sp].o) __init_java_lang_IllegalStateException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_compile_Transducer*) _stack[_sp].o) write___java_io_OutputStream_int:_stack[_sp + 1].o:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) entrySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label11:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Map_Entry*) _stack[_sp].o) getKey__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_Map_Entry*) _stack[_sp].o) getValue__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_OutputStream*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label12:;
    goto label2;
    label1:;
    [_pool release];
    return;
}


- (void) read___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_transfer_PatternList*) _op2.o) _PUT_sequence: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_Map*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Alphabet read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_compile_Transducer read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_InputStream*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label12:;
    _locals[3].i += -1;
    goto label2;
    label0:;
    [_pool release];
    return;
}


- (org_apertium_lttoolbox_transfer_MatchExe*) newMatchExe__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_transfer_MatchExe alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_transducer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_final_type];
    _stack[_sp++].o = _op2.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_transfer_MatchExe*) _stack[_sp].o) __init_org_apertium_lttoolbox_transfer_MatchExe___org_apertium_lttoolbox_compile_Transducer_java_util_Map:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_Alphabet*) getAlphabet__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_transfer_PatternList*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

