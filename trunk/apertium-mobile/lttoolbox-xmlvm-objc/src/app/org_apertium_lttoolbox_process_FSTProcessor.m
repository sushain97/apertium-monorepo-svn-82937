#import "java_io_InputStream.h"
#import "java_util_ArrayDeque.h"
#import "java_util_Map.h"
#import "org_apertium_lttoolbox_Pair.h"
#import "java_lang_StringBuilder.h"
#import "java_io_PrintStream.h"
#import "org_apertium_lttoolbox_process_SetOfCharacters.h"
#import "java_lang_System.h"
#import "java_io_IOException.h"
#import "org_apertium_lttoolbox_process_TNodeState.h"
#import "java_lang_CharSequence.h"
#import "java_lang_Throwable.h"
#import "java_lang_Character.h"
#import "java_lang_Class.h"
#import "java_util_Set.h"
#import "java_util_Collection.h"
#import "java_util_ArrayList.h"
#import "org_apertium_lttoolbox_process_TransExe.h"
#import "org_apertium_lttoolbox_process_FSTProcessor_GenerationMode.h"
#import "java_util_List.h"
#import "java_io_Writer.h"
#import "java_lang_Integer.h"
#import "java_util_TreeMap.h"
#import "java_lang_String.h"
#import "org_apertium_lttoolbox_Compression.h"
#import "org_apertium_lttoolbox_process_State.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "org_apertium_lttoolbox_process_Node.h"
#import "java_util_Iterator.h"
#import "java_util_HashSet.h"
#import "java_lang_RuntimeException.h"
#import "java_util_Arrays.h"
#import "org_apertium_lttoolbox_process_Buffer.h"
#import "java_io_Reader.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_process_FSTProcessor.h"

int _STATIC_org_apertium_lttoolbox_process_FSTProcessor_EOF = 65535;
int _STATIC_org_apertium_lttoolbox_process_FSTProcessor_DEBUG;

@implementation org_apertium_lttoolbox_process_FSTProcessor;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_process_FSTProcessor") == 0) {
        [org_apertium_lttoolbox_process_FSTProcessor __clinit_org_apertium_lttoolbox_process_FSTProcessor];
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_process_FSTProcessor_transducers = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_initial_state = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_initial_compounding_state = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_inconditional = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_standard = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_postblank = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_preblank = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_compounding_finals = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_all_finals = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_blankqueue = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_alphabetic_chars = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_escaped_chars = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_alphabet = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_input_buffer = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_tmNumbers = (id) [NSNull null];
        org_apertium_lttoolbox_process_FSTProcessor_flagMatch_symbolToVarVal = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_process_FSTProcessor_transducers release];
    [org_apertium_lttoolbox_process_FSTProcessor_initial_state release];
    [org_apertium_lttoolbox_process_FSTProcessor_initial_compounding_state release];
    [org_apertium_lttoolbox_process_FSTProcessor_inconditional release];
    [org_apertium_lttoolbox_process_FSTProcessor_standard release];
    [org_apertium_lttoolbox_process_FSTProcessor_postblank release];
    [org_apertium_lttoolbox_process_FSTProcessor_preblank release];
    [org_apertium_lttoolbox_process_FSTProcessor_compounding_finals release];
    [org_apertium_lttoolbox_process_FSTProcessor_all_finals release];
    [org_apertium_lttoolbox_process_FSTProcessor_blankqueue release];
    [org_apertium_lttoolbox_process_FSTProcessor_alphabetic_chars release];
    [org_apertium_lttoolbox_process_FSTProcessor_escaped_chars release];
    [org_apertium_lttoolbox_process_FSTProcessor_alphabet release];
    [org_apertium_lttoolbox_process_FSTProcessor_input_buffer release];
    [org_apertium_lttoolbox_process_FSTProcessor_tmNumbers release];
    [org_apertium_lttoolbox_process_FSTProcessor_flagMatch_symbolToVarVal release];
    [super dealloc];
}

- (int) _GET_isLastBlankTM
{
    return org_apertium_lttoolbox_process_FSTProcessor_isLastBlankTM;
}

- (void) _PUT_isLastBlankTM: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_isLastBlankTM = v;
}

- (java_util_Map*) _GET_transducers
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_transducers retain] autorelease];
}

- (void) _PUT_transducers: (java_util_Map*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_transducers release];
    org_apertium_lttoolbox_process_FSTProcessor_transducers = v;
}

- (org_apertium_lttoolbox_process_State*) _GET_initial_state
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_initial_state retain] autorelease];
}

- (void) _PUT_initial_state: (org_apertium_lttoolbox_process_State*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_initial_state release];
    org_apertium_lttoolbox_process_FSTProcessor_initial_state = v;
}

- (org_apertium_lttoolbox_process_State*) _GET_initial_compounding_state
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_initial_compounding_state retain] autorelease];
}

- (void) _PUT_initial_compounding_state: (org_apertium_lttoolbox_process_State*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_initial_compounding_state release];
    org_apertium_lttoolbox_process_FSTProcessor_initial_compounding_state = v;
}

- (java_util_Set*) _GET_inconditional
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_inconditional retain] autorelease];
}

- (void) _PUT_inconditional: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_inconditional release];
    org_apertium_lttoolbox_process_FSTProcessor_inconditional = v;
}

- (java_util_Set*) _GET_standard
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_standard retain] autorelease];
}

- (void) _PUT_standard: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_standard release];
    org_apertium_lttoolbox_process_FSTProcessor_standard = v;
}

- (java_util_Set*) _GET_postblank
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_postblank retain] autorelease];
}

- (void) _PUT_postblank: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_postblank release];
    org_apertium_lttoolbox_process_FSTProcessor_postblank = v;
}

- (java_util_Set*) _GET_preblank
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_preblank retain] autorelease];
}

- (void) _PUT_preblank: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_preblank release];
    org_apertium_lttoolbox_process_FSTProcessor_preblank = v;
}

- (java_util_Set*) _GET_compounding_finals
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_compounding_finals retain] autorelease];
}

- (void) _PUT_compounding_finals: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_compounding_finals release];
    org_apertium_lttoolbox_process_FSTProcessor_compounding_finals = v;
}

- (java_util_Set*) _GET_all_finals
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_all_finals retain] autorelease];
}

- (void) _PUT_all_finals: (java_util_Set*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_all_finals release];
    org_apertium_lttoolbox_process_FSTProcessor_all_finals = v;
}

- (java_util_ArrayDeque*) _GET_blankqueue
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_blankqueue retain] autorelease];
}

- (void) _PUT_blankqueue: (java_util_ArrayDeque*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_blankqueue release];
    org_apertium_lttoolbox_process_FSTProcessor_blankqueue = v;
}

- (org_apertium_lttoolbox_process_SetOfCharacters*) _GET_alphabetic_chars
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_alphabetic_chars retain] autorelease];
}

- (void) _PUT_alphabetic_chars: (org_apertium_lttoolbox_process_SetOfCharacters*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_alphabetic_chars release];
    org_apertium_lttoolbox_process_FSTProcessor_alphabetic_chars = v;
}

- (org_apertium_lttoolbox_process_SetOfCharacters*) _GET_escaped_chars
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_escaped_chars retain] autorelease];
}

- (void) _PUT_escaped_chars: (org_apertium_lttoolbox_process_SetOfCharacters*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_escaped_chars release];
    org_apertium_lttoolbox_process_FSTProcessor_escaped_chars = v;
}

- (org_apertium_lttoolbox_Alphabet*) _GET_alphabet
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_alphabet retain] autorelease];
}

- (void) _PUT_alphabet: (org_apertium_lttoolbox_Alphabet*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_alphabet release];
    org_apertium_lttoolbox_process_FSTProcessor_alphabet = v;
}

- (org_apertium_lttoolbox_process_Buffer*) _GET_input_buffer
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_input_buffer retain] autorelease];
}

- (void) _PUT_input_buffer: (org_apertium_lttoolbox_process_Buffer*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_input_buffer release];
    org_apertium_lttoolbox_process_FSTProcessor_input_buffer = v;
}

- (int) _GET_outOfWord
{
    return org_apertium_lttoolbox_process_FSTProcessor_outOfWord;
}

- (void) _PUT_outOfWord: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_outOfWord = v;
}

- (int) _GET_caseSensitive
{
    return org_apertium_lttoolbox_process_FSTProcessor_caseSensitive;
}

- (void) _PUT_caseSensitive: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_caseSensitive = v;
}

- (int) _GET_nullFlush
{
    return org_apertium_lttoolbox_process_FSTProcessor_nullFlush;
}

- (void) _PUT_nullFlush: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_nullFlush = v;
}

- (java_util_ArrayList*) _GET_tmNumbers
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_tmNumbers retain] autorelease];
}

- (void) _PUT_tmNumbers: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_tmNumbers release];
    org_apertium_lttoolbox_process_FSTProcessor_tmNumbers = v;
}

+ (int) _GET_EOF
{
    return _STATIC_org_apertium_lttoolbox_process_FSTProcessor_EOF;
}

+ (void) _PUT_EOF: (int) v
{
    _STATIC_org_apertium_lttoolbox_process_FSTProcessor_EOF = v;
}

- (int) _GET_do_decomposition
{
    return org_apertium_lttoolbox_process_FSTProcessor_do_decomposition;
}

- (void) _PUT_do_decomposition: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_do_decomposition = v;
}

- (int) _GET_compoundOnlyLSymbol
{
    return org_apertium_lttoolbox_process_FSTProcessor_compoundOnlyLSymbol;
}

- (void) _PUT_compoundOnlyLSymbol: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_compoundOnlyLSymbol = v;
}

- (int) _GET_compoundRSymbol
{
    return org_apertium_lttoolbox_process_FSTProcessor_compoundRSymbol;
}

- (void) _PUT_compoundRSymbol: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_compoundRSymbol = v;
}

- (int) _GET_do_flagMatch
{
    return org_apertium_lttoolbox_process_FSTProcessor_do_flagMatch;
}

- (void) _PUT_do_flagMatch: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_do_flagMatch = v;
}

- (XMLVMArray*) _GET_flagMatch_symbolToVarVal
{
    return [[org_apertium_lttoolbox_process_FSTProcessor_flagMatch_symbolToVarVal retain] autorelease];
}

- (void) _PUT_flagMatch_symbolToVarVal: (XMLVMArray*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_FSTProcessor_flagMatch_symbolToVarVal release];
    org_apertium_lttoolbox_process_FSTProcessor_flagMatch_symbolToVarVal = v;
}

- (int) _GET_flagMatch_no_of_flags
{
    return org_apertium_lttoolbox_process_FSTProcessor_flagMatch_no_of_flags;
}

- (void) _PUT_flagMatch_no_of_flags: (int) v
{
    org_apertium_lttoolbox_process_FSTProcessor_flagMatch_no_of_flags = v;
}

+ (int) _GET_DEBUG
{
    return _STATIC_org_apertium_lttoolbox_process_FSTProcessor_DEBUG;
}

+ (void) _PUT_DEBUG: (int) v
{
    _STATIC_org_apertium_lttoolbox_process_FSTProcessor_DEBUG = v;
}

- (void) __init_org_apertium_lttoolbox_process_FSTProcessor__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_TreeMap alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_TreeMap*) _stack[_sp].o) __init_java_util_TreeMap__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_transducers: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_State alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_State__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_initial_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_State alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_State__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_initial_compounding_state: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_inconditional: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_standard: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_postblank: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_preblank: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compounding_finals: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayDeque alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayDeque*) _stack[_sp].o) __init_java_util_ArrayDeque__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_blankqueue: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_SetOfCharacters alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_SetOfCharacters__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_escaped_chars: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Alphabet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) __init_org_apertium_lttoolbox_Alphabet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_alphabet: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_Buffer alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].i = 2048;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_Buffer___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_input_buffer: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_caseSensitive: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_nullFlush: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_do_decomposition: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compoundOnlyLSymbol: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compoundRSymbol: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_do_flagMatch: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = -1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_flagMatch_no_of_flags: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 91;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 93;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 123;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 125;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 94;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 64;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 60;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 62;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (void) streamError__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"Error: Malformed input stream.";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


- (void) streamError___char :(int)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Illegal input stream char: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
}


- (int) readEscaped___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError__];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError__];
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    label3:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (java_lang_String*) readFullBlock___java_io_Reader_char_char :(java_io_Reader*)n1 :(int)n2 :(int)n3
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[6];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    _locals[3].i = n3;
    label6:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label14:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label3:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    goto label0;
    label1:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readEscaped___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label3;
    label0:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label5:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label7:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (int) readAnalysis___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label12:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch (_op1.i) {
        case 60: goto label3;
        case 91: goto label4;
        case 92: goto label5;
        default: goto label6;
    }
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 60;
    _stack[_sp++].i = 62;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 91;
    _stack[_sp++].i = 93;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_util_ArrayDeque*) _stack[_sp].o) addLast___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].i = 32;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label5:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    label9:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) readTMAnalysis___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label53:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_isLastBlankTM: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label57:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label59:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswdigit___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    label2:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch(_op1.i) {
    case 48: goto label4;
    case 49: goto label4;
    case 50: goto label4;
    case 51: goto label4;
    case 52: goto label4;
    case 53: goto label4;
    case 54: goto label4;
    case 55: goto label4;
    case 56: goto label4;
    case 57: goto label4;
    case 58: goto label14;
    case 59: goto label14;
    case 60: goto label16;
    case 61: goto label14;
    case 62: goto label14;
    case 63: goto label14;
    case 64: goto label14;
    case 65: goto label14;
    case 66: goto label14;
    case 67: goto label14;
    case 68: goto label14;
    case 69: goto label14;
    case 70: goto label14;
    case 71: goto label14;
    case 72: goto label14;
    case 73: goto label14;
    case 74: goto label14;
    case 75: goto label14;
    case 76: goto label14;
    case 77: goto label14;
    case 78: goto label14;
    case 79: goto label14;
    case 80: goto label14;
    case 81: goto label14;
    case 82: goto label14;
    case 83: goto label14;
    case 84: goto label14;
    case 85: goto label14;
    case 86: goto label14;
    case 87: goto label14;
    case 88: goto label14;
    case 89: goto label14;
    case 90: goto label14;
    case 91: goto label47;
    case 92: goto label48;
    default: goto label14;
    }
    label16:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 60;
    _stack[_sp++].i = 62;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label47:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 91;
    _stack[_sp++].i = 93;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_util_ArrayDeque*) _stack[_sp].o) addLast___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_isLastBlankTM: _op1.i];
    _stack[_sp++].i = 32;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label48:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label50;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label50:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label4:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label61:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) markSupported__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label51;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"The inpput stream doesn't support marks.There will be a problem to find an equivalent to the ungetwc function";
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label51:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 3;
    _sp -= 2;
    [((java_io_Reader*) _stack[_sp].o) mark___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswdigit___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label51;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    [((java_io_Reader*) _stack[_sp].o) reset__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"<n>";
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    label54:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) readPostgeneration___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label11:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label13:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch (_op1.i) {
        case 60: goto label2;
        case 91: goto label3;
        case 92: goto label4;
        default: goto label5;
    }
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 60;
    _stack[_sp++].i = 62;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 91;
    _stack[_sp++].i = 93;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_util_ArrayDeque*) _stack[_sp].o) addLast___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].i = 32;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label4:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label6;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    label8:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) skipUntil___java_io_Reader_java_io_Writer_char :(java_io_Reader*)n1 :(java_io_Writer*)n2 :(int)n3
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].i = n3;
    label5:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label14:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    [_pool release];
    return;
    label0:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    [_pool release];
    return;
    label2:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label3;
    label1:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    [_pool release];
    return;
    label4:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label3:;
    goto label5;
}


- (int) readGeneration___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label16:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label22:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label0;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_outOfWord];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 94;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label2:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label5;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label5:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 94;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) skipUntil___java_io_Reader_java_io_Writer_char:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label4:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 94;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) skipUntil___java_io_Reader_java_io_Writer_char:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].i = 2147483647;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_outOfWord: _op1.i];
    label1:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label8;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label8:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 36;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_outOfWord: _op1.i];
    _stack[_sp++].i = 36;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label9:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label10;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label24:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label11:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 62;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label12;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    goto label11;
    label12:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label10:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label15;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 91;
    _stack[_sp++].i = 93;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readGeneration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label15:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    label17:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) flushBlanks___java_io_Writer :(java_io_Writer*)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) getFirst__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) removeFirst__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[2].i += -1;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) calc_initial_state__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label4:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_Node alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_Node__];
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Map*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) initTransitions___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label2:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label10:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = @"@compound";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) contains___java_lang_CharSequence:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getInitial__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) addTransition___int_int_org_apertium_lttoolbox_process_Node:_stack[_sp + 1].i:_stack[_sp + 2].i:_stack[_sp + 3].o];
    label11:;
    goto label2;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) init___org_apertium_lttoolbox_process_Node:_stack[_sp + 1].o];
    label5:;
    [_pool release];
    return;
}


- (int) endsWith___java_lang_String_java_lang_String :(java_lang_String*)n1 :(java_lang_String*)n2
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) endsWith___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) classifyFinals__
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label13:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label18:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label20:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@inconditional";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_inconditional];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@standard";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_standard];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@postblank";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_postblank];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@preblank";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_preblank];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@compound-L";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"@compound-R";
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) endsWith___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    goto label2;
    label11:;
    _stack[_sp++].o = [[[java_lang_RuntimeException alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Error: Unsupported transducer type for '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'.";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_RuntimeException*) _stack[_sp].o) __init_java_lang_RuntimeException___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    @throw _op1.o;
    label2:;
    goto label13;
    label0:;
    [_pool release];
    return;
}


- (void) writeEscaped___java_lang_String_java_io_Writer :(java_lang_String*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[6];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label3:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label9:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label2:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label14:;
    _locals[3].i += 1;
    goto label2;
    label0:;
    [_pool release];
    return;
}


- (void) printWord___java_lang_String_java_lang_String_java_io_Writer :(java_lang_String*)n1 :(java_lang_String*)n2 :(java_io_Writer*)n3
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label0:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 94;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (void) printUnknownWord___java_lang_String_java_io_Writer :(java_lang_String*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label0:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 94;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 42;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (int) lastBlank___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label2:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabetic_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _locals[2].i += -1;
    goto label2;
    label0:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) printSpace___char_java_io_Writer :(int)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    _locals[2].o = n2;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label1:;
    [_pool release];
    return;
}


- (int) isEscaped___char :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) isAlphabetic___char :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabetic_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) load___java_io_InputStream :(java_io_InputStream*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_SetOfCharacters alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_SetOfCharacters__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_alphabetic_chars: _op1.o];
    label1:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabetic_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _locals[2].i += -1;
    label14:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Alphabet read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_alphabet: _op1.o];
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"alphabet = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label6:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [org_apertium_lttoolbox_Compression String_read___java_io_InputStream:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[4].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label4;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_TransExe alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_TransExe__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 3;
    _op1.o = [((java_util_Map*) _stack[_sp].o) put___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label5;
    label4:;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.o = [((java_lang_Object*) _stack[_sp].o) getClass__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @".load() Why has transducer already name ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label5:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) read___java_io_InputStream_org_apertium_lttoolbox_Alphabet:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _locals[2].i += -1;
    label16:;
    goto label6;
    label3:;
    [_pool release];
    return;
}


- (void) initAnalysis__
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) calc_initial_state__];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) classifyFinals__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_standard];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_inconditional];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_postblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_preblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_Set*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_all_finals: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_standard];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_inconditional];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_postblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_preblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initFlagMatch___boolean:_stack[_sp + 1].i];
    label0:;
    [_pool release];
    return;
}


- (void) initDecomposition___boolean :(int)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initAnalysis__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compounding_finals: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_do_decomposition: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"<compound-only-L>";
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) includeSymbol___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"<compound-R>";
    _sp -= 2;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) includeSymbol___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"<compound-only-L>";
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compoundOnlyLSymbol: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = @"<compound-R>";
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_compoundRSymbol: _op1.i];
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) setSymbol___int_java_lang_String:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label0:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundRSymbol];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) setSymbol___int_java_lang_String:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_initial_compounding_state: _op1.o];
    label3:;
    [_pool release];
    return;
}


- (void) initFlagMatch___boolean :(int)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[11];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label17:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_do_flagMatch: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_flagMatch_symbolToVarVal];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label0;
    [_pool release];
    return;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:5 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_flagMatch_symbolToVarVal: _op1.o];
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"alphabet = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label1:;
    _stack[_sp++].o = @":";
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label21:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label23:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getFlagMatchSymbols__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label3:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label29:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = @":";
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) split___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label31:;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label4;
    goto label3;
    label4:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label6;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Warning: symbol must have a value to be used for flagmatch: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label3;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label33:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = @"";
    _sp -= 3;
    [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) setSymbol___int_java_lang_String:_stack[_sp + 1].i:_stack[_sp + 2].o];
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) indexOf___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label35:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_flagMatch_no_of_flags: _op1.i];
    label9:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) indexOf___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label37:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = -1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label10;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label10:;
    _locals[10].i += 1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_flagMatch_symbolToVarVal];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 16;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" is ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @":";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"(==";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 16;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i << _op2.i;    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i | _op2.i;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label11:;
    goto label3;
    label2:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"alphabet = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label13:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"flagList = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label14:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"valueList = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label15:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"flagMatch_symbolToVarVal = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_flagMatch_symbolToVarVal];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [java_util_Arrays toString___int_ARRAYTYPE:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label16:;
    [_pool release];
    return;
}


- (void) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State :(org_apertium_lttoolbox_process_State*)n1
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[12];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label16:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"deleteStatesWithConflictingFlags: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label15:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_flagMatch_no_of_flags];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:3 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label22:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"deleteStatesWithConflictingFlags: ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TNodeState*) _op1.o)  _GET_sequence];
    _stack[_sp++].o = _op2.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label24:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_util_List*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label5:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label28:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_Integer*) _stack[_sp].o) intValue__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label30:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label4;
    goto label5;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_flagMatch_symbolToVarVal];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = -_op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label32:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label6;
    goto label5;
    label6:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 16;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i >> _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label34:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i & _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label36:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label38:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label8;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op1.i = (int) (_op1.i & 0xFF);
    _stack[_sp++].i = (_op1.i & 0x80) ? _op1.i | 0xffffff00 : _op1.i;    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @": ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"->";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"flagvalues = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [java_util_Arrays toString___byte_ARRAYTYPE:_stack[_sp + 0].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label5;
    label8:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label11;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @": ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"!=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" - deleting ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label12:;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) remove___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label3;
    label11:;
    goto label5;
    label3:;
    _locals[2].i += -1;
    goto label15;
    label1:;
    [_pool release];
    return;
}


- (void) initTMAnalysis__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_tmNumbers: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_all_finals: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) calc_initial_state__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) values__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Collection*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label6:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label7:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) initGeneration__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) calc_initial_state__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_HashSet alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_HashSet*) _stack[_sp].o) __init_java_util_HashSet__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_all_finals: _op1.o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_Map*) _stack[_sp].o) keySet__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_util_Set*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_transducers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((java_util_Map*) _stack[_sp].o) get___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_TransExe*) _stack[_sp].o) getFinals__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_Set*) _stack[_sp].o) addAll___java_util_Collection:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label8:;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initFlagMatch___boolean:_stack[_sp + 1].i];
    label2:;
    [_pool release];
    return;
}


- (void) initPostgeneration__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    label1:;
    [_pool release];
    return;
}


- (void) initBiltrans__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) initGeneration__];
    label1:;
    [_pool release];
    return;
}


- (void) analysis___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[15];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label74:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) getNullFlush__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) analysis_wrapper_null_flush___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label0:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label80:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label82:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label84:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label86:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label88:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label90:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label36:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readAnalysis___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label94:;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_inconditional];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label100:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].i = 1;
    goto label6;
    label4:;
    _stack[_sp++].i = 0;
    label6:;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label112:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) pruneStatesWithForbiddenSymbol___int:_stack[_sp + 1].i];
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    label8:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label101:;
    goto label9;
    label3:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_postblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label98:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].i = 1;
    goto label13;
    label11:;
    _stack[_sp++].i = 0;
    label13:;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label110:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) pruneStatesWithForbiddenSymbol___int:_stack[_sp + 1].i];
    label14:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    label15:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label99:;
    goto label9;
    label10:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_preblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label106:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].i = 1;
    goto label20;
    label18:;
    _stack[_sp++].i = 0;
    label20:;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label108:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label21;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) pruneStatesWithForbiddenSymbol___int:_stack[_sp + 1].i];
    label21:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    label22:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label107:;
    goto label9;
    label17:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label24;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label104:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label25;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label25;
    _stack[_sp++].i = 1;
    goto label27;
    label25:;
    _stack[_sp++].i = 0;
    label27:;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label118:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label28;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) pruneStatesWithForbiddenSymbol___int:_stack[_sp + 1].i];
    label28:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label29;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    label29:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label105:;
    goto label9;
    label24:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Hum? In which cases do we get here? val = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    goto label9;
    label2:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = @"/*";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label9:;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label35;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    goto label36;
    label35:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label37;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label37;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label39;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label40;
    label39:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label41;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label41:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label40;
    label37:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label43;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label40;
    label43:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label45;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label40;
    label45:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label47;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label40;
    label47:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label49;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) lastBlank___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label50;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label49;
    label50:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readAnalysis___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label52;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label50;
    label52:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) firstNotAlpha___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label102:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label116:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2147483647;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label54;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    goto label55;
    label54:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    label55:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label56;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label57;
    label56:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label120:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label58;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) compoundAnalysis2___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label124:;
    _stack[_sp++].o = _locals[14].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label59;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[14].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label60;
    label59:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printUnknownWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label60:;
    goto label57;
    label58:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printUnknownWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label57:;
    goto label40;
    label49:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label63;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) firstNotAlpha___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label96:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label114:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2147483647;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label64;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    goto label65;
    label64:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    label65:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label66;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label67;
    label66:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label122:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_decomposition];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label68;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) compoundAnalysis2___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label126:;
    _stack[_sp++].o = _locals[14].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == [NSNull null]) goto label69;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[14].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    goto label70;
    label69:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printUnknownWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label70:;
    goto label67;
    label68:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printUnknownWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label67:;
    goto label40;
    label63:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printWord___java_lang_String_java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    label40:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label36;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    label75:;
    [_pool release];
    return;
}


- (java_lang_String*) compoundAnalysisOld___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[18];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label33:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 9;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[2].o = _op1.o;
    label37:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label39:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label41:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].i = 1;
    goto label3;
    label1:;
    _stack[_sp++].i = 0;
    label3:;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label43:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label15:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label4;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label5;
    _stack[_sp++].i = 1;
    goto label6;
    label5:;
    _stack[_sp++].i = 0;
    label6:;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label49:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_State alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_State__];
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label53:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label7;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label57:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label7:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label61:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" result = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label8:;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    label9:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"/";
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) split___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label69:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label12;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[6].i += -1;
    label12:;
    goto label10;
    label11:;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label10:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label14;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label14:;
    _locals[6].i += 1;
    goto label15;
    label4:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"compoundElements = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label16:;
    _stack[_sp++].i = 500;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label45:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label51:;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label55:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label28:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label67:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[10].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i * _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 500;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label18;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Warning: compoundAnalysis' MAX_COMBINATIONS exceeded for ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label18:;
    _stack[_sp++].o = _locals[8].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != [NSNull null]) goto label19;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label71:;
    _stack[_sp++].o = _locals[11].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label77:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label21:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label20;
    _stack[_sp++].o = _locals[11].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label85:;
    _stack[_sp++].o = _locals[8].o;
    _stack[_sp++].o = _locals[14].o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label86:;
    _locals[13].i += 1;
    goto label21;
    label20:;
    goto label22;
    label19:;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[10].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i * _op2.i;    _sp -= 2;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList___int:_stack[_sp + 1].i];
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label73:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label23;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"tuples.size() * arr.length = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[10].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i * _op2.i;    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label23:;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label27:;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label83:;
    _stack[_sp++].o = _locals[10].o;
    _op1.o = _stack[--_sp].o;
    _locals[14].o = _op1.o;
    label87:;
    _stack[_sp++].o = _locals[14].o;
    _op1.i = [_stack[--_sp].o count];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[15].i = _op1.i;
    label89:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[16].i = _op1.i;
    label26:;
    _op1.i = _locals[16].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label25;
    _stack[_sp++].o = _locals[14].o;
    _op1.i = _locals[16].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[17].o = _op1.o;
    label93:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"+";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[17].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    label94:;
    _locals[16].i += 1;
    goto label26;
    label25:;
    goto label27;
    label24:;
    _stack[_sp++].o = _locals[11].o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label22:;
    goto label28;
    label17:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[9].o = _op1.o;
    label63:;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) delete___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) iterator__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[10].o = _op1.o;
    label30:;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 1;
    _op1.i = [((java_util_Iterator*) _stack[_sp].o) hasNext__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label29;
    _stack[_sp++].o = _locals[10].o;
    _sp -= 1;
    _op1.o = [((java_util_Iterator*) _stack[_sp].o) next__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label75:;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = _locals[9].o;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label76:;
    goto label30;
    label29:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label31;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"compoundAnalysis(";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label31:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label32;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_Object:_stack[_sp + 1].o];
    label32:;
    _stack[_sp++].o = _locals[9].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label34:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) compoundAnalysis2___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label19:;
    _stack[_sp++].i = 500;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label23:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @" compoundAnalysis2(input_word = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_compounding_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label27:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].i = 1;
    goto label4;
    label1:;
    _stack[_sp++].i = 0;
    label4:;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label29:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label16:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label5;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label35:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" f\370r step ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" current_state = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label6:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 500;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label7;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"Warning: compoundAnalysis' MAX_COMBINATIONS exceeded for '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"         gave up at char ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" '";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"'. Here are first 20 states:'";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_State*) _op1.o)  _GET_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 20;
    _sp -= 3;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) subList___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label7:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" eft step ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" current_state = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label37:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label9;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundOnlyLSymbol];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_compounding_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 43;
    _sp -= 5;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) restartFinals___java_util_Set_int_org_apertium_lttoolbox_process_State_int:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].o:_stack[_sp + 4].i];
    label9:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" eft rest ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" current_state = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_Object:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label10:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label11;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" result = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label11:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label12:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @" result = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[8].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label13:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"-- size=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label14:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label15;
    _stack[_sp++].o = [NSNull null];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label15:;
    _locals[6].i += 1;
    goto label16;
    label5:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compoundRSymbol];
    _stack[_sp++].i = _op2.i;
    _stack[_sp++].i = 43;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) pruneCompounds___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_compounding_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label31:;
    _op1.i = [org_apertium_lttoolbox_process_FSTProcessor _GET_DEBUG];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"rrresult = ";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = @"/";
    _stack[_sp++].o = @"/\012";
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) replaceAll___java_lang_String_java_lang_String:_stack[_sp + 1].o:_stack[_sp + 2].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label17:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label18;
    _stack[_sp++].o = _locals[6].o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label18:;
    _stack[_sp++].o = [NSNull null];
    label20:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) analysis_wrapper_null_flush___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setNullFlush___boolean:_stack[_sp + 1].i];
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) ready__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) analysis___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    @try {
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    [((java_io_Writer*) _stack[_sp].o) flush__];
    } @catch (java_io_IOException* _ex) {
        _stack[_sp++].o = _ex;
        goto label11;
    }
    goto label1;
    label11:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((java_io_IOException*) _stack[_sp].o) printStackTrace__];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Could not flush output";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label10:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) generation_wrapper_null_flush___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode :(java_io_Reader*)n1 :(java_io_Writer*)n2 :(org_apertium_lttoolbox_process_FSTProcessor_GenerationMode*)n3
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setNullFlush___boolean:_stack[_sp + 1].i];
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) ready__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    @try {
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    [((java_io_Writer*) _stack[_sp].o) flush__];
    } @catch (java_io_IOException* _ex) {
        _stack[_sp++].o = _ex;
        goto label13;
    }
    goto label1;
    label13:;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label11:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    [((java_io_IOException*) _stack[_sp].o) printStackTrace__];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Could not flush output";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label12:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) postgeneration_wrapper_null_flush___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setNullFlush___boolean:_stack[_sp + 1].i];
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) ready__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) postgeneration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    @try {
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    [((java_io_Writer*) _stack[_sp].o) flush__];
    } @catch (java_io_IOException* _ex) {
        _stack[_sp++].o = _ex;
        goto label11;
    }
    goto label1;
    label11:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((java_io_IOException*) _stack[_sp].o) printStackTrace__];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Could not flush output";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label10:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) transliteration_wrapper_null_flush___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label3:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) setNullFlush___boolean:_stack[_sp + 1].i];
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) ready__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) transliteration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    @try {
    _stack[_sp++].o = _locals[2].o;
    _sp -= 1;
    [((java_io_Writer*) _stack[_sp].o) flush__];
    } @catch (java_io_IOException* _ex) {
        _stack[_sp++].o = _ex;
        goto label11;
    }
    goto label1;
    label11:;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label9:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    [((java_io_IOException*) _stack[_sp].o) printStackTrace__];
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Could not flush output";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    label10:;
    goto label1;
    label0:;
    [_pool release];
    return;
}


- (void) tm_analysis___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[8];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label45:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label51:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label53:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label55:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readAnalysis___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label59:;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswpunct___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinalsTM___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_java_util_ArrayDeque_java_util_ArrayList:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].o:_stack[_sp + 5].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) clear__];
    goto label2;
    label1:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label2:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label8;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_isLastBlankTM];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 32;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) getLast__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label8;
    label9:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label8;
    label6:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label13;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswpunct___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    label13:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label17;
    label16:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"\";
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    label18:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label17;
    label14:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label20;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswpunct___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label20;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) lastBlank___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label22;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    label22:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 65535;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label24;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_tmNumbers];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_util_ArrayList*) _stack[_sp].o) get___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label25;
    label24:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_isLastBlankTM];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 32;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label26;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) getLast__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label25;
    label26:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readTMAnalysis___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label29;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isWhitespace___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label29;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswpunct___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    label29:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label32;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    [_pool release];
    return;
    label32:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    label37:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label17;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label34;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_isLastBlankTM];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label34;
    goto label17;
    label34:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) removeLast__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label37;
    label20:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label38;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    label43:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label17;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((java_util_ArrayDeque*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label40;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_isLastBlankTM];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label40;
    goto label17;
    label40:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((java_util_ArrayDeque*) _stack[_sp].o) removeLast__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label43;
    label38:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 91;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 93;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    label17:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label8;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    label46:;
    [_pool release];
    return;
}


- (void) generation___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode :(java_io_Reader*)n1 :(java_io_Writer*)n2 :(org_apertium_lttoolbox_process_FSTProcessor_GenerationMode*)n3
{
    XMLVMElem _stack[7];
    XMLVMElem _locals[9];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    _locals[3].o = n3;
    label40:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) getNullFlush__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) generation_wrapper_null_flush___java_io_Reader_java_io_Writer_org_apertium_lttoolbox_process_FSTProcessor_GenerationMode:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label48:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label50:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_outOfWord: _op1.i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 94;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) skipUntil___java_io_Reader_java_io_Writer_char:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].i];
    label31:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readGeneration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label52:;
    _stack[_sp++].i = 2147483647;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 61;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 61;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readGeneration___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label2:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 36;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_outOfWord];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label6;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 37;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    label6:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_clean];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o == _op2.o) goto label8;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label7:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 64;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_all];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label12;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label12:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_clean];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label14;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) removeTags___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label14:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_unknown];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) removeTags___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label11:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label19;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].i = 1;
    goto label21;
    label19:;
    _stack[_sp++].i = 0;
    label21:;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label54:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label56:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_tagged];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label22;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 94;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label22:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_do_flagMatch];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label23;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) deleteStatesWithConflictingFlags___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    label23:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_tagged];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label24;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 47;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label24:;
    goto label9;
    label18:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_all];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label26;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 35;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label26:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_clean];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label28;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) removeTags___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    goto label9;
    label28:;
    _stack[_sp++].o = _locals[3].o;
    _op1.o = [org_apertium_lttoolbox_process_FSTProcessor_GenerationMode _GET_gm_unknown];
    _stack[_sp++].o = _op1.o;
    _op2.o = _stack[--_sp].o;
    _op1.o = _stack[--_sp].o;
    if (_op1.o != _op2.o) goto label9;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 35;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) removeTags___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) writeEscaped___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label9:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label31;
    label4:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label32;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label32;
    goto label31;
    label32:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label35;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label36;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 37;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label35;
    label36:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label31;
    label35:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label31;
    label1:;
    [_pool release];
    return;
}


- (void) postgeneration___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[8];
    XMLVMElem _locals[16];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label44:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) getNullFlush__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) postgeneration_wrapper_null_flush___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label0:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label50:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label52:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label54:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label56:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_SetOfCharacters alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_SetOfCharacters__];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label58:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readPostgeneration___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label62:;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 126;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label5;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label6:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label5;
    label3:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label64:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label9;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].i = 2;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].i = 1;
    goto label12;
    label9:;
    _stack[_sp++].i = 0;
    label12:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label68:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[7].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label74:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label16:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label13;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isLetter___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label14;
    goto label13;
    label14:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    _locals[13].i += -1;
    goto label16;
    label13:;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label17;
    _stack[_sp++].o = _locals[12].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label76:;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label18;
    _stack[_sp++].o = _locals[12].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label18;
    _stack[_sp++].i = 1;
    goto label20;
    label18:;
    _stack[_sp++].i = 0;
    label20:;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label80:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[15].i = _op1.i;
    label29:;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < 0) goto label17;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isLetter___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label22;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label23;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label23;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label17;
    label23:;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toLowerCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label17;
    label22:;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label27;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label28;
    label27:;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[15].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character toLowerCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    label28:;
    _locals[15].i += -1;
    goto label29;
    label17:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label30;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[6].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    goto label5;
    label30:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label32;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label66:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label70:;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label36:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label33;
    _stack[_sp++].o = _locals[6].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 126;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label34;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    goto label33;
    label34:;
    _locals[11].i += 1;
    goto label36;
    label33:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].i = 1;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label37;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label38;
    label37:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[6].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    label38:;
    goto label39;
    label32:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 3;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 2;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label40;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label39;
    label40:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label42;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label42:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label39:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    goto label5;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    label45:;
    [_pool release];
    return;
}


- (void) transliteration___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[6];
    XMLVMElem _locals[10];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label27:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) getNullFlush__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) transliteration_wrapper_null_flush___java_io_Reader_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label33:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label35:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label37:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label13:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readPostgeneration___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label41:;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) iswpunct___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label2;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    label2:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label43:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label47:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label4;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label5;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 2;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label5;
    _stack[_sp++].i = 1;
    goto label8;
    label5:;
    _stack[_sp++].i = 0;
    label8:;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label4:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label9;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label9:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label10;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label11;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label12;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label12:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label11:;
    goto label13;
    label3:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label14;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label45:;
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label15;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].i = 2;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].i = 1;
    goto label18;
    label15:;
    _stack[_sp++].i = 0;
    label18:;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label49:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label14:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label13;
    label19:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label21;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    goto label22;
    label21:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label23;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label22;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label25;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label25:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label22:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    goto label13;
    label1:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    label28:;
    [_pool release];
    return;
}


- (java_lang_String*) biltrans___java_lang_String_boolean :(java_lang_String*)n1 :(int)n2
{
    XMLVMElem _stack[8];
    XMLVMElem _locals[15];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    label39:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label45:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label47:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label49:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label51:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label53:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label55:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 61;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _locals[5].i += 1;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label57:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].i = 1;
    goto label5;
    label3:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label59:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label28:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label6;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label73:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _locals[11].i += 1;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label69:;
    goto label8;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = @"<";
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label13:;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label10;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 62;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    goto label10;
    label11:;
    _locals[14].i += 1;
    goto label13;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label65:;
    goto label8;
    label9:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label17:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 94;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label15;
    label16:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label20:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label22;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label23;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label23;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label22;
    label23:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label27;
    label26:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label27:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label22:;
    _locals[11].i += 1;
    goto label28;
    label6:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label29;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label63:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label71:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label75:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label36:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label30;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch (_op1.i) {
        case 47: goto label31;
        case 92: goto label32;
        default: goto label33;
    }
    label32:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[13].i += 1;
    goto label33;
    label31:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_CharSequence:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    goto label33;
    label33:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[13].i += 1;
    goto label36;
    label30:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_CharSequence:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label37;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label37:;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label29:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label38;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label38:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label40:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (org_apertium_lttoolbox_Pair*) biltransWithQueue___java_lang_String_boolean :(java_lang_String*)n1 :(int)n2
{
    XMLVMElem _stack[8];
    XMLVMElem _locals[15];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    label39:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label45:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label47:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label49:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label51:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label53:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label55:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Pair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Pair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Pair___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 61;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _locals[5].i += 1;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label57:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].i = 1;
    goto label5;
    label3:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label59:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label28:;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label6;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label67:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    label71:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _locals[11].i += 1;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    goto label8;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = @"<";
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label13:;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label10;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[13].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 62;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    goto label10;
    label11:;
    _locals[14].i += 1;
    goto label13;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    goto label8;
    label9:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[12].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label17:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 94;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label15;
    label16:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label20:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label22;
    _stack[_sp++].o = _locals[13].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label23;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label23;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[13].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    goto label22;
    label23:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label26;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label27;
    label26:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label27:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Pair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Pair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Pair___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label22:;
    _locals[11].i += 1;
    goto label28;
    label6:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label29;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[11].o = _op1.o;
    label63:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    label65:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label69:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label36:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label30;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    switch (_op1.i) {
        case 47: goto label31;
        case 92: goto label32;
        default: goto label33;
    }
    label32:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[13].i += 1;
    goto label33;
    label31:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_CharSequence:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[12].i = _op1.i;
    goto label33;
    label33:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[4].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _locals[13].i += 1;
    goto label36;
    label30:;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_CharSequence:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label37;
    _stack[_sp++].o = _locals[11].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label37:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Pair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[11].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_StringBuilder*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Pair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Pair___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label29:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label38;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label38:;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_Pair alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 0;
    _sp -= 1;
    _op1.o = [java_lang_Integer valueOf___int:_stack[_sp + 0].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 3;
    [((org_apertium_lttoolbox_Pair*) _stack[_sp].o) __init_org_apertium_lttoolbox_Pair___java_lang_Object_java_lang_Object:_stack[_sp + 1].o:_stack[_sp + 2].o];
    label40:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_lang_String*) biltransWithoutQueue___java_lang_String_boolean :(java_lang_String*)n1 :(int)n2
{
    XMLVMElem _stack[8];
    XMLVMElem _locals[14];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].i = n2;
    label28:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label34:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = @"";
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label36:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    label38:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label40:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label42:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[5].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 42;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 61;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label2;
    _locals[5].i += 1;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label2:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label44:;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].i = 1;
    goto label5;
    label3:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label46:;
    _op1.i = _locals[5].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label26:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label6;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label56:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label7;
    _locals[10].i += 1;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label50:;
    goto label8;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label9;
    _stack[_sp++].o = @"<";
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label13:;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label10;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 62;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label11;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    goto label10;
    label11:;
    _locals[13].i += 1;
    goto label13;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[12].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) cast___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label52:;
    goto label8;
    label9:;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label8:;
    _stack[_sp++].o = _locals[3].o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___int_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label15;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 6;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinals___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label16;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label17;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label17:;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 94;
    _sp -= 3;
    [((java_lang_StringBuilder*) _stack[_sp].o) setCharAt___int_char:_stack[_sp + 1].i:_stack[_sp + 2].i];
    goto label15;
    label16:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label20;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"=";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label15;
    label20:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label15:;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label22;
    _stack[_sp++].o = _locals[12].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label22;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label24;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"^@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    goto label25;
    label24:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"@";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder___java_lang_String:_stack[_sp + 1].o];
    _op1.o = _stack[--_sp].o;
    _locals[4].o = _op1.o;
    label25:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label22:;
    _locals[10].i += 1;
    goto label26;
    label6:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label27;
    _stack[_sp++].o = _locals[4].o;
    _stack[_sp++].i = 36;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___char:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    label27:;
    _stack[_sp++].o = _locals[4].o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    label29:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (int) valid__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Error: Invalid dictionary (hint: the left side of an entry is empty)";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[1].o = _op1.o;
    label4:;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _op1.o = [java_lang_System _GET_err];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"Error: Invalid dictionary (hint: entry beginning with whitespace)";
    _sp -= 2;
    [((java_io_PrintStream*) _stack[_sp].o) println___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].i = 1;
    label3:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) readSAO___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[5];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label11:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) isEmpty__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) next__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) ready__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label15:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) contains___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label3;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 60;
    _stack[_sp++].i = 62;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    label17:;
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].i = 0;
    _stack[_sp++].i = 9;
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"<![CDATA[";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label4;
    label6:;
    _stack[_sp++].o = @"]]>";
    _stack[_sp++].o = _locals[3].o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 3;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label5;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 60;
    _stack[_sp++].i = 62;
    _sp -= 4;
    _op1.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readFullBlock___java_io_Reader_char_char:_stack[_sp + 1].o:_stack[_sp + 2].i:_stack[_sp + 3].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[3].o = _op1.o;
    goto label6;
    label5:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_blankqueue];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[3].o;
    _sp -= 2;
    [((java_util_ArrayDeque*) _stack[_sp].o) addLast___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].i = 32;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label4:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError__];
    label18:;
    goto label2;
    label3:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label8;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label9;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label9:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    goto label2;
    label8:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) streamError___char:_stack[_sp + 1].i];
    label2:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    label12:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (void) printSAOWord___java_lang_String_java_io_Writer :(java_lang_String*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[5];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label4:;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label10:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label3:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 47;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    goto label0;
    label1:;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _locals[3].i += 1;
    goto label3;
    label0:;
    [_pool release];
    return;
}


- (void) SAO___java_io_Reader_java_io_Writer :(java_io_Reader*)n1 :(java_io_Writer*)n2
{
    XMLVMElem _stack[7];
    XMLVMElem _locals[12];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label44:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label50:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label52:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label54:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    label56:;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    label58:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label60:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) clear__];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 60;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 62;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_SetOfCharacters*) _stack[_sp].o) add___char:_stack[_sp + 1].i];
    label20:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readSAO___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label62:;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label0;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label1;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_inconditional];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label2;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label66:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label3;
    _stack[_sp++].i = 1;
    goto label5;
    label3:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label76:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 7;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinalsSAO___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean_int:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i:_stack[_sp + 6].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label67:;
    goto label6;
    label2:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_postblank];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) isFinal___java_util_Set:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label7;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label64:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label8;
    _stack[_sp++].i = 1;
    goto label10;
    label8:;
    _stack[_sp++].i = 0;
    label10:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label74:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 7;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinalsSAO___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean_int:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i:_stack[_sp + 6].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 1;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label65:;
    goto label6;
    label7:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label6;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].i = 0;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label72:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isUpperCase___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label13;
    _stack[_sp++].i = 1;
    goto label15;
    label13:;
    _stack[_sp++].i = 0;
    label15:;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label78:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_all_finals];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_escaped_chars];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 0;
    _sp -= 7;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) filterFinalsSAO___java_util_Set_org_apertium_lttoolbox_Alphabet_org_apertium_lttoolbox_process_SetOfCharacters_boolean_boolean_int:_stack[_sp + 1].o:_stack[_sp + 2].o:_stack[_sp + 3].o:_stack[_sp + 4].i:_stack[_sp + 5].i:_stack[_sp + 6].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label73:;
    goto label6;
    label1:;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label6;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"/*";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) getPos__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[8].i = _op1.i;
    label6:;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_caseSensitive];
    _stack[_sp++].i = _op2.i;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) step_case___char_boolean:_stack[_sp + 1].i:_stack[_sp + 2].i];
    _stack[_sp++].o = _locals[5].o;
    _sp -= 1;
    _op1.i = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) size__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label19;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    goto label20;
    label19:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label21;
    _stack[_sp++].o = _locals[7].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label21;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 1;
    _op1.i = [java_lang_Character isSpaceChar___char:_stack[_sp + 0].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label23;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSpace___char_java_io_Writer:_stack[_sp + 1].i:_stack[_sp + 2].o];
    goto label24;
    label23:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isEscaped___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label25;
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 92;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    label25:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    goto label24;
    label21:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label27;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSAOWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label24;
    label27:;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label29;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSAOWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].i = 32;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    goto label24;
    label29:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label31;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) diffPrevPos___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) lastBlank___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label32;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label31;
    label32:;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_alphabet];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) getSymbol___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) readSAO___java_io_Reader:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label34;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label32;
    label34:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) firstNotAlpha___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label68:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label82:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2147483647;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label36;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    goto label37;
    label36:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    label37:;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"<d>";
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = @"</d>";
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    label69:;
    goto label24;
    label31:;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = @"";
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) equals___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == 0) goto label39;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) firstNotAlpha___java_lang_String:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label70:;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label80:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 2147483647;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label40;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    goto label41;
    label40:;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    label41:;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[2].o;
    _stack[_sp++].o = [[[java_lang_StringBuilder alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_lang_StringBuilder*) _stack[_sp].o) __init_java_lang_StringBuilder__];
    _stack[_sp++].o = @"<d>";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = _locals[7].o;
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _stack[_sp++].o = @"</d>";
    _sp -= 2;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) append___java_lang_String:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 1;
    _op1.o = [((java_lang_StringBuilder*) _stack[_sp].o) toString__];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp -= 2;
    [((java_io_Writer*) _stack[_sp].o) write___java_lang_String:_stack[_sp + 1].o];
    label71:;
    goto label24;
    label39:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[6].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 3;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) printSAOWord___java_lang_String_java_io_Writer:_stack[_sp + 1].o:_stack[_sp + 2].o];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[8].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) setPos___int:_stack[_sp + 1].i];
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_input_buffer];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].i = 1;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Buffer*) _stack[_sp].o) back___int:_stack[_sp + 1].i];
    label24:;
    _stack[_sp++].o = _locals[5].o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_initial_state];
    _stack[_sp++].o = _op2.o;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_process_State*) _stack[_sp].o) copy___org_apertium_lttoolbox_process_State:_stack[_sp + 1].o];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _sp--;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[6].o = _op1.o;
    _stack[_sp++].o = @"";
    _op1.o = _stack[--_sp].o;
    _locals[7].o = _op1.o;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    goto label20;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[2].o;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) flushBlanks___java_io_Writer:_stack[_sp + 1].o];
    label45:;
    [_pool release];
    return;
}


- (java_lang_String*) removeTags___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label5:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label4:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 60;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 1;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i - _op2.i;    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 92;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _stack[_sp++].o = _locals[1].o;
    _stack[_sp++].i = 0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 3;
    _op1.o = [((java_lang_String*) _stack[_sp].o) substring___int_int:_stack[_sp + 1].i:_stack[_sp + 2].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
    label1:;
    _locals[2].i += 1;
    goto label4;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    label6:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (void) setCaseSensitiveMode___boolean :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_caseSensitive: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (void) setFlagMatchMode___boolean :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_do_flagMatch: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (void) setNullFlush___boolean :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_FSTProcessor*) _op2.o) _PUT_nullFlush: _op1.i];
    label1:;
    [_pool release];
    return;
}


- (int) getNullFlush__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _op1.o)  _GET_nullFlush];
    _stack[_sp++].i = _op2.i;
    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) firstNotAlpha___java_lang_String :(java_lang_String*)n1
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[4];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label3:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label7:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_lang_String*) _stack[_sp].o) length__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label2:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((java_lang_String*) _stack[_sp].o) charAt___int:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.i = [((org_apertium_lttoolbox_process_FSTProcessor*) _stack[_sp].o) isAlphabetic___char:_stack[_sp + 1].i];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != 0) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
    label1:;
    _locals[2].i += 1;
    goto label2;
    label0:;
    _stack[_sp++].i = 2147483647;
    label4:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) xread___java_io_Reader :(java_io_Reader*)n1
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[2];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [((java_io_Reader*) _stack[_sp].o) read__];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i & 0xff;    label1:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) iswdigit___char :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label6:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label10:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 48;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 57;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label0:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 178;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 179;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i == _op2.i) goto label1;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 185;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i != _op2.i) goto label4;
    label1:;
    _stack[_sp++].i = 1;
    goto label5;
    label4:;
    _stack[_sp++].i = 0;
    label5:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


- (int) iswpunct___char :(int)n1
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[3];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].i = n1;
    label11:;
    _op1.i = _locals[1].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[2].i = _op1.i;
    label15:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 161;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label0;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 191;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label0:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 33;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label2;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 47;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label2:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 58;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label4;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 64;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label4:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 91;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label6;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 96;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= _op2.i) goto label1;
    label6:;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 123;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i < _op2.i) goto label8;
    _op1.i = _locals[2].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].i = 126;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i > _op2.i) goto label8;
    label1:;
    _stack[_sp++].i = 1;
    goto label10;
    label8:;
    _stack[_sp++].i = 0;
    label10:;
    _op1.i = _stack[--_sp].i;
    [_pool release];
    return _op1.i;
}


+ (void) __clinit_org_apertium_lttoolbox_process_FSTProcessor
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[0];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    [org_apertium_lttoolbox_process_FSTProcessor _PUT_DEBUG: _op1.i];
    [_pool release];
    return;
}



@end

