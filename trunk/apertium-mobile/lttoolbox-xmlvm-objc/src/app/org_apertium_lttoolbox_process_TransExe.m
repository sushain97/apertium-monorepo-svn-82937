#import "java_util_ArrayList.h"
#import "java_io_InputStream.h"
#import "org_apertium_lttoolbox_Alphabet_IntegerPair.h"
#import "org_apertium_lttoolbox_Compression.h"
#import "org_apertium_lttoolbox_Alphabet.h"
#import "org_apertium_lttoolbox_process_Node.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_apertium_lttoolbox_process_TransExe.h"


@implementation org_apertium_lttoolbox_process_TransExe;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_apertium_lttoolbox_process_TransExe") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        org_apertium_lttoolbox_process_TransExe_node_list2 = (id) [NSNull null];
        org_apertium_lttoolbox_process_TransExe_finals2 = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [org_apertium_lttoolbox_process_TransExe_node_list2 release];
    [org_apertium_lttoolbox_process_TransExe_finals2 release];
    [super dealloc];
}

- (int) _GET_initial_id
{
    return org_apertium_lttoolbox_process_TransExe_initial_id;
}

- (void) _PUT_initial_id: (int) v
{
    org_apertium_lttoolbox_process_TransExe_initial_id = v;
}

- (XMLVMArray*) _GET_node_list2
{
    return [[org_apertium_lttoolbox_process_TransExe_node_list2 retain] autorelease];
}

- (void) _PUT_node_list2: (XMLVMArray*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_TransExe_node_list2 release];
    org_apertium_lttoolbox_process_TransExe_node_list2 = v;
}

- (java_util_ArrayList*) _GET_finals2
{
    return [[org_apertium_lttoolbox_process_TransExe_finals2 retain] autorelease];
}

- (void) _PUT_finals2: (java_util_ArrayList*) v
{
    [v retain];
    [org_apertium_lttoolbox_process_TransExe_finals2 release];
    org_apertium_lttoolbox_process_TransExe_finals2 = v;
}

- (void) __init_org_apertium_lttoolbox_process_TransExe__
{
    XMLVMElem _stack[3];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _sp -= 1;
    [((super)) __init_java_lang_Object__];
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = [[[java_util_ArrayList alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((java_util_ArrayList*) _stack[_sp].o) __init_java_util_ArrayList__];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_TransExe*) _op2.o) _PUT_finals2: _op1.o];
    label1:;
    [_pool release];
    return;
}


- (void) read___java_io_InputStream_org_apertium_lttoolbox_Alphabet :(java_io_InputStream*)n1 :(org_apertium_lttoolbox_Alphabet*)n2
{
    XMLVMElem _stack[4];
    XMLVMElem _locals[16];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    _locals[1].o = n1;
    _locals[2].o = n2;
    label10:;
    _stack[_sp++].o = _locals[0].o;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_TransExe*) _op2.o) _PUT_initial_id: _op1.i];
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[3].i = _op1.i;
    label16:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    label18:;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:5 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[5].o = _op1.o;
    label20:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label1:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label0;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    ((XMLVMArray*) _op3.o)->array.i[_op2.i] = _op1.i;
    _locals[6].i += 1;
    goto label1;
    label0:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[6].i = _op1.i;
    label24:;
    _stack[_sp++].o = _locals[0].o;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].o = [XMLVMArray createSingleDimensionWithType:0 andSize:_op1.i];
    _op1.o = _stack[--_sp].o;
    _op2.o = _stack[--_sp].o;
    [((org_apertium_lttoolbox_process_TransExe*) _op2.o) _PUT_node_list2: _op1.o];
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label3:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label2;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_node_list2];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = [[[org_apertium_lttoolbox_process_Node alloc] init] autorelease];
    _op1 = _stack[_sp - 1];
    _stack[_sp++] = _op1;
    _sp -= 1;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) __init_org_apertium_lttoolbox_process_Node__];
    _op1.o = _stack[--_sp].o;
    _op2.i = _stack[--_sp].i;
    _op3.o = _stack[--_sp].o;
    [_op3.o replaceObjectAtIndex: _op2.i withObject: _op1.o];
    _locals[7].i += 1;
    goto label3;
    label2:;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label7:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[6].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label4;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_node_list2];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[8].o = _op1.o;
    label32:;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _locals[9].i = _op1.i;
    label34:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    label36:;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) initTransitions___int:_stack[_sp + 1].i];
    label6:;
    _op1.i = _locals[9].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i <= 0) goto label5;
    _locals[9].i += -1;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[10].i = _op1.i;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[1].o;
    _sp -= 1;
    _op1.i = [org_apertium_lttoolbox_Compression multibyte_read___java_io_InputStream:_stack[_sp + 0].o];
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    _stack[_sp++].i = _op1.i + _op2.i;    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    
  _op2.i = _stack[--_sp].i; // Integer remainder of 
  _op1.i = _stack[--_sp].i;
  _stack[_sp++].i = _op1.i % _op2.i;    _op1.i = _stack[--_sp].i;
    _locals[11].i = _op1.i;
    label38:;
    _stack[_sp++].o = _locals[2].o;
    _op1.i = _locals[10].i;
    _stack[_sp++].i = _op1.i;
    _sp -= 2;
    _op1.o = [((org_apertium_lttoolbox_Alphabet*) _stack[_sp].o) decode___int:_stack[_sp + 1].i];
    [_op1.o autorelease];
    _stack[_sp++].o = _op1.o;
    _op1.o = _stack[--_sp].o;
    _locals[12].o = _op1.o;
    label40:;
    _stack[_sp++].o = _locals[12].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_first];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _locals[13].i = _op1.i;
    label42:;
    _stack[_sp++].o = _locals[12].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_Alphabet_IntegerPair*) _op1.o)  _GET_second];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _locals[14].i = _op1.i;
    label44:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_node_list2];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[11].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _op1.o = _stack[--_sp].o;
    _locals[15].o = _op1.o;
    label46:;
    _stack[_sp++].o = _locals[8].o;
    _op1.i = _locals[13].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[14].i;
    _stack[_sp++].i = _op1.i;
    _stack[_sp++].o = _locals[15].o;
    _sp -= 4;
    [((org_apertium_lttoolbox_process_Node*) _stack[_sp].o) addTransition___int_int_org_apertium_lttoolbox_process_Node:_stack[_sp + 1].i:_stack[_sp + 2].i:_stack[_sp + 3].o];
    label39:;
    goto label6;
    label5:;
    _locals[7].i += 1;
    goto label7;
    label4:;
    _stack[_sp++].i = 0;
    _op1.i = _stack[--_sp].i;
    _locals[7].i = _op1.i;
    label9:;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _locals[3].i;
    _stack[_sp++].i = _op1.i;
    _op2.i = _stack[--_sp].i;
    _op1.i = _stack[--_sp].i;
    if (_op1.i >= _op2.i) goto label8;
    _stack[_sp++].o = _locals[5].o;
    _op1.i = _locals[7].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].i = ((XMLVMArray*) _op2.o)->array.i[_op1.i];
    _op1.i = _stack[--_sp].i;
    _locals[4].i = _op1.i;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_finals2];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_node_list2];
    _stack[_sp++].o = _op2.o;
    _op1.i = _locals[4].i;
    _stack[_sp++].i = _op1.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    _sp -= 2;
    _op1.i = [((java_util_ArrayList*) _stack[_sp].o) add___java_lang_Object:_stack[_sp + 1].o];
    _stack[_sp++].i = _op1.i;
    _sp--;
    _locals[7].i += 1;
    goto label9;
    label8:;
    [_pool release];
    return;
}


- (org_apertium_lttoolbox_process_Node*) getInitial__
{
    XMLVMElem _stack[2];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_node_list2];
    _stack[_sp++].o = _op2.o;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.i = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_initial_id];
    _stack[_sp++].i = _op2.i;
    _op1.i = _stack[--_sp].i;
    _op2.o = _stack[--_sp].o;
    _stack[_sp++].o = [_op2.o objectAtIndex: _op1.i];
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}


- (java_util_ArrayList*) getFinals__
{
    XMLVMElem _stack[1];
    XMLVMElem _locals[1];
    int _sp = 0;
    XMLVMElem _op1, _op2, _op3;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _locals[0].o = self;
    label0:;
    _stack[_sp++].o = _locals[0].o;
    _op1.o = _stack[--_sp].o;
    _op2.o = [((org_apertium_lttoolbox_process_TransExe*) _op1.o)  _GET_finals2];
    _stack[_sp++].o = _op2.o;
    label1:;
    _op1.o = _stack[--_sp].o;
    [_op1.o retain];
    [_pool release];
    return _op1.o;
}



@end

