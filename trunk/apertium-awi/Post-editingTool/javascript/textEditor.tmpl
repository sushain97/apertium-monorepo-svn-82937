#Template file for textEditor.js, to allow the use of modules
#
#Contributed By Mougey Camille <commial@gmail.com> for Google Summer of Code 2011
#Mentors : Arnaud Vié, Luis Villarejo
#
#Usage :
# * tag : #all#
#Which is between #all# and ## will be write everytime
#
# * tag : #ModuleName#
#Which is between #ModuleName# and ## will be write if the module ModuleName is Load
#BEGIN#
#all#
//coding: utf-8
/*
  Apertium Web Post Editing tool
  Functions for text editing interface
	
  Contributed by Arnaud Vié <unas.zole@gmail.com> for Google Summer of Code 2010
  Mentors : Luis Villarejo, Mireia Farrús

  Contributed By Mougey Camille <commial@gmail.com> for Google Summer of Code 2011
  Mentors : Arnaud Vié, Luis Villarejo
*/

var text_in_js_on;
var text_out_js_on;
var text_in_js_off;
var text_out_js_off;

function initJSEditors()
{
	document.mainform.onsubmit = prepareSubmit;
	
	text_in_js_on = document.getElementById('text_in_js_on');
	text_out_js_on = document.getElementById('text_out_js_on');
	text_in_js_off = document.getElementById('text_in_js_off');
	text_out_js_off = document.getElementById('text_out_js_off');
	
	text_in_js_on.style.display = '';
	text_out_js_on.style.display = '';
	text_in_js_off.style.display = 'none';
	text_out_js_off.style.display = 'none';
	
	text_in_js_on.setAttribute("spellcheck", "false");
	text_out_js_on.setAttribute("spellcheck", "false");

##
#Logs#	
	//build words lists for logging
	text_in_js_on.text_object = buildWordList(text_in_js_on);
	text_out_js_on.text_object = buildWordList(text_out_js_on);
	
	//prepare text logs
	text_in_js_on.final_log = '';
	text_out_js_on.final_log = '';
	
	//display the log button
	document.getElementById('get_logs').style.display = '';
	
	//Set text fields to get their paste event intercepted
	addPasteEventListener(text_in_js_on, function(text){
			var selRange = window.getSelection().getRangeAt(0);
			var correctRange = getCorrectedRange(selRange, text_in_js_on);
			replaceCharacters(correctRange.startContainer, correctRange.startOffset, correctRange.endContainer, correctRange.endOffset, strip_tags(text), selRange);
		});
	
	addPasteEventListener(text_out_js_on, function(text){
			var selRange = window.getSelection().getRangeAt(0);
			var correctRange = getCorrectedRange(selRange, text_out_js_on);
			replaceCharacters(correctRange.startContainer, correctRange.startOffset, correctRange.endContainer, correctRange.endOffset, strip_tags(text), selRange);
		});
##
#all#
}

function prepareSubmit()
{
	/*
	  text_in_js_on.removeChild(text_in_js_on.lastChild); //delete trailing BR
	  text_in_js_off.value = strip_tags(text_in_js_on.innerHTML.replace(/<br(.*?)>/ig, '\n')); //convert all other BRs to true new lines
	
	  text_out_js_on.removeChild(text_out_js_on.lastChild); 
	  text_out_js_off.value = strip_tags(text_out_js_on.innerHTML.replace(/<br(.*?)>/ig, '\n'));
	*/
	
	text_in_js_off.value = getCleanValue(text_in_js_on);
	text_out_js_off.value = getCleanValue(text_out_js_on);
}

function getCleanValue(elt)
{
	elt.removeChild(elt.lastChild); //delete trailing BR
	var result = strip_tags(elt.innerHTML.replace(/<br(.*?)>/ig, '\n'), '<hr>'); //convert all other BRs to true new lines
	
	//reappend trailing BR
	var newChild = document.createElement("br");
	newChild.className = "nodelete";
	elt.appendChild(newChild);
	
	return result;
}

/*
  FUNCTIONS FOR EVENT MANAGEMENT
*/

var TE_eventMode = 'idle';

function TE_handleClick(event)
{
	switch(TE_eventMode)
	{
	case 'idle' :
		
		if(!window.getSelection().getRangeAt(0).collapsed) // if user is selecting text, forget about the event
		{
			return true;
		}
			
		if(event.target.className.lastIndexOf('_mistake') == event.target.className.length - 'mistake'.length - 1)
		{
			if(event.target.getAttribute('data-suggestions') != '')
			{
				displaySuggestionsList(event.target);
					
				TE_eventMode = 'suggListOpened';
			}
			return false;
		}
		else if(event.target.className.match(/\bdelete_row\b/))
		{
			event.target.parentNode.parentNode.removeChild(event.target.parentNode);
			//event.target.setAttribute('onclick' , 'return false;'); //disable the form submitting
			return false;
		}
		else if(event.target.id == 'pretrans_add')
		{
			var newElt = document.createElement('li');
			newElt.innerHTML = document.getElementById('list_elements_models').getElementsByTagName('li')[0].innerHTML;
			document.getElementById('pretrans_list').appendChild(newElt);
			//event.target.setAttribute('onclick' , 'return false;'); //disable the form submitting
			return false;
		}
		else if(event.target.id == 'posttrans_add')
		{
			var newElt = document.createElement('li');
			newElt.innerHTML = document.getElementById('list_elements_models').getElementsByTagName('li')[1].innerHTML;
			document.getElementById('posttrans_list').appendChild(newElt);
			//event.target.setAttribute('onclick', 'return false;'); //disable the form submitting
			return false;
		}
			
		break;
		
	case 'suggListOpened' :
		var sugList = document.getElementById('suggestions_list');
			
		if(event.target.className == 'suggestion_element')
		{
			//let's replace the mistake by the chosen correction
			var errorElement = sugList.parentErrorElement;
			errorElement.className = "";
			var textNode = getNextTextNode(errorElement);
				
			replaceCharacters(textNode, 0, textNode, textNode.nodeValue.length, event.target.textContent);
			/*/
			  var textNode = document.createTextNode(event.target.textContent);
				
			  var errorElement = sugList.parentErrorElement;
			  errorElement.parentNode.replaceChild(textNode, errorElement);
			//*/
				
			//then close the suggestion list
			document.body.removeChild(sugList);
			TE_eventMode = 'idle';
				
			return false;
		}
		else if(event.target.className == 'suggestion_search_link')
		{
			//open new window/tab with the definition
			window.open(event.target.href, 'definition');
				
			//prevent the natural link from reacting
			return false;
		}
		else if(event.target.parentNode.className == 'suggestion_search_link') //click event triggers on the child img
		{
			//open new window/tab with the definition
			window.open(event.target.parentNode.href, 'definition');
				
			//prevent the natural link from reacting
			return false;
		}
		else
		{
			//click outside of the suggestion list : just close it
			document.body.removeChild(sugList);
			TE_eventMode = 'idle';
				
			return true;
		}
			
		break;
	}
}


/*
  FUNCTIONS FOR BASIC TEXT MANIPULATION
*/


function insertCharacter(node, offset, character, selRange)
{
	logInsertChar(node, offset, character);
	node.nodeValue = node.nodeValue.substr(0, offset) + character + node.nodeValue.substr(offset); //insert the character in the string
	
	if(selRange)
	{
		//if selrange given, restore it
		selRange.setStart(node, offset + character.length);
	}
}

function deleteCharacter(node, offset, selRange)
{
	logDeleteChar(node, offset);
	node.nodeValue = node.nodeValue.substr(0, offset) + node.nodeValue.substr(offset + 1); //delete char at position offset
	
	if(selRange)
	{
		//if selrange given, restore it
		selRange.setStart(node, offset);
	}
}

function replaceCharacters(startNode, startOffset, endNode, endOffset, string, selRange)
{
	//delete all characters between the two positions
	var currentNode = endNode;
	var currentOffset = endOffset;
	while(currentNode != startNode || currentOffset != startOffset)
	{
		if(currentOffset <= 0)
		{
			currentNode = currentNode.previousNode;
			currentOffset = currentNode.nodeValue.length;
		}
		else
		{
			deleteCharacter(currentNode, currentOffset - 1, selRange); //delete the character
			
			currentOffset -= 1;
		}
	}
	
	//then insert the characters
	if(string != "")
	{
		var lexicalElts = string.split(regexp_split_lexical); //split the tring into its lexical elements
		
		currentOffset = startOffset;
		//Go through all lexical elements of the string and insert them at the start point
		for(var i = 0; i < lexicalElts.length; i++)
		{
			insertCharacter(startNode, currentOffset, lexicalElts[i], selRange);
			currentOffset += lexicalElts[i].length;
		}
	}
}

function deleteNode(node)
{
	node.parentNode.removeChild(node);
}



//auxialiary functions

function strip_tags (str, allowed_tags) {
	// Strips HTML and PHP tags from a string  
	// version: 1006.1915
	// discuss at: http://phpjs.org/functions/strip_tags    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	var key = '', allowed = false;
	var matches = [];    var allowed_array = [];
	var allowed_tag = '';
	var i = 0;
	var k = '';
	var html = ''; 
	var replacer = function (search, replace, str) {
		return str.split(search).join(replace);
	};
	// Build allowes tags associative array
	if (allowed_tags) {
		allowed_array = allowed_tags.match(/([a-zA-Z0-9]+)/gi);
	}
	str += '';
 
	// Match tags
	matches = str.match(/(<\/?[\S][^>]*>)/gi);
	// Go through all HTML tags
	for (key in matches) {
		if (isNaN(key)) {
			// IE7 Hack
			continue;        }
 
		// Save HTML tag
		html = matches[key].toString();
		// Is tag not in allowed list? Remove from str!
		allowed = false;
 
		// Go through all allowed tags
		for (k in allowed_array) {            // Init
			allowed_tag = allowed_array[k];
			i = -1;
 
			if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+'>');}            if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+' ');}
			if (i != 0) { i = html.toLowerCase().indexOf('</'+allowed_tag)   ;}
 
			// Determine
			if (i == 0) {                allowed = true;
				break;
			}
		}
		if (!allowed) {
			str = replacer(html, "", str); // Custom replace. No regexing
		}
	}
	return str;
}


/* Auxiliary functions for node manipulations */

//redefine the non-standard contains method using the standard compareDocumentPosition
//http://www.quirksmode.org/blog/archives/2006/01/contains_for_mo.html
if(window.Node && Node.prototype && !Node.prototype.contains)
{
	Node.prototype.contains = function (arg) {
		return !!(this.compareDocumentPosition(arg) & 16)
	}
}

function nodeContains(container, contained)
{
	if(container.compareDocumentPosition)
	{
		return !!(container.compareDocumentPosition(contained) & 16);
	}
	else
	{
		return container.contains(contained);
	}
}

function getNextTextNode(node, container, include_self, not_recursive)
{
	if(!container || nodeContains(container, node))
	{
		if(include_self && node.nodeType == 3 && node.parent_text)
		{
			return node;
		}
		else if(!not_recursive && node.firstChild)
		{
			return getNextTextNode(node.firstChild, container, true);
		}
		else if(node.nextSibling)
		{
			return getNextTextNode(node.nextSibling, container, true);
		}
		else
		{
			return getNextTextNode(node.parentNode, container, false, true);
		}
	}
	else
	{
		return null;
	}
}

function getPreviousTextNode(node, container, include_self, not_recursive)
{
	if(!container || nodeContains(container, node))
	{
		if(include_self && node.nodeType == 3 && node.parent_text)
		{
			return node;
		}
		else if(!not_recursive && node.lastChild)
		{
			return getPreviousTextNode(node.lastChild, container, true);
		}
		else if(node.previousSibling)
		{
			return getPreviousTextNode(node.previousSibling, container, true);
		}
		else
		{
			return getPreviousTextNode(node.parentNode, container, false, true);
		}
	}
	else
	{
		return null;
	}
}

##
#END#