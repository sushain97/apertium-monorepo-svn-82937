Index: src/ApertiumApplicator.h
===================================================================
--- src/ApertiumApplicator.h	(revisión: 4855)
+++ src/ApertiumApplicator.h	(copia de trabajo)
@@ -38,11 +38,24 @@
 
 		virtual int runGrammarOnText(UFILE *input, UFILE *output);
 
+		bool getNullFlush();
+		void setNullFlush(bool pNullFlush);
+		
 	protected:
-
+		bool nullFlush;
+		bool runningWithNullFlush;
+	
 		void printReading(Reading *reading, UFILE *output);
 		void printSingleWindow(SingleWindow *window, UFILE *output);
+		
+		int runGrammarOnTextWrapperNullFlush(UFILE *input, UFILE *output);
 
+		UChar u_fgetc_wrapper(UFILE *input);
+		UConverter* fgetc_converter;
+		char fgetc_inputbuf[5];
+		UChar fgetc_outputbuf[5];
+		UErrorCode fgetc_error;
+
 	private:
 
 		void processReading(Reading *cReading, UChar *reading_string);
Index: src/cg_proc.cpp
===================================================================
--- src/cg_proc.cpp	(revisión: 4855)
+++ src/cg_proc.cpp	(copia de trabajo)
@@ -79,6 +79,7 @@
 	int cmd = 0;
 	int sections = 0;
 	int stream_format = 1;
+	bool nullFlush=false;
 
 	UErrorCode status = U_ZERO_ERROR;
 	UFILE *ux_stdin = 0;
@@ -94,7 +95,8 @@
 		{"stream-format",	0, 0, 'f'},
 		{"trace", 		0, 0, 't'},
 		{"version",   		0, 0, 'v'},
-		{"help",		0, 0, 'h'}
+		{"help",		0, 0, 'h'},
+		{"null-flush",		0, 0, 'z'}
 	};
 #endif
 
@@ -103,9 +105,9 @@
 	while(c != -1) {
 #if HAVE_GETOPT_LONG
 		int option_index;
-		c = getopt_long(argc, argv, "ds:f:tvh", long_options, &option_index);
+		c = getopt_long(argc, argv, "ds:f:tvhz", long_options, &option_index);
 #else
-		c = getopt(argc, argv, "ds:f:tvh");
+		c = getopt(argc, argv, "ds:f:tvhz");
 #endif		
 		if(c == -1) {
 			break;
@@ -139,7 +141,9 @@
 	
 				exit(EXIT_SUCCESS);
 				break;
-
+			case 'z':
+				nullFlush=true;
+				break;
 			case 'h':
 			default:
 				endProgram(argv[0]);
@@ -250,8 +254,10 @@
 
 	if(stream_format == 0) {
 		applicator = new CG3::GrammarApplicator(ux_stdin, ux_stdout, ux_stderr);
-	} else { 
-		applicator = new CG3::ApertiumApplicator(ux_stdin, ux_stdout, ux_stderr);
+	} else {
+		CG3::ApertiumApplicator* apertiumApplicator= new CG3::ApertiumApplicator(ux_stdin, ux_stdout, ux_stderr);
+		apertiumApplicator->setNullFlush(nullFlush);
+		applicator = apertiumApplicator;
 	}
 
 	applicator->setGrammar(&grammar);
Index: src/ApertiumApplicator.cpp
===================================================================
--- src/ApertiumApplicator.cpp	(revisión: 4855)
+++ src/ApertiumApplicator.cpp	(copia de trabajo)
@@ -29,10 +29,75 @@
 ApertiumApplicator::ApertiumApplicator(UFILE *ux_in, UFILE *ux_out, UFILE *ux_err) 
 	: GrammarApplicator(ux_in, ux_out, ux_err) 
 {
+	nullFlush=false;
+	runningWithNullFlush=false;
+	fgetc_converter=0;
+}
 
+
+bool ApertiumApplicator::getNullFlush()
+{
+	return nullFlush;
 }
 
+void ApertiumApplicator::setNullFlush(bool pNullFlush)
+{
+	nullFlush=pNullFlush;
+}
 
+UChar
+ApertiumApplicator::u_fgetc_wrapper(UFILE *input)
+{
+	if(runningWithNullFlush)
+	{
+		if(!fgetc_converter)
+		{
+			fgetc_converter = ucnv_open(ucnv_getDefaultName(),&fgetc_error);
+		}
+		int ch;
+		int result;
+		int inputsize=0;
+		
+		do
+		{
+			ch = fgetc(u_fgetfile(input));
+			if(ch==0)
+				return 0;
+			else
+			{	
+				fgetc_inputbuf[inputsize]=ch;
+				inputsize++;
+				fgetc_error=U_ZERO_ERROR;
+				result = ucnv_toUChars(fgetc_converter,fgetc_outputbuf,5,fgetc_inputbuf,inputsize,&fgetc_error);
+				if(U_FAILURE(fgetc_error))
+					u_fprintf(ux_stderr,"Error conversion: %d\n",fgetc_error);
+			}
+		}
+		while(( ((result>=1 && fgetc_outputbuf[0]==0xFFFD))  || result<1 || U_FAILURE(fgetc_error) ) && !u_feof(input) && inputsize<5);
+		if(fgetc_outputbuf[0]==0xFFFD && u_feof(input))
+			return U_EOF;
+		return fgetc_outputbuf[0];
+	}
+	else
+		return u_fgetc(input);
+ }
+ 
+ 
+int 
+ApertiumApplicator::runGrammarOnTextWrapperNullFlush(UFILE *input, UFILE *output)
+{
+	setNullFlush(false);
+	runningWithNullFlush=true;
+	while(!u_feof(input))
+	{
+		runGrammarOnText(input,output);
+		u_fputc('\0',output);
+		u_fflush(output);
+	}
+	runningWithNullFlush=false;
+	return 0;
+}
+
 /* 
  * Run a constraint grammar on an Apertium input stream
  */
@@ -40,6 +105,12 @@
 int
 ApertiumApplicator::runGrammarOnText(UFILE *input, UFILE *output) 
 {
+	if(getNullFlush())
+	{
+		return runGrammarOnTextWrapperNullFlush(input,output);
+	}
+	else
+	{
 	if (!input) {
 		u_fprintf(ux_stderr, "Error: Input is null - nothing to parse!\n");
 		CG3Quit(1);
@@ -97,7 +168,7 @@
 	gtimer = getticks();
 	ticks timer(gtimer);
 
-	while((inchar = u_fgetc(input)) != 0) { 
+	while((inchar = u_fgetc_wrapper(input)) != 0) { 
 		if(u_feof(input)) {
 			break;
 		}
@@ -235,7 +306,7 @@
 			// '>"' for internal processing.
 			wordform = ux_append(wordform, '<');
 			while(inchar != '/') {
-				inchar = u_fgetc(input); 
+				inchar = u_fgetc_wrapper(input); 
 
 				if(inchar != '/') {
 					wordform = ux_append(wordform, inchar);
@@ -258,7 +329,7 @@
 
 			// Read in the readings	
 			while(inchar != '$') {
-				inchar = u_fgetc(input);
+				inchar = u_fgetc_wrapper(input);
 
 	 			if(inchar == '$') { 
 					// Add the final reading of the cohort
@@ -377,6 +448,7 @@
 	grammar->total_time = elapsed(tmp, timer);
 
 	return 0;
+	}
 } // runGrammarOnText
 
 
