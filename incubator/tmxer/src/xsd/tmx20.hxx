// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX______SCHEMAS_TMX20_HXX
#define CXX______SCHEMAS_TMX20_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace tmx20
{
  class segtypes;
  class space;
  class assoc_type;
  class datatype;
  class paired_type;
  class placeholder_type;
  class term_type;
  class context_type;
  class Custom;
  class tmx;
  class body;
  class context;
  class external_file;
  class header;
  class inline_data;
  class internal_file;
  class note;
  class prop;
  class seg;
  class segmentation;
  class tag;
  class tu;
  class tuv;
  class bpt;
  class ept;
  class g;
  class hi;
  class ph;
  class sub;
  class x;
  class version;
  class context_type1;
  class datatype1;
  class type;
  class g_order;
  class i;
  class x1;
  class type1;
  class i1;
  class type2;
  class x2;
  class x3;
  class type3;
  class x4;
  class type4;
  class type5;
  class x5;
  class type6;
  class x6;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xml.hxx"

namespace tmx20
{
  class segtypes: public ::xml_schema::token
  {
    public:
    enum value
    {
      block,
      paragraph,
      sentence,
      phrase
    };

    segtypes (value v);

    segtypes (const char* v);

    segtypes (const ::std::string& v);

    segtypes (const ::xml_schema::token& v);

    segtypes (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    segtypes (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    segtypes (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    segtypes (const segtypes& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual segtypes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    segtypes&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_segtypes_convert ();
    }

    protected:
    value
    _xsd_segtypes_convert () const;

    public:
    static const char* const _xsd_segtypes_literals_[4];
    static const value _xsd_segtypes_indexes_[4];
  };

  class space: public ::xml_schema::token
  {
    public:
    enum value
    {
      default_,
      preserve
    };

    space (value v);

    space (const char* v);

    space (const ::std::string& v);

    space (const ::xml_schema::token& v);

    space (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    space (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    space (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    space (const space& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual space*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    space&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_space_convert ();
    }

    protected:
    value
    _xsd_space_convert () const;

    public:
    static const char* const _xsd_space_literals_[2];
    static const value _xsd_space_indexes_[2];
  };

  class assoc_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      p,
      f,
      b
    };

    assoc_type (value v);

    assoc_type (const char* v);

    assoc_type (const ::std::string& v);

    assoc_type (const ::xml_schema::token& v);

    assoc_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    assoc_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    assoc_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    assoc_type (const assoc_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual assoc_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    assoc_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_assoc_type_convert ();
    }

    protected:
    value
    _xsd_assoc_type_convert () const;

    public:
    static const char* const _xsd_assoc_type_literals_[3];
    static const value _xsd_assoc_type_indexes_[3];
  };

  class datatype: public ::xml_schema::token
  {
    public:
    enum value
    {
      unknown,
      undefined,
      alptext,
      cdf,
      cmx,
      cpp,
      hptag,
      html,
      interleaf,
      ipf,
      java,
      javascript,
      lisp,
      mif,
      opentag,
      pascal,
      plaintext,
      pm,
      resx,
      rtf,
      sgml,
      stf_f,
      stf_i,
      transit,
      vbscript,
      winres,
      xliff,
      xml,
      xptag
    };

    datatype (value v);

    datatype (const char* v);

    datatype (const ::std::string& v);

    datatype (const ::xml_schema::token& v);

    datatype (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    datatype (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    datatype (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    datatype (const datatype& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual datatype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    datatype&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_datatype_convert ();
    }

    protected:
    value
    _xsd_datatype_convert () const;

    public:
    static const char* const _xsd_datatype_literals_[29];
    static const value _xsd_datatype_indexes_[29];
  };

  class paired_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      bold,
      color,
      dulined,
      font,
      italic,
      link,
      scap,
      struct_,
      ulined,
      xliff_bpt,
      xliff_g
    };

    paired_type (value v);

    paired_type (const char* v);

    paired_type (const ::std::string& v);

    paired_type (const ::xml_schema::token& v);

    paired_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    paired_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    paired_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    paired_type (const paired_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual paired_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    paired_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_paired_type_convert ();
    }

    protected:
    value
    _xsd_paired_type_convert () const;

    public:
    static const char* const _xsd_paired_type_literals_[11];
    static const value _xsd_paired_type_indexes_[11];
  };

  class placeholder_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      index,
      date,
      time,
      fnote,
      enote,
      alt,
      image,
      pb,
      lb,
      cb,
      inset,
      xliff_bx,
      xliff_ex,
      xliff_it,
      xliff_ph,
      xliff_x
    };

    placeholder_type (value v);

    placeholder_type (const char* v);

    placeholder_type (const ::std::string& v);

    placeholder_type (const ::xml_schema::token& v);

    placeholder_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    placeholder_type (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    placeholder_type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    placeholder_type (const placeholder_type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual placeholder_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    placeholder_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_placeholder_type_convert ();
    }

    protected:
    value
    _xsd_placeholder_type_convert () const;

    public:
    static const char* const _xsd_placeholder_type_literals_[16];
    static const value _xsd_placeholder_type_indexes_[16];
  };

  class term_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      abbrev,
      abbreviated_form,
      abbreviation,
      acronym,
      appellation,
      collocation,
      common_name,
      datetime,
      equation,
      expanded_form,
      formula,
      head_term,
      initialism,
      international_scientific_term,
      internationalism,
      logical_expression,
      materials_management_unit,
      name,
      near_synonym,
      part_number,
      phrase,
      phraseological_unit,
      protected_,
      romanized_form,
      set_phrase,
      short_form,
      sku,
      standard_text,
      symbol,
      synonym,
      synonymous_phrase,
      term,
      transcribed_form,
      transliterated_form,
      truncated_term,
      variant
    };

    term_type (value v);

    term_type (const char* v);

    term_type (const ::std::string& v);

    term_type (const ::xml_schema::token& v);

    term_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    term_type (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    term_type (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    term_type (const term_type& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual term_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    term_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_term_type_convert ();
    }

    protected:
    value
    _xsd_term_type_convert () const;

    public:
    static const char* const _xsd_term_type_literals_[36];
    static const value _xsd_term_type_indexes_[36];
  };

  class context_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      database,
      element,
      elementtitle,
      linenumber,
      numparams,
      paramnotes,
      record,
      recordtitle,
      sourcefile
    };

    context_type (value v);

    context_type (const char* v);

    context_type (const ::std::string& v);

    context_type (const ::xml_schema::token& v);

    context_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    context_type (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    context_type (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    context_type (const context_type& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual context_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    context_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_context_type_convert ();
    }

    protected:
    value
    _xsd_context_type_convert () const;

    public:
    static const char* const _xsd_context_type_literals_[9];
    static const value _xsd_context_type_indexes_[9];
  };

  class Custom: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    Custom ();

    Custom (const char*);

    Custom (const ::std::string&);

    Custom (const ::xml_schema::string&);

    Custom (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Custom (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Custom (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Custom (const Custom& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Custom*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Custom ();
  };

  class tmx: public ::xml_schema::type
  {
    public:
    // header
    // 
    typedef ::tmx20::header header_type;
    typedef ::xsd::cxx::tree::traits< header_type, char > header_traits;

    const header_type&
    header () const;

    header_type&
    header ();

    void
    header (const header_type& x);

    void
    header (::std::auto_ptr< header_type > p);

    // body
    // 
    typedef ::tmx20::body body_type;
    typedef ::xsd::cxx::tree::traits< body_type, char > body_traits;

    const body_type&
    body () const;

    body_type&
    body ();

    void
    body (const body_type& x);

    void
    body (::std::auto_ptr< body_type > p);

    // version
    // 
    typedef ::tmx20::version version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::auto_ptr< version_type > p);

    // Constructors.
    //
    tmx (const header_type&,
         const body_type&,
         const version_type&);

    tmx (::std::auto_ptr< header_type >&,
         ::std::auto_ptr< body_type >&,
         const version_type&);

    tmx (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    tmx (const tmx& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual tmx*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tmx ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< header_type > header_;
    ::xsd::cxx::tree::one< body_type > body_;
    ::xsd::cxx::tree::one< version_type > version_;
  };

  class body: public ::xml_schema::type
  {
    public:
    // tu
    // 
    typedef ::tmx20::tu tu_type;
    typedef ::xsd::cxx::tree::sequence< tu_type > tu_sequence;
    typedef tu_sequence::iterator tu_iterator;
    typedef tu_sequence::const_iterator tu_const_iterator;
    typedef ::xsd::cxx::tree::traits< tu_type, char > tu_traits;

    const tu_sequence&
    tu () const;

    tu_sequence&
    tu ();

    void
    tu (const tu_sequence& s);

    // Constructors.
    //
    body ();

    body (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    body (const body& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual body*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~body ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tu_sequence tu_;
  };

  class context: public ::xml_schema::type
  {
    public:
    // context-type
    // 
    typedef ::tmx20::context_type1 context_type_type;
    typedef ::xsd::cxx::tree::traits< context_type_type, char > context_type_traits;

    const context_type_type&
    context_type () const;

    context_type_type&
    context_type ();

    void
    context_type (const context_type_type& x);

    void
    context_type (::std::auto_ptr< context_type_type > p);

    // Constructors.
    //
    context (const context_type_type&);

    context (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    context (const context& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual context*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~context ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< context_type_type > context_type_;
  };

  class external_file: public ::xml_schema::type
  {
    public:
    // href
    // 
    typedef ::xml_schema::simple_type href_type;
    typedef ::xsd::cxx::tree::traits< href_type, char > href_traits;

    const href_type&
    href () const;

    href_type&
    href ();

    void
    href (const href_type& x);

    void
    href (::std::auto_ptr< href_type > p);

    // crc
    // 
    typedef ::xml_schema::simple_type crc_type;
    typedef ::xsd::cxx::tree::optional< crc_type > crc_optional;
    typedef ::xsd::cxx::tree::traits< crc_type, char > crc_traits;

    const crc_optional&
    crc () const;

    crc_optional&
    crc ();

    void
    crc (const crc_type& x);

    void
    crc (const crc_optional& x);

    void
    crc (::std::auto_ptr< crc_type > p);

    // uid
    // 
    typedef ::xml_schema::simple_type uid_type;
    typedef ::xsd::cxx::tree::optional< uid_type > uid_optional;
    typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

    const uid_optional&
    uid () const;

    uid_optional&
    uid ();

    void
    uid (const uid_type& x);

    void
    uid (const uid_optional& x);

    void
    uid (::std::auto_ptr< uid_type > p);

    // Constructors.
    //
    external_file (const href_type&);

    external_file (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    external_file (const external_file& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual external_file*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~external_file ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< href_type > href_;
    crc_optional crc_;
    uid_optional uid_;
  };

  class header: public ::xml_schema::type
  {
    public:
    // note
    // 
    typedef ::tmx20::note note_type;
    typedef ::xsd::cxx::tree::sequence< note_type > note_sequence;
    typedef note_sequence::iterator note_iterator;
    typedef note_sequence::const_iterator note_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

    const note_sequence&
    note () const;

    note_sequence&
    note ();

    void
    note (const note_sequence& s);

    // prop
    // 
    typedef ::tmx20::prop prop_type;
    typedef ::xsd::cxx::tree::sequence< prop_type > prop_sequence;
    typedef prop_sequence::iterator prop_iterator;
    typedef prop_sequence::const_iterator prop_const_iterator;
    typedef ::xsd::cxx::tree::traits< prop_type, char > prop_traits;

    const prop_sequence&
    prop () const;

    prop_sequence&
    prop ();

    void
    prop (const prop_sequence& s);

    // inline-data
    // 
    typedef ::tmx20::inline_data inline_data_type;
    typedef ::xsd::cxx::tree::optional< inline_data_type > inline_data_optional;
    typedef ::xsd::cxx::tree::traits< inline_data_type, char > inline_data_traits;

    const inline_data_optional&
    inline_data () const;

    inline_data_optional&
    inline_data ();

    void
    inline_data (const inline_data_type& x);

    void
    inline_data (const inline_data_optional& x);

    void
    inline_data (::std::auto_ptr< inline_data_type > p);

    // segmentation
    // 
    typedef ::tmx20::segmentation segmentation_type;
    typedef ::xsd::cxx::tree::optional< segmentation_type > segmentation_optional;
    typedef ::xsd::cxx::tree::traits< segmentation_type, char > segmentation_traits;

    const segmentation_optional&
    segmentation () const;

    segmentation_optional&
    segmentation ();

    void
    segmentation (const segmentation_type& x);

    void
    segmentation (const segmentation_optional& x);

    void
    segmentation (::std::auto_ptr< segmentation_type > p);

    // creationtool
    // 
    typedef ::xml_schema::simple_type creationtool_type;
    typedef ::xsd::cxx::tree::traits< creationtool_type, char > creationtool_traits;

    const creationtool_type&
    creationtool () const;

    creationtool_type&
    creationtool ();

    void
    creationtool (const creationtool_type& x);

    void
    creationtool (::std::auto_ptr< creationtool_type > p);

    // creationtoolversion
    // 
    typedef ::xml_schema::simple_type creationtoolversion_type;
    typedef ::xsd::cxx::tree::traits< creationtoolversion_type, char > creationtoolversion_traits;

    const creationtoolversion_type&
    creationtoolversion () const;

    creationtoolversion_type&
    creationtoolversion ();

    void
    creationtoolversion (const creationtoolversion_type& x);

    void
    creationtoolversion (::std::auto_ptr< creationtoolversion_type > p);

    // segtype
    // 
    typedef ::tmx20::segtypes segtype_type;
    typedef ::xsd::cxx::tree::traits< segtype_type, char > segtype_traits;

    const segtype_type&
    segtype () const;

    segtype_type&
    segtype ();

    void
    segtype (const segtype_type& x);

    void
    segtype (::std::auto_ptr< segtype_type > p);

    // o-tmf
    // 
    typedef ::xml_schema::simple_type o_tmf_type;
    typedef ::xsd::cxx::tree::traits< o_tmf_type, char > o_tmf_traits;

    const o_tmf_type&
    o_tmf () const;

    o_tmf_type&
    o_tmf ();

    void
    o_tmf (const o_tmf_type& x);

    void
    o_tmf (::std::auto_ptr< o_tmf_type > p);

    // adminlang
    // 
    typedef ::xml_schema::simple_type adminlang_type;
    typedef ::xsd::cxx::tree::traits< adminlang_type, char > adminlang_traits;

    const adminlang_type&
    adminlang () const;

    adminlang_type&
    adminlang ();

    void
    adminlang (const adminlang_type& x);

    void
    adminlang (::std::auto_ptr< adminlang_type > p);

    // srclang
    // 
    typedef ::xml_schema::simple_type srclang_type;
    typedef ::xsd::cxx::tree::traits< srclang_type, char > srclang_traits;

    const srclang_type&
    srclang () const;

    srclang_type&
    srclang ();

    void
    srclang (const srclang_type& x);

    void
    srclang (::std::auto_ptr< srclang_type > p);

    // datatype
    // 
    typedef ::tmx20::datatype1 datatype_type;
    typedef ::xsd::cxx::tree::traits< datatype_type, char > datatype_traits;

    const datatype_type&
    datatype () const;

    datatype_type&
    datatype ();

    void
    datatype (const datatype_type& x);

    void
    datatype (::std::auto_ptr< datatype_type > p);

    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // creationdate
    // 
    typedef ::xml_schema::simple_type creationdate_type;
    typedef ::xsd::cxx::tree::optional< creationdate_type > creationdate_optional;
    typedef ::xsd::cxx::tree::traits< creationdate_type, char > creationdate_traits;

    const creationdate_optional&
    creationdate () const;

    creationdate_optional&
    creationdate ();

    void
    creationdate (const creationdate_type& x);

    void
    creationdate (const creationdate_optional& x);

    void
    creationdate (::std::auto_ptr< creationdate_type > p);

    // creationid
    // 
    typedef ::xml_schema::simple_type creationid_type;
    typedef ::xsd::cxx::tree::optional< creationid_type > creationid_optional;
    typedef ::xsd::cxx::tree::traits< creationid_type, char > creationid_traits;

    const creationid_optional&
    creationid () const;

    creationid_optional&
    creationid ();

    void
    creationid (const creationid_type& x);

    void
    creationid (const creationid_optional& x);

    void
    creationid (::std::auto_ptr< creationid_type > p);

    // changedate
    // 
    typedef ::xml_schema::simple_type changedate_type;
    typedef ::xsd::cxx::tree::optional< changedate_type > changedate_optional;
    typedef ::xsd::cxx::tree::traits< changedate_type, char > changedate_traits;

    const changedate_optional&
    changedate () const;

    changedate_optional&
    changedate ();

    void
    changedate (const changedate_type& x);

    void
    changedate (const changedate_optional& x);

    void
    changedate (::std::auto_ptr< changedate_type > p);

    // changeid
    // 
    typedef ::xml_schema::simple_type changeid_type;
    typedef ::xsd::cxx::tree::optional< changeid_type > changeid_optional;
    typedef ::xsd::cxx::tree::traits< changeid_type, char > changeid_traits;

    const changeid_optional&
    changeid () const;

    changeid_optional&
    changeid ();

    void
    changeid (const changeid_type& x);

    void
    changeid (const changeid_optional& x);

    void
    changeid (::std::auto_ptr< changeid_type > p);

    // Constructors.
    //
    header (const creationtool_type&,
            const creationtoolversion_type&,
            const segtype_type&,
            const o_tmf_type&,
            const adminlang_type&,
            const srclang_type&,
            const datatype_type&);

    header (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    header (const header& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual header*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~header ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    note_sequence note_;
    prop_sequence prop_;
    inline_data_optional inline_data_;
    segmentation_optional segmentation_;
    ::xsd::cxx::tree::one< creationtool_type > creationtool_;
    ::xsd::cxx::tree::one< creationtoolversion_type > creationtoolversion_;
    ::xsd::cxx::tree::one< segtype_type > segtype_;
    ::xsd::cxx::tree::one< o_tmf_type > o_tmf_;
    ::xsd::cxx::tree::one< adminlang_type > adminlang_;
    ::xsd::cxx::tree::one< srclang_type > srclang_;
    ::xsd::cxx::tree::one< datatype_type > datatype_;
    o_encoding_optional o_encoding_;
    creationdate_optional creationdate_;
    creationid_optional creationid_;
    changedate_optional changedate_;
    changeid_optional changeid_;
  };

  class inline_data: public ::xml_schema::type
  {
    public:
    // tag
    // 
    typedef ::tmx20::tag tag_type;
    typedef ::xsd::cxx::tree::sequence< tag_type > tag_sequence;
    typedef tag_sequence::iterator tag_iterator;
    typedef tag_sequence::const_iterator tag_const_iterator;
    typedef ::xsd::cxx::tree::traits< tag_type, char > tag_traits;

    const tag_sequence&
    tag () const;

    tag_sequence&
    tag ();

    void
    tag (const tag_sequence& s);

    // Constructors.
    //
    inline_data ();

    inline_data (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    inline_data (const inline_data& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual inline_data*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~inline_data ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tag_sequence tag_;
  };

  class internal_file: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    internal_file ();

    internal_file (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    internal_file (const internal_file& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual internal_file*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~internal_file ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
  };

  class note: public ::xml_schema::type
  {
    public:
    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // lang
    // 
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // creationdate
    // 
    typedef ::xml_schema::simple_type creationdate_type;
    typedef ::xsd::cxx::tree::optional< creationdate_type > creationdate_optional;
    typedef ::xsd::cxx::tree::traits< creationdate_type, char > creationdate_traits;

    const creationdate_optional&
    creationdate () const;

    creationdate_optional&
    creationdate ();

    void
    creationdate (const creationdate_type& x);

    void
    creationdate (const creationdate_optional& x);

    void
    creationdate (::std::auto_ptr< creationdate_type > p);

    // creationid
    // 
    typedef ::xml_schema::simple_type creationid_type;
    typedef ::xsd::cxx::tree::optional< creationid_type > creationid_optional;
    typedef ::xsd::cxx::tree::traits< creationid_type, char > creationid_traits;

    const creationid_optional&
    creationid () const;

    creationid_optional&
    creationid ();

    void
    creationid (const creationid_type& x);

    void
    creationid (const creationid_optional& x);

    void
    creationid (::std::auto_ptr< creationid_type > p);

    // changedate
    // 
    typedef ::xml_schema::simple_type changedate_type;
    typedef ::xsd::cxx::tree::optional< changedate_type > changedate_optional;
    typedef ::xsd::cxx::tree::traits< changedate_type, char > changedate_traits;

    const changedate_optional&
    changedate () const;

    changedate_optional&
    changedate ();

    void
    changedate (const changedate_type& x);

    void
    changedate (const changedate_optional& x);

    void
    changedate (::std::auto_ptr< changedate_type > p);

    // changeid
    // 
    typedef ::xml_schema::simple_type changeid_type;
    typedef ::xsd::cxx::tree::optional< changeid_type > changeid_optional;
    typedef ::xsd::cxx::tree::traits< changeid_type, char > changeid_traits;

    const changeid_optional&
    changeid () const;

    changeid_optional&
    changeid ();

    void
    changeid (const changeid_type& x);

    void
    changeid (const changeid_optional& x);

    void
    changeid (::std::auto_ptr< changeid_type > p);

    // Constructors.
    //
    note ();

    note (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    note (const note& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual note*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~note ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    o_encoding_optional o_encoding_;
    lang_optional lang_;
    creationdate_optional creationdate_;
    creationid_optional creationid_;
    changedate_optional changedate_;
    changeid_optional changeid_;
  };

  class prop: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::simple_type name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // lang
    // 
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // Constructors.
    //
    prop (const name_type&);

    prop (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    prop (const prop& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual prop*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~prop ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    lang_optional lang_;
    o_encoding_optional o_encoding_;
  };

  class seg: public ::xml_schema::type
  {
    public:
    // bpt
    // 
    typedef ::tmx20::bpt bpt_type;
    typedef ::xsd::cxx::tree::sequence< bpt_type > bpt_sequence;
    typedef bpt_sequence::iterator bpt_iterator;
    typedef bpt_sequence::const_iterator bpt_const_iterator;
    typedef ::xsd::cxx::tree::traits< bpt_type, char > bpt_traits;

    const bpt_sequence&
    bpt () const;

    bpt_sequence&
    bpt ();

    void
    bpt (const bpt_sequence& s);

    // ept
    // 
    typedef ::tmx20::ept ept_type;
    typedef ::xsd::cxx::tree::sequence< ept_type > ept_sequence;
    typedef ept_sequence::iterator ept_iterator;
    typedef ept_sequence::const_iterator ept_const_iterator;
    typedef ::xsd::cxx::tree::traits< ept_type, char > ept_traits;

    const ept_sequence&
    ept () const;

    ept_sequence&
    ept ();

    void
    ept (const ept_sequence& s);

    // ph
    // 
    typedef ::tmx20::ph ph_type;
    typedef ::xsd::cxx::tree::sequence< ph_type > ph_sequence;
    typedef ph_sequence::iterator ph_iterator;
    typedef ph_sequence::const_iterator ph_const_iterator;
    typedef ::xsd::cxx::tree::traits< ph_type, char > ph_traits;

    const ph_sequence&
    ph () const;

    ph_sequence&
    ph ();

    void
    ph (const ph_sequence& s);

    // hi
    // 
    typedef ::tmx20::hi hi_type;
    typedef ::xsd::cxx::tree::sequence< hi_type > hi_sequence;
    typedef hi_sequence::iterator hi_iterator;
    typedef hi_sequence::const_iterator hi_const_iterator;
    typedef ::xsd::cxx::tree::traits< hi_type, char > hi_traits;

    const hi_sequence&
    hi () const;

    hi_sequence&
    hi ();

    void
    hi (const hi_sequence& s);

    // x
    // 
    typedef ::tmx20::x x_type;
    typedef ::xsd::cxx::tree::sequence< x_type > x_sequence;
    typedef x_sequence::iterator x_iterator;
    typedef x_sequence::const_iterator x_const_iterator;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_sequence&
    x () const;

    x_sequence&
    x ();

    void
    x (const x_sequence& s);

    // g
    // 
    typedef ::tmx20::g g_type;
    typedef ::xsd::cxx::tree::sequence< g_type > g_sequence;
    typedef g_sequence::iterator g_iterator;
    typedef g_sequence::const_iterator g_const_iterator;
    typedef ::xsd::cxx::tree::traits< g_type, char > g_traits;

    const g_sequence&
    g () const;

    g_sequence&
    g ();

    void
    g (const g_sequence& s);

    // space
    // 
    typedef ::namespace_::space space_type;
    typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

    const space_type&
    space () const;

    space_type&
    space ();

    void
    space (const space_type& x);

    void
    space (::std::auto_ptr< space_type > p);

    static const space_type&
    space_default_value ();

    // Constructors.
    //
    seg ();

    seg (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    seg (const seg& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual seg*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~seg ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    bpt_sequence bpt_;
    ept_sequence ept_;
    ph_sequence ph_;
    hi_sequence hi_;
    x_sequence x_;
    g_sequence g_;
    ::xsd::cxx::tree::one< space_type > space_;
    static const space_type space_default_value_;
  };

  class segmentation: public ::xml_schema::type
  {
    public:
    // internal-file
    // 
    typedef ::tmx20::internal_file internal_file_type;
    typedef ::xsd::cxx::tree::optional< internal_file_type > internal_file_optional;
    typedef ::xsd::cxx::tree::traits< internal_file_type, char > internal_file_traits;

    const internal_file_optional&
    internal_file () const;

    internal_file_optional&
    internal_file ();

    void
    internal_file (const internal_file_type& x);

    void
    internal_file (const internal_file_optional& x);

    void
    internal_file (::std::auto_ptr< internal_file_type > p);

    // external-file
    // 
    typedef ::tmx20::external_file external_file_type;
    typedef ::xsd::cxx::tree::optional< external_file_type > external_file_optional;
    typedef ::xsd::cxx::tree::traits< external_file_type, char > external_file_traits;

    const external_file_optional&
    external_file () const;

    external_file_optional&
    external_file ();

    void
    external_file (const external_file_type& x);

    void
    external_file (const external_file_optional& x);

    void
    external_file (::std::auto_ptr< external_file_type > p);

    // Constructors.
    //
    segmentation ();

    segmentation (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    segmentation (const segmentation& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual segmentation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~segmentation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    internal_file_optional internal_file_;
    external_file_optional external_file_;
  };

  class tag: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // endmrk
    // 
    typedef ::xml_schema::simple_type endmrk_type;
    typedef ::xsd::cxx::tree::optional< endmrk_type > endmrk_optional;
    typedef ::xsd::cxx::tree::traits< endmrk_type, char > endmrk_traits;

    const endmrk_optional&
    endmrk () const;

    endmrk_optional&
    endmrk ();

    void
    endmrk (const endmrk_type& x);

    void
    endmrk (const endmrk_optional& x);

    void
    endmrk (::std::auto_ptr< endmrk_type > p);

    // type
    // 
    typedef ::tmx20::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // Constructors.
    //
    tag (const id_type&,
         const type_type&);

    tag (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    tag (const tag& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual tag*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tag ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    endmrk_optional endmrk_;
    ::xsd::cxx::tree::one< type_type > type_;
    o_encoding_optional o_encoding_;
  };

  class tu: public ::xml_schema::type
  {
    public:
    // note
    // 
    typedef ::tmx20::note note_type;
    typedef ::xsd::cxx::tree::sequence< note_type > note_sequence;
    typedef note_sequence::iterator note_iterator;
    typedef note_sequence::const_iterator note_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

    const note_sequence&
    note () const;

    note_sequence&
    note ();

    void
    note (const note_sequence& s);

    // prop
    // 
    typedef ::tmx20::prop prop_type;
    typedef ::xsd::cxx::tree::sequence< prop_type > prop_sequence;
    typedef prop_sequence::iterator prop_iterator;
    typedef prop_sequence::const_iterator prop_const_iterator;
    typedef ::xsd::cxx::tree::traits< prop_type, char > prop_traits;

    const prop_sequence&
    prop () const;

    prop_sequence&
    prop ();

    void
    prop (const prop_sequence& s);

    // context
    // 
    typedef ::tmx20::context context_type;
    typedef ::xsd::cxx::tree::sequence< context_type > context_sequence;
    typedef context_sequence::iterator context_iterator;
    typedef context_sequence::const_iterator context_const_iterator;
    typedef ::xsd::cxx::tree::traits< context_type, char > context_traits;

    const context_sequence&
    context () const;

    context_sequence&
    context ();

    void
    context (const context_sequence& s);

    // tuv
    // 
    typedef ::tmx20::tuv tuv_type;
    typedef ::xsd::cxx::tree::sequence< tuv_type > tuv_sequence;
    typedef tuv_sequence::iterator tuv_iterator;
    typedef tuv_sequence::const_iterator tuv_const_iterator;
    typedef ::xsd::cxx::tree::traits< tuv_type, char > tuv_traits;

    const tuv_sequence&
    tuv () const;

    tuv_sequence&
    tuv ();

    void
    tuv (const tuv_sequence& s);

    // tuid
    // 
    typedef ::xml_schema::simple_type tuid_type;
    typedef ::xsd::cxx::tree::optional< tuid_type > tuid_optional;
    typedef ::xsd::cxx::tree::traits< tuid_type, char > tuid_traits;

    const tuid_optional&
    tuid () const;

    tuid_optional&
    tuid ();

    void
    tuid (const tuid_type& x);

    void
    tuid (const tuid_optional& x);

    void
    tuid (::std::auto_ptr< tuid_type > p);

    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // datatype
    // 
    typedef ::tmx20::datatype datatype_type;
    typedef ::xsd::cxx::tree::traits< datatype_type, char > datatype_traits;

    const datatype_type&
    datatype () const;

    datatype_type&
    datatype ();

    void
    datatype (const datatype_type& x);

    void
    datatype (::std::auto_ptr< datatype_type > p);

    static const datatype_type&
    datatype_default_value ();

    // usagecount
    // 
    typedef ::xml_schema::simple_type usagecount_type;
    typedef ::xsd::cxx::tree::optional< usagecount_type > usagecount_optional;
    typedef ::xsd::cxx::tree::traits< usagecount_type, char > usagecount_traits;

    const usagecount_optional&
    usagecount () const;

    usagecount_optional&
    usagecount ();

    void
    usagecount (const usagecount_type& x);

    void
    usagecount (const usagecount_optional& x);

    void
    usagecount (::std::auto_ptr< usagecount_type > p);

    // lastusagedate
    // 
    typedef ::xml_schema::simple_type lastusagedate_type;
    typedef ::xsd::cxx::tree::optional< lastusagedate_type > lastusagedate_optional;
    typedef ::xsd::cxx::tree::traits< lastusagedate_type, char > lastusagedate_traits;

    const lastusagedate_optional&
    lastusagedate () const;

    lastusagedate_optional&
    lastusagedate ();

    void
    lastusagedate (const lastusagedate_type& x);

    void
    lastusagedate (const lastusagedate_optional& x);

    void
    lastusagedate (::std::auto_ptr< lastusagedate_type > p);

    // creationtool
    // 
    typedef ::xml_schema::simple_type creationtool_type;
    typedef ::xsd::cxx::tree::optional< creationtool_type > creationtool_optional;
    typedef ::xsd::cxx::tree::traits< creationtool_type, char > creationtool_traits;

    const creationtool_optional&
    creationtool () const;

    creationtool_optional&
    creationtool ();

    void
    creationtool (const creationtool_type& x);

    void
    creationtool (const creationtool_optional& x);

    void
    creationtool (::std::auto_ptr< creationtool_type > p);

    // creationtoolversion
    // 
    typedef ::xml_schema::simple_type creationtoolversion_type;
    typedef ::xsd::cxx::tree::optional< creationtoolversion_type > creationtoolversion_optional;
    typedef ::xsd::cxx::tree::traits< creationtoolversion_type, char > creationtoolversion_traits;

    const creationtoolversion_optional&
    creationtoolversion () const;

    creationtoolversion_optional&
    creationtoolversion ();

    void
    creationtoolversion (const creationtoolversion_type& x);

    void
    creationtoolversion (const creationtoolversion_optional& x);

    void
    creationtoolversion (::std::auto_ptr< creationtoolversion_type > p);

    // creationdate
    // 
    typedef ::xml_schema::simple_type creationdate_type;
    typedef ::xsd::cxx::tree::optional< creationdate_type > creationdate_optional;
    typedef ::xsd::cxx::tree::traits< creationdate_type, char > creationdate_traits;

    const creationdate_optional&
    creationdate () const;

    creationdate_optional&
    creationdate ();

    void
    creationdate (const creationdate_type& x);

    void
    creationdate (const creationdate_optional& x);

    void
    creationdate (::std::auto_ptr< creationdate_type > p);

    // creationid
    // 
    typedef ::xml_schema::simple_type creationid_type;
    typedef ::xsd::cxx::tree::optional< creationid_type > creationid_optional;
    typedef ::xsd::cxx::tree::traits< creationid_type, char > creationid_traits;

    const creationid_optional&
    creationid () const;

    creationid_optional&
    creationid ();

    void
    creationid (const creationid_type& x);

    void
    creationid (const creationid_optional& x);

    void
    creationid (::std::auto_ptr< creationid_type > p);

    // changedate
    // 
    typedef ::xml_schema::simple_type changedate_type;
    typedef ::xsd::cxx::tree::optional< changedate_type > changedate_optional;
    typedef ::xsd::cxx::tree::traits< changedate_type, char > changedate_traits;

    const changedate_optional&
    changedate () const;

    changedate_optional&
    changedate ();

    void
    changedate (const changedate_type& x);

    void
    changedate (const changedate_optional& x);

    void
    changedate (::std::auto_ptr< changedate_type > p);

    // segtype
    // 
    typedef ::tmx20::segtypes segtype_type;
    typedef ::xsd::cxx::tree::optional< segtype_type > segtype_optional;
    typedef ::xsd::cxx::tree::traits< segtype_type, char > segtype_traits;

    const segtype_optional&
    segtype () const;

    segtype_optional&
    segtype ();

    void
    segtype (const segtype_type& x);

    void
    segtype (const segtype_optional& x);

    void
    segtype (::std::auto_ptr< segtype_type > p);

    // changeid
    // 
    typedef ::xml_schema::simple_type changeid_type;
    typedef ::xsd::cxx::tree::optional< changeid_type > changeid_optional;
    typedef ::xsd::cxx::tree::traits< changeid_type, char > changeid_traits;

    const changeid_optional&
    changeid () const;

    changeid_optional&
    changeid ();

    void
    changeid (const changeid_type& x);

    void
    changeid (const changeid_optional& x);

    void
    changeid (::std::auto_ptr< changeid_type > p);

    // o-tmf
    // 
    typedef ::xml_schema::simple_type o_tmf_type;
    typedef ::xsd::cxx::tree::optional< o_tmf_type > o_tmf_optional;
    typedef ::xsd::cxx::tree::traits< o_tmf_type, char > o_tmf_traits;

    const o_tmf_optional&
    o_tmf () const;

    o_tmf_optional&
    o_tmf ();

    void
    o_tmf (const o_tmf_type& x);

    void
    o_tmf (const o_tmf_optional& x);

    void
    o_tmf (::std::auto_ptr< o_tmf_type > p);

    // srclang
    // 
    typedef ::xml_schema::simple_type srclang_type;
    typedef ::xsd::cxx::tree::optional< srclang_type > srclang_optional;
    typedef ::xsd::cxx::tree::traits< srclang_type, char > srclang_traits;

    const srclang_optional&
    srclang () const;

    srclang_optional&
    srclang ();

    void
    srclang (const srclang_type& x);

    void
    srclang (const srclang_optional& x);

    void
    srclang (::std::auto_ptr< srclang_type > p);

    // group
    // 
    typedef ::xml_schema::simple_type group_type;
    typedef ::xsd::cxx::tree::optional< group_type > group_optional;
    typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

    const group_optional&
    group () const;

    group_optional&
    group ();

    void
    group (const group_type& x);

    void
    group (const group_optional& x);

    void
    group (::std::auto_ptr< group_type > p);

    // g-order
    // 
    typedef ::tmx20::g_order g_order_type;
    typedef ::xsd::cxx::tree::optional< g_order_type > g_order_optional;
    typedef ::xsd::cxx::tree::traits< g_order_type, char > g_order_traits;

    const g_order_optional&
    g_order () const;

    g_order_optional&
    g_order ();

    void
    g_order (const g_order_type& x);

    void
    g_order (const g_order_optional& x);

    void
    g_order (::std::auto_ptr< g_order_type > p);

    // Constructors.
    //
    tu ();

    tu (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    tu (const tu& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual tu*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tu ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    note_sequence note_;
    prop_sequence prop_;
    context_sequence context_;
    tuv_sequence tuv_;
    tuid_optional tuid_;
    o_encoding_optional o_encoding_;
    ::xsd::cxx::tree::one< datatype_type > datatype_;
    static const datatype_type datatype_default_value_;
    usagecount_optional usagecount_;
    lastusagedate_optional lastusagedate_;
    creationtool_optional creationtool_;
    creationtoolversion_optional creationtoolversion_;
    creationdate_optional creationdate_;
    creationid_optional creationid_;
    changedate_optional changedate_;
    segtype_optional segtype_;
    changeid_optional changeid_;
    o_tmf_optional o_tmf_;
    srclang_optional srclang_;
    group_optional group_;
    g_order_optional g_order_;
  };

  class tuv: public ::xml_schema::type
  {
    public:
    // note
    // 
    typedef ::tmx20::note note_type;
    typedef ::xsd::cxx::tree::sequence< note_type > note_sequence;
    typedef note_sequence::iterator note_iterator;
    typedef note_sequence::const_iterator note_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

    const note_sequence&
    note () const;

    note_sequence&
    note ();

    void
    note (const note_sequence& s);

    // prop
    // 
    typedef ::tmx20::prop prop_type;
    typedef ::xsd::cxx::tree::sequence< prop_type > prop_sequence;
    typedef prop_sequence::iterator prop_iterator;
    typedef prop_sequence::const_iterator prop_const_iterator;
    typedef ::xsd::cxx::tree::traits< prop_type, char > prop_traits;

    const prop_sequence&
    prop () const;

    prop_sequence&
    prop ();

    void
    prop (const prop_sequence& s);

    // seg
    // 
    typedef ::tmx20::seg seg_type;
    typedef ::xsd::cxx::tree::traits< seg_type, char > seg_traits;

    const seg_type&
    seg () const;

    seg_type&
    seg ();

    void
    seg (const seg_type& x);

    void
    seg (::std::auto_ptr< seg_type > p);

    // lang
    // 
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_type&
    lang () const;

    lang_type&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // o-encoding
    // 
    typedef ::xml_schema::simple_type o_encoding_type;
    typedef ::xsd::cxx::tree::optional< o_encoding_type > o_encoding_optional;
    typedef ::xsd::cxx::tree::traits< o_encoding_type, char > o_encoding_traits;

    const o_encoding_optional&
    o_encoding () const;

    o_encoding_optional&
    o_encoding ();

    void
    o_encoding (const o_encoding_type& x);

    void
    o_encoding (const o_encoding_optional& x);

    void
    o_encoding (::std::auto_ptr< o_encoding_type > p);

    // datatype
    // 
    typedef ::tmx20::datatype datatype_type;
    typedef ::xsd::cxx::tree::traits< datatype_type, char > datatype_traits;

    const datatype_type&
    datatype () const;

    datatype_type&
    datatype ();

    void
    datatype (const datatype_type& x);

    void
    datatype (::std::auto_ptr< datatype_type > p);

    static const datatype_type&
    datatype_default_value ();

    // usagecount
    // 
    typedef ::xml_schema::simple_type usagecount_type;
    typedef ::xsd::cxx::tree::optional< usagecount_type > usagecount_optional;
    typedef ::xsd::cxx::tree::traits< usagecount_type, char > usagecount_traits;

    const usagecount_optional&
    usagecount () const;

    usagecount_optional&
    usagecount ();

    void
    usagecount (const usagecount_type& x);

    void
    usagecount (const usagecount_optional& x);

    void
    usagecount (::std::auto_ptr< usagecount_type > p);

    // lastusagedate
    // 
    typedef ::xml_schema::simple_type lastusagedate_type;
    typedef ::xsd::cxx::tree::optional< lastusagedate_type > lastusagedate_optional;
    typedef ::xsd::cxx::tree::traits< lastusagedate_type, char > lastusagedate_traits;

    const lastusagedate_optional&
    lastusagedate () const;

    lastusagedate_optional&
    lastusagedate ();

    void
    lastusagedate (const lastusagedate_type& x);

    void
    lastusagedate (const lastusagedate_optional& x);

    void
    lastusagedate (::std::auto_ptr< lastusagedate_type > p);

    // creationtool
    // 
    typedef ::xml_schema::simple_type creationtool_type;
    typedef ::xsd::cxx::tree::optional< creationtool_type > creationtool_optional;
    typedef ::xsd::cxx::tree::traits< creationtool_type, char > creationtool_traits;

    const creationtool_optional&
    creationtool () const;

    creationtool_optional&
    creationtool ();

    void
    creationtool (const creationtool_type& x);

    void
    creationtool (const creationtool_optional& x);

    void
    creationtool (::std::auto_ptr< creationtool_type > p);

    // creationtoolversion
    // 
    typedef ::xml_schema::simple_type creationtoolversion_type;
    typedef ::xsd::cxx::tree::optional< creationtoolversion_type > creationtoolversion_optional;
    typedef ::xsd::cxx::tree::traits< creationtoolversion_type, char > creationtoolversion_traits;

    const creationtoolversion_optional&
    creationtoolversion () const;

    creationtoolversion_optional&
    creationtoolversion ();

    void
    creationtoolversion (const creationtoolversion_type& x);

    void
    creationtoolversion (const creationtoolversion_optional& x);

    void
    creationtoolversion (::std::auto_ptr< creationtoolversion_type > p);

    // creationdate
    // 
    typedef ::xml_schema::simple_type creationdate_type;
    typedef ::xsd::cxx::tree::optional< creationdate_type > creationdate_optional;
    typedef ::xsd::cxx::tree::traits< creationdate_type, char > creationdate_traits;

    const creationdate_optional&
    creationdate () const;

    creationdate_optional&
    creationdate ();

    void
    creationdate (const creationdate_type& x);

    void
    creationdate (const creationdate_optional& x);

    void
    creationdate (::std::auto_ptr< creationdate_type > p);

    // creationid
    // 
    typedef ::xml_schema::simple_type creationid_type;
    typedef ::xsd::cxx::tree::optional< creationid_type > creationid_optional;
    typedef ::xsd::cxx::tree::traits< creationid_type, char > creationid_traits;

    const creationid_optional&
    creationid () const;

    creationid_optional&
    creationid ();

    void
    creationid (const creationid_type& x);

    void
    creationid (const creationid_optional& x);

    void
    creationid (::std::auto_ptr< creationid_type > p);

    // changedate
    // 
    typedef ::xml_schema::simple_type changedate_type;
    typedef ::xsd::cxx::tree::optional< changedate_type > changedate_optional;
    typedef ::xsd::cxx::tree::traits< changedate_type, char > changedate_traits;

    const changedate_optional&
    changedate () const;

    changedate_optional&
    changedate ();

    void
    changedate (const changedate_type& x);

    void
    changedate (const changedate_optional& x);

    void
    changedate (::std::auto_ptr< changedate_type > p);

    // o-tmf
    // 
    typedef ::xml_schema::simple_type o_tmf_type;
    typedef ::xsd::cxx::tree::optional< o_tmf_type > o_tmf_optional;
    typedef ::xsd::cxx::tree::traits< o_tmf_type, char > o_tmf_traits;

    const o_tmf_optional&
    o_tmf () const;

    o_tmf_optional&
    o_tmf ();

    void
    o_tmf (const o_tmf_type& x);

    void
    o_tmf (const o_tmf_optional& x);

    void
    o_tmf (::std::auto_ptr< o_tmf_type > p);

    // changeid
    // 
    typedef ::xml_schema::simple_type changeid_type;
    typedef ::xsd::cxx::tree::optional< changeid_type > changeid_optional;
    typedef ::xsd::cxx::tree::traits< changeid_type, char > changeid_traits;

    const changeid_optional&
    changeid () const;

    changeid_optional&
    changeid ();

    void
    changeid (const changeid_type& x);

    void
    changeid (const changeid_optional& x);

    void
    changeid (::std::auto_ptr< changeid_type > p);

    // Constructors.
    //
    tuv (const seg_type&,
         const lang_type&);

    tuv (::std::auto_ptr< seg_type >&,
         const lang_type&);

    tuv (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    tuv (const tuv& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual tuv*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tuv ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    note_sequence note_;
    prop_sequence prop_;
    ::xsd::cxx::tree::one< seg_type > seg_;
    ::xsd::cxx::tree::one< lang_type > lang_;
    o_encoding_optional o_encoding_;
    ::xsd::cxx::tree::one< datatype_type > datatype_;
    static const datatype_type datatype_default_value_;
    usagecount_optional usagecount_;
    lastusagedate_optional lastusagedate_;
    creationtool_optional creationtool_;
    creationtoolversion_optional creationtoolversion_;
    creationdate_optional creationdate_;
    creationid_optional creationid_;
    changedate_optional changedate_;
    o_tmf_optional o_tmf_;
    changeid_optional changeid_;
  };

  class bpt: public ::xml_schema::type
  {
    public:
    // sub
    // 
    typedef ::tmx20::sub sub_type;
    typedef ::xsd::cxx::tree::sequence< sub_type > sub_sequence;
    typedef sub_sequence::iterator sub_iterator;
    typedef sub_sequence::const_iterator sub_const_iterator;
    typedef ::xsd::cxx::tree::traits< sub_type, char > sub_traits;

    const sub_sequence&
    sub () const;

    sub_sequence&
    sub ();

    void
    sub (const sub_sequence& s);

    // i
    // 
    typedef ::tmx20::i i_type;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_type&
    i () const;

    i_type&
    i ();

    void
    i (const i_type& x);

    void
    i (::std::auto_ptr< i_type > p);

    // x
    // 
    typedef ::tmx20::x1 x_type;
    typedef ::xsd::cxx::tree::optional< x_type > x_optional;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_optional&
    x () const;

    x_optional&
    x ();

    void
    x (const x_type& x);

    void
    x (const x_optional& x);

    void
    x (::std::auto_ptr< x_type > p);

    // equiv-text
    // 
    typedef ::xml_schema::simple_type equiv_text_type;
    typedef ::xsd::cxx::tree::optional< equiv_text_type > equiv_text_optional;
    typedef ::xsd::cxx::tree::traits< equiv_text_type, char > equiv_text_traits;

    const equiv_text_optional&
    equiv_text () const;

    equiv_text_optional&
    equiv_text ();

    void
    equiv_text (const equiv_text_type& x);

    void
    equiv_text (const equiv_text_optional& x);

    void
    equiv_text (::std::auto_ptr< equiv_text_type > p);

    // type
    // 
    typedef ::tmx20::type1 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // Constructors.
    //
    bpt (const i_type&,
         const type_type&);

    bpt (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    bpt (const bpt& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual bpt*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~bpt ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sub_sequence sub_;
    ::xsd::cxx::tree::one< i_type > i_;
    x_optional x_;
    equiv_text_optional equiv_text_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class ept: public ::xml_schema::type
  {
    public:
    // sub
    // 
    typedef ::tmx20::sub sub_type;
    typedef ::xsd::cxx::tree::sequence< sub_type > sub_sequence;
    typedef sub_sequence::iterator sub_iterator;
    typedef sub_sequence::const_iterator sub_const_iterator;
    typedef ::xsd::cxx::tree::traits< sub_type, char > sub_traits;

    const sub_sequence&
    sub () const;

    sub_sequence&
    sub ();

    void
    sub (const sub_sequence& s);

    // i
    // 
    typedef ::tmx20::i1 i_type;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_type&
    i () const;

    i_type&
    i ();

    void
    i (const i_type& x);

    void
    i (::std::auto_ptr< i_type > p);

    // equiv-text
    // 
    typedef ::xml_schema::simple_type equiv_text_type;
    typedef ::xsd::cxx::tree::optional< equiv_text_type > equiv_text_optional;
    typedef ::xsd::cxx::tree::traits< equiv_text_type, char > equiv_text_traits;

    const equiv_text_optional&
    equiv_text () const;

    equiv_text_optional&
    equiv_text ();

    void
    equiv_text (const equiv_text_type& x);

    void
    equiv_text (const equiv_text_optional& x);

    void
    equiv_text (::std::auto_ptr< equiv_text_type > p);

    // Constructors.
    //
    ept (const i_type&);

    ept (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    ept (const ept& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual ept*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ept ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sub_sequence sub_;
    ::xsd::cxx::tree::one< i_type > i_;
    equiv_text_optional equiv_text_;
  };

  class g: public ::xml_schema::type
  {
    public:
    // xid
    // 
    typedef ::xml_schema::idref xid_type;
    typedef ::xsd::cxx::tree::traits< xid_type, char > xid_traits;

    const xid_type&
    xid () const;

    xid_type&
    xid ();

    void
    xid (const xid_type& x);

    void
    xid (::std::auto_ptr< xid_type > p);

    // type
    // 
    typedef ::tmx20::type2 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // equiv-text
    // 
    typedef ::xml_schema::simple_type equiv_text_type;
    typedef ::xsd::cxx::tree::optional< equiv_text_type > equiv_text_optional;
    typedef ::xsd::cxx::tree::traits< equiv_text_type, char > equiv_text_traits;

    const equiv_text_optional&
    equiv_text () const;

    equiv_text_optional&
    equiv_text ();

    void
    equiv_text (const equiv_text_type& x);

    void
    equiv_text (const equiv_text_optional& x);

    void
    equiv_text (::std::auto_ptr< equiv_text_type > p);

    // x
    // 
    typedef ::tmx20::x2 x_type;
    typedef ::xsd::cxx::tree::optional< x_type > x_optional;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_optional&
    x () const;

    x_optional&
    x ();

    void
    x (const x_type& x);

    void
    x (const x_optional& x);

    void
    x (::std::auto_ptr< x_type > p);

    // Constructors.
    //
    g (const xid_type&,
       const type_type&);

    g (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    g (const g& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    virtual g*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~g ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< xid_type > xid_;
    ::xsd::cxx::tree::one< type_type > type_;
    equiv_text_optional equiv_text_;
    x_optional x_;
  };

  class hi: public ::xml_schema::type
  {
    public:
    // bpt
    // 
    typedef ::tmx20::bpt bpt_type;
    typedef ::xsd::cxx::tree::sequence< bpt_type > bpt_sequence;
    typedef bpt_sequence::iterator bpt_iterator;
    typedef bpt_sequence::const_iterator bpt_const_iterator;
    typedef ::xsd::cxx::tree::traits< bpt_type, char > bpt_traits;

    const bpt_sequence&
    bpt () const;

    bpt_sequence&
    bpt ();

    void
    bpt (const bpt_sequence& s);

    // ept
    // 
    typedef ::tmx20::ept ept_type;
    typedef ::xsd::cxx::tree::sequence< ept_type > ept_sequence;
    typedef ept_sequence::iterator ept_iterator;
    typedef ept_sequence::const_iterator ept_const_iterator;
    typedef ::xsd::cxx::tree::traits< ept_type, char > ept_traits;

    const ept_sequence&
    ept () const;

    ept_sequence&
    ept ();

    void
    ept (const ept_sequence& s);

    // ph
    // 
    typedef ::tmx20::ph ph_type;
    typedef ::xsd::cxx::tree::sequence< ph_type > ph_sequence;
    typedef ph_sequence::iterator ph_iterator;
    typedef ph_sequence::const_iterator ph_const_iterator;
    typedef ::xsd::cxx::tree::traits< ph_type, char > ph_traits;

    const ph_sequence&
    ph () const;

    ph_sequence&
    ph ();

    void
    ph (const ph_sequence& s);

    // x
    // 
    typedef ::tmx20::x x_type;
    typedef ::xsd::cxx::tree::sequence< x_type > x_sequence;
    typedef x_sequence::iterator x_iterator;
    typedef x_sequence::const_iterator x_const_iterator;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_sequence&
    x () const;

    x_sequence&
    x ();

    void
    x (const x_sequence& s);

    // g
    // 
    typedef ::tmx20::g g_type;
    typedef ::xsd::cxx::tree::sequence< g_type > g_sequence;
    typedef g_sequence::iterator g_iterator;
    typedef g_sequence::const_iterator g_const_iterator;
    typedef ::xsd::cxx::tree::traits< g_type, char > g_traits;

    const g_sequence&
    g () const;

    g_sequence&
    g ();

    void
    g (const g_sequence& s);

    // hi
    // 
    typedef ::tmx20::hi hi1_type;
    typedef ::xsd::cxx::tree::sequence< hi1_type > hi1_sequence;
    typedef hi1_sequence::iterator hi1_iterator;
    typedef hi1_sequence::const_iterator hi1_const_iterator;
    typedef ::xsd::cxx::tree::traits< hi1_type, char > hi1_traits;

    const hi1_sequence&
    hi1 () const;

    hi1_sequence&
    hi1 ();

    void
    hi1 (const hi1_sequence& s);

    // x
    // 
    typedef ::tmx20::x3 x1_type;
    typedef ::xsd::cxx::tree::optional< x1_type > x1_optional;
    typedef ::xsd::cxx::tree::traits< x1_type, char > x1_traits;

    const x1_optional&
    x1 () const;

    x1_optional&
    x1 ();

    void
    x1 (const x1_type& x);

    void
    x1 (const x1_optional& x);

    void
    x1 (::std::auto_ptr< x1_type > p);

    // type
    // 
    typedef ::tmx20::type3 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // comment
    // 
    typedef ::xml_schema::simple_type comment_type;
    typedef ::xsd::cxx::tree::optional< comment_type > comment_optional;
    typedef ::xsd::cxx::tree::traits< comment_type, char > comment_traits;

    const comment_optional&
    comment () const;

    comment_optional&
    comment ();

    void
    comment (const comment_type& x);

    void
    comment (const comment_optional& x);

    void
    comment (::std::auto_ptr< comment_type > p);

    // Constructors.
    //
    hi (const type_type&);

    hi (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    hi (const hi& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual hi*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~hi ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    bpt_sequence bpt_;
    ept_sequence ept_;
    ph_sequence ph_;
    x_sequence x_;
    g_sequence g_;
    hi1_sequence hi1_;
    x1_optional x1_;
    ::xsd::cxx::tree::one< type_type > type_;
    comment_optional comment_;
  };

  class ph: public ::xml_schema::type
  {
    public:
    // sub
    // 
    typedef ::tmx20::sub sub_type;
    typedef ::xsd::cxx::tree::sequence< sub_type > sub_sequence;
    typedef sub_sequence::iterator sub_iterator;
    typedef sub_sequence::const_iterator sub_const_iterator;
    typedef ::xsd::cxx::tree::traits< sub_type, char > sub_traits;

    const sub_sequence&
    sub () const;

    sub_sequence&
    sub ();

    void
    sub (const sub_sequence& s);

    // x
    // 
    typedef ::tmx20::x4 x_type;
    typedef ::xsd::cxx::tree::optional< x_type > x_optional;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_optional&
    x () const;

    x_optional&
    x ();

    void
    x (const x_type& x);

    void
    x (const x_optional& x);

    void
    x (::std::auto_ptr< x_type > p);

    // assoc
    // 
    typedef ::tmx20::assoc_type assoc_type;
    typedef ::xsd::cxx::tree::optional< assoc_type > assoc_optional;
    typedef ::xsd::cxx::tree::traits< assoc_type, char > assoc_traits;

    const assoc_optional&
    assoc () const;

    assoc_optional&
    assoc ();

    void
    assoc (const assoc_type& x);

    void
    assoc (const assoc_optional& x);

    void
    assoc (::std::auto_ptr< assoc_type > p);

    // equiv-text
    // 
    typedef ::xml_schema::simple_type equiv_text_type;
    typedef ::xsd::cxx::tree::optional< equiv_text_type > equiv_text_optional;
    typedef ::xsd::cxx::tree::traits< equiv_text_type, char > equiv_text_traits;

    const equiv_text_optional&
    equiv_text () const;

    equiv_text_optional&
    equiv_text ();

    void
    equiv_text (const equiv_text_type& x);

    void
    equiv_text (const equiv_text_optional& x);

    void
    equiv_text (::std::auto_ptr< equiv_text_type > p);

    // type
    // 
    typedef ::tmx20::type4 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // Constructors.
    //
    ph (const type_type&);

    ph (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    ph (const ph& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual ph*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ph ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sub_sequence sub_;
    x_optional x_;
    assoc_optional assoc_;
    equiv_text_optional equiv_text_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class sub: public ::xml_schema::type
  {
    public:
    // bpt
    // 
    typedef ::tmx20::bpt bpt_type;
    typedef ::xsd::cxx::tree::sequence< bpt_type > bpt_sequence;
    typedef bpt_sequence::iterator bpt_iterator;
    typedef bpt_sequence::const_iterator bpt_const_iterator;
    typedef ::xsd::cxx::tree::traits< bpt_type, char > bpt_traits;

    const bpt_sequence&
    bpt () const;

    bpt_sequence&
    bpt ();

    void
    bpt (const bpt_sequence& s);

    // ept
    // 
    typedef ::tmx20::ept ept_type;
    typedef ::xsd::cxx::tree::sequence< ept_type > ept_sequence;
    typedef ept_sequence::iterator ept_iterator;
    typedef ept_sequence::const_iterator ept_const_iterator;
    typedef ::xsd::cxx::tree::traits< ept_type, char > ept_traits;

    const ept_sequence&
    ept () const;

    ept_sequence&
    ept ();

    void
    ept (const ept_sequence& s);

    // ph
    // 
    typedef ::tmx20::ph ph_type;
    typedef ::xsd::cxx::tree::sequence< ph_type > ph_sequence;
    typedef ph_sequence::iterator ph_iterator;
    typedef ph_sequence::const_iterator ph_const_iterator;
    typedef ::xsd::cxx::tree::traits< ph_type, char > ph_traits;

    const ph_sequence&
    ph () const;

    ph_sequence&
    ph ();

    void
    ph (const ph_sequence& s);

    // hi
    // 
    typedef ::tmx20::hi hi_type;
    typedef ::xsd::cxx::tree::sequence< hi_type > hi_sequence;
    typedef hi_sequence::iterator hi_iterator;
    typedef hi_sequence::const_iterator hi_const_iterator;
    typedef ::xsd::cxx::tree::traits< hi_type, char > hi_traits;

    const hi_sequence&
    hi () const;

    hi_sequence&
    hi ();

    void
    hi (const hi_sequence& s);

    // g
    // 
    typedef ::tmx20::g g_type;
    typedef ::xsd::cxx::tree::sequence< g_type > g_sequence;
    typedef g_sequence::iterator g_iterator;
    typedef g_sequence::const_iterator g_const_iterator;
    typedef ::xsd::cxx::tree::traits< g_type, char > g_traits;

    const g_sequence&
    g () const;

    g_sequence&
    g ();

    void
    g (const g_sequence& s);

    // x
    // 
    typedef ::tmx20::x x_type;
    typedef ::xsd::cxx::tree::sequence< x_type > x_sequence;
    typedef x_sequence::iterator x_iterator;
    typedef x_sequence::const_iterator x_const_iterator;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_sequence&
    x () const;

    x_sequence&
    x ();

    void
    x (const x_sequence& s);

    // datatype
    // 
    typedef ::tmx20::datatype datatype_type;
    typedef ::xsd::cxx::tree::traits< datatype_type, char > datatype_traits;

    const datatype_type&
    datatype () const;

    datatype_type&
    datatype ();

    void
    datatype (const datatype_type& x);

    void
    datatype (::std::auto_ptr< datatype_type > p);

    static const datatype_type&
    datatype_default_value ();

    // type
    // 
    typedef ::tmx20::type5 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // x
    // 
    typedef ::tmx20::x5 x1_type;
    typedef ::xsd::cxx::tree::optional< x1_type > x1_optional;
    typedef ::xsd::cxx::tree::traits< x1_type, char > x1_traits;

    const x1_optional&
    x1 () const;

    x1_optional&
    x1 ();

    void
    x1 (const x1_type& x);

    void
    x1 (const x1_optional& x);

    void
    x1 (::std::auto_ptr< x1_type > p);

    // Constructors.
    //
    sub (const type_type&);

    sub (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    sub (const sub& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual sub*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~sub ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    bpt_sequence bpt_;
    ept_sequence ept_;
    ph_sequence ph_;
    hi_sequence hi_;
    g_sequence g_;
    x_sequence x_;
    ::xsd::cxx::tree::one< datatype_type > datatype_;
    static const datatype_type datatype_default_value_;
    ::xsd::cxx::tree::one< type_type > type_;
    x1_optional x1_;
  };

  class x: public ::xml_schema::type
  {
    public:
    // xid
    // 
    typedef ::xml_schema::idref xid_type;
    typedef ::xsd::cxx::tree::traits< xid_type, char > xid_traits;

    const xid_type&
    xid () const;

    xid_type&
    xid ();

    void
    xid (const xid_type& x);

    void
    xid (::std::auto_ptr< xid_type > p);

    // equiv-text
    // 
    typedef ::xml_schema::simple_type equiv_text_type;
    typedef ::xsd::cxx::tree::optional< equiv_text_type > equiv_text_optional;
    typedef ::xsd::cxx::tree::traits< equiv_text_type, char > equiv_text_traits;

    const equiv_text_optional&
    equiv_text () const;

    equiv_text_optional&
    equiv_text ();

    void
    equiv_text (const equiv_text_type& x);

    void
    equiv_text (const equiv_text_optional& x);

    void
    equiv_text (::std::auto_ptr< equiv_text_type > p);

    // type
    // 
    typedef ::tmx20::type6 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // x
    // 
    typedef ::tmx20::x6 x1_type;
    typedef ::xsd::cxx::tree::optional< x1_type > x1_optional;
    typedef ::xsd::cxx::tree::traits< x1_type, char > x1_traits;

    const x1_optional&
    x1 () const;

    x1_optional&
    x1 ();

    void
    x1 (const x1_type& x);

    void
    x1 (const x1_optional& x);

    void
    x1 (::std::auto_ptr< x1_type > p);

    // Constructors.
    //
    x (const xid_type&,
       const type_type&);

    x (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    x (const x& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    virtual x*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< xid_type > xid_;
    equiv_text_optional equiv_text_;
    ::xsd::cxx::tree::one< type_type > type_;
    x1_optional x1_;
  };

  class version: public ::xml_schema::string
  {
    public:
    enum value
    {
      cxx_2_0
    };

    version (value v);

    version (const char* v);

    version (const ::std::string& v);

    version (const ::xml_schema::string& v);

    version (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    version (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    version (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    version (const version& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual version*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    version&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_version_convert ();
    }

    protected:
    value
    _xsd_version_convert () const;

    public:
    static const char* const _xsd_version_literals_[1];
    static const value _xsd_version_indexes_[1];
  };

  class context_type1: public ::xml_schema::string
  {
    public:

    context_type1 (const char* v);

    context_type1 (const ::std::string& v);

    context_type1 (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    context_type1 (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    context_type1 (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    context_type1 (const context_type1& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual context_type1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class datatype1: public ::xml_schema::string
  {
    public:

    datatype1 (const char* v);

    datatype1 (const ::std::string& v);

    datatype1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    datatype1 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    datatype1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    datatype1 (const datatype1& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual datatype1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class type: public ::xml_schema::string
  {
    public:

    type (const char* v);

    type (const ::std::string& v);

    type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const type& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class g_order: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    g_order (const ::xml_schema::integer&);

    g_order (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    g_order (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    g_order (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    g_order (const g_order& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual g_order*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~g_order ();
  };

  class i: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    i (const ::xml_schema::integer&);

    i (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    i (const ::xercesc::DOMAttr& a,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    i (const ::std::string& s,
       const ::xercesc::DOMElement* e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    i (const i& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

    virtual i*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~i ();
  };

  class x1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x1 (const ::xml_schema::integer&);

    x1 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x1 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x1 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x1 (const x1& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x1 ();
  };

  class type1: public ::xml_schema::string
  {
    public:

    type1 (const char* v);

    type1 (const ::std::string& v);

    type1 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const type1& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class i1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    i1 (const ::xml_schema::integer&);

    i1 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    i1 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    i1 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    i1 (const i1& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual i1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~i1 ();
  };

  class type2: public ::xml_schema::string
  {
    public:

    type2 (const char* v);

    type2 (const ::std::string& v);

    type2 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const type2& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class x2: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x2 (const ::xml_schema::integer&);

    x2 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x2 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x2 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x2 (const x2& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x2 ();
  };

  class x3: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x3 (const ::xml_schema::integer&);

    x3 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x3 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x3 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x3 (const x3& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x3 ();
  };

  class type3: public ::xml_schema::string
  {
    public:

    type3 (const char* v);

    type3 (const ::std::string& v);

    type3 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const type3& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class x4: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x4 (const ::xml_schema::integer&);

    x4 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x4 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x4 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x4 (const x4& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x4 ();
  };

  class type4: public ::xml_schema::string
  {
    public:

    type4 (const char* v);

    type4 (const ::std::string& v);

    type4 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type4 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type4 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type4 (const type4& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class type5: public ::xml_schema::string
  {
    public:

    type5 (const char* v);

    type5 (const ::std::string& v);

    type5 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type5 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type5 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type5 (const type5& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class x5: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x5 (const ::xml_schema::integer&);

    x5 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x5 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x5 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x5 (const x5& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x5 ();
  };

  class type6: public ::xml_schema::string
  {
    public:

    type6 (const char* v);

    type6 (const ::std::string& v);

    type6 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type6 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type6 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type6 (const type6& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class x6: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    x6 (const ::xml_schema::integer&);

    x6 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x6 (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x6 (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    x6 (const x6& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual x6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~x6 ();
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace tmx20
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tmx >
  tmx_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::body >
  body_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::body >
  body_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::body >
  body_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::body >
  body_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::context >
  context_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::context >
  context_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::context >
  context_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::context >
  context_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::external_file >
  external_file_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::header >
  header_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::header >
  header_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::header >
  header_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::header >
  header_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::inline_data >
  inline_data_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::internal_file >
  internal_file_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::note >
  note_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::note >
  note_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::note >
  note_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::note >
  note_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::prop >
  prop_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::seg >
  seg_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::segmentation >
  segmentation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tag >
  tag_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tu >
  tu_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::tuv >
  tuv_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::bpt >
  bpt_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ept >
  ept_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::g >
  g_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::g >
  g_ (::xercesc::InputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::xercesc::InputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::xercesc::InputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::g >
  g_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::g >
  g_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::hi >
  hi_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::ph >
  ph_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::sub >
  sub_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::tmx20::x >
  x_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::tmx20::x >
  x_ (::xercesc::InputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::xercesc::InputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::xercesc::InputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::tmx20::x >
  x_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::tmx20::x >
  x_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______SCHEMAS_TMX20_HXX
