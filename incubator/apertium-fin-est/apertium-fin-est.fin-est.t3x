<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->
<interchunk>
  <section-def-cats>

    <def-cat n="ADV">
      <cat-item tags="ADV"/>
    </def-cat>
    <def-cat n="PRN-gen">
      <cat-item tags="PRN.*.gen.*"/>
    </def-cat>
    <def-cat n="PRN">
      <cat-item tags="PRN.*"/>
    </def-cat>
    <def-cat n="QST">
      <cat-item tags="QST"/>
    </def-cat>
    <def-cat n="SN">
      <cat-item tags="SN.*"/>
    </def-cat>
    <def-cat n="SN2">
      <cat-item tags="SN.*"/>
      <cat-item tags="PRN.*"/>
    </def-cat>
    <def-cat n="ADV_OR_SN2">
      <cat-item tags="ADV"/>
      <cat-item tags="SN.*"/>
      <cat-item tags="PRN.*"/>
    </def-cat>
    <def-cat n="SV">
      <cat-item tags="SV"/>
      <cat-item tags="SV.*"/>
    </def-cat>
    <def-cat n="SVNEG">
      <cat-item lemma="neg_ei" tags="SVNEG"/>
      <cat-item lemma="neg_ei" tags="SVNEG.*"/>
    </def-cat>
    <def-cat n="some-verb">
      <cat-item tags="SV"/>
      <cat-item tags="SV.*"/>
      <cat-item tags="SVNEG"/>
      <cat-item tags="SVNEG.*"/>
    </def-cat>
    <def-cat n="SVNEG-p3">
      <cat-item lemma="neg_ei" tags="SVNEG.p3.*"/>
    </def-cat>
    <def-cat n="SVNEG-p12">
      <cat-item lemma="neg_ei" tags="SVNEG.p1.*"/>
      <cat-item lemma="neg_ei" tags="SVNEG.p2.*"/>
    </def-cat>
    <def-cat n="SENT">
      <cat-item tags="SENT"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="a_person">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_poss">
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px3sg"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
      <attr-item tags="px3pl"/>
      <attr-item tags="px3"/>
    </def-attr>
    <def-attr n="a_cas">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="par"/>
      <attr-item tags="ill"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
      <attr-item tags="all"/>
      <attr-item tags="ade"/>
      <attr-item tags="abl"/>
      <attr-item tags="tra"/>
      <attr-item tags="trm"/>
      <attr-item tags="ess"/>
      <attr-item tags="abe"/>
      <attr-item tags="com"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="paraula"/>
    <def-var n="number"/>
    <def-var n="POST"/>
    <def-var n="verb_nbr_pers" v=""/>   <!-- finite verb number and person; initially unset -->
    <def-var n="upper_lower"/>
    <def-var n="px"/>       <!-- clumsy way to get the upper-lower info into new chunk -->
    <def-var n="pron_pers"/>  <!-- person for inserted personal pronoun -->
    <def-var n="pron_nbr"/>  <!-- number for inserted  pronoun -->
    <def-var n="pron_case"/>  <!-- case for inserted  pronoun -->
    <def-var n="pron_tags"/>  <!-- for inserted pronoun -->
    <def-var n="chunk_pron_tags"/>  <!-- for inserted pronoun -->
    <def-var n="pron_word"/>  <!-- for inserted pronoun -->
    <def-var n="verb_lemma"/>  <!-- a place to hold stuff -->
  </section-def-vars>

  <section-def-macros>

    <def-macro n="remember_verb" npar="1" c="remember verb person and number for handling possessive clitics">
      <choose>
      <when>
        <test><equal><clip pos="1" part="a_person"/><lit-tag v="p1"/></equal></test>
        <let><var n="verb_nbr_pers"/><lit v="px1"/></let>
      </when>
      <when>
        <test><equal><clip pos="1" part="a_person"/><lit-tag v="p2"/></equal></test>
        <let><var n="verb_nbr_pers"/><lit v="px2"/></let>
      </when>
      <when>
        <test><equal><clip pos="1" part="a_person"/><lit-tag v="p3"/></equal></test>
        <let><var n="verb_nbr_pers"/><lit v="px3"/></let>
      </when>
      </choose>
      <choose>
      <!-- <append n="verb_nbr_pers"><clip pos="1" part="a_nbr"/></append> doesn't work, thus 2 tests below -->
      <when>
        <test><equal><clip pos="1" part="a_nbr"/><lit-tag v="sg"/></equal></test>
        <append n="verb_nbr_pers"><lit v="sg"/></append>
      </when>
      <when>
        <test><equal><clip pos="1" part="a_nbr"/><lit-tag v="pl"/></equal></test>
        <append n="verb_nbr_pers"><lit v="pl"/></append>
      </when>
      </choose>
    </def-macro>

    <def-macro n="poss2pronoun" npar="1"> <!-- create a pronoun from px... tag -->
      <choose>
        <when>  <!-- a possessive tag should convert to a pronoun -->
          <test> 
              <contains-substring><clip pos="1" part="a_poss"/><lit v="px"/></contains-substring>
          </test>
          <choose>  <!-- either a personal pronoun or oma -->
            <when>  <!-- test for same-referral -->
              <test> <!-- refering to the same subject -->
                <and>
                <contains-substring><var n="verb_nbr_pers"/><lit v="px"/></contains-substring>
                <contains-substring><clip pos="1" part="a_poss"/><var n="verb_nbr_pers"/></contains-substring>
                </and>
              </test>
              <let><var n="pron_word"/><lit v="oma"/></let>
              <let><var n="pron_tags"/><lit-tag v="prn"/></let>
              <append n="pron_tags"><lit-tag v="sg"/></append>
              <append n="pron_tags"><lit-tag v="gen"/></append>
            </when>
            <otherwise> <!-- refering to different subjects - it should be a personal pronoun -->
              <let><var n="pron_case"/><lit-tag v="gen"/></let>
              <call-macro n="gen_px_pron"><with-param pos="1"/></call-macro> <!-- generate vars -->
              <call-macro n="gen_pers_pron"></call-macro>         <!-- turn vars into output strings -->
            </otherwise>
          </choose>
          <!--let><var n="px"/><lit v="px"/></let>
          <let><var n="upper_lower"/><case-of pos="1" part="lem"/></let>
          <choose><when>
            <test>
              <equal><var n="upper_lower"/><lit v="Aa"/></equal>
            </test>
            <let><var n="px"/><lit v="Px"/></let>
          </when></choose-->
          <out>
            <chunk>
              <get-case-from pos="1">
              <lit v="px"/></get-case-from>
              <lit-tag v="PRN"/>
              <var n="chunk_pron_tags"/>
              <lit v="{^"/>
              <var n="pron_word"/>
              <var n="pron_tags"/>
              <lit v="$}"/>
            </chunk>
            <b />
          </out>
          <modify-case><clip pos="1" part="lem"/><lit v="aa"/></modify-case>
        </when>
      </choose>
    </def-macro>

    <def-macro n="gen_px_pron" npar="1"> <!-- create a pers pronoun from px... tag -->
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px1sg"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="mina"/></let>
            <let><var n="pron_nbr"/><lit-tag v="sg"/></let>
            <let><var n="pron_pers"/><lit-tag v="p1"/></let>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px2sg"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="sina"/></let>
            <let><var n="pron_nbr"/><lit-tag v="sg"/></let>
            <let><var n="pron_pers"/><lit-tag v="p2"/></let>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px3sg"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="tema"/></let>
            <let><var n="pron_nbr"/><lit-tag v="sg"/></let>
            <let><var n="pron_pers"/><lit-tag v="p3"/></let>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px1pl"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="meie"/></let>
            <let><var n="pron_nbr"/><lit-tag v="pl"/></let>
            <let><var n="pron_pers"/><lit-tag v="p1"/></let>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px2pl"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="teie"/></let>
            <let><var n="pron_nbr"/><lit-tag v="pl"/></let>
            <let><var n="pron_pers"/><lit-tag v="p2"/></let>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" part="a_poss"/><lit-tag v="px3pl"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="nemad"/></let>
            <let><var n="pron_nbr"/><lit-tag v="pl"/></let>
            <let><var n="pron_pers"/><lit-tag v="p3"/></let>
          </when></choose>
    </def-macro>


    <def-macro n="insert_pers_pron" npar="2"> <!-- create and insert a pers pronoun from person, nbr tags -->
        <choose><when>
          <test><or>  <!-- enkö, etkö, emmekö, ettekö -->
            <equal><clip pos="1" part="a_person"/><lit-tag v="p1"/></equal>
            <equal><clip pos="1" part="a_person"/><lit-tag v="p2"/></equal>
          </or></test>
          <let><var n="pron_case"/><lit-tag v="nom"/></let>
          <call-macro n="gen_p12_pron"><with-param pos="1"/></call-macro> <!-- generate the vars-->
          <call-macro n="gen_pers_pron"></call-macro>           <!-- turn vars into pronoun strings -->
          <out>
            <chunk>
            <get-case-from pos="2">
              <lit v="prn"/></get-case-from>
              <lit-tag v="PRN"/>
              <var n="chunk_pron_tags"/>
              <lit v="{^"/>
              <var n="pron_word"/>
              <var n="pron_tags"/>
              <lit v="$}"/>
            </chunk>
            <b />
          </out>
        </when></choose>
    </def-macro>


    <def-macro n="gen_p12_pron" npar="1"> <!-- create pers pronoun from person, nbr tags -->
          <choose><when>
            <test><and>
              <equal><clip pos="1" part="a_person"/><lit-tag v="p1"/></equal>
              <equal><clip pos="1" part="a_nbr"/><lit-tag v="sg"/></equal>
            </and></test>
            <let><var n="pron_word"/><lit v="mina"/></let>
          </when></choose>
          <choose><when>
            <test><and>
              <equal><clip pos="1" part="a_person"/><lit-tag v="p2"/></equal>
              <equal><clip pos="1" part="a_nbr"/><lit-tag v="sg"/></equal>
            </and></test>
            <let><var n="pron_word"/><lit v="sina"/></let>
          </when></choose>
          <choose><when>
            <test><and>
              <equal><clip pos="1" part="a_person"/><lit-tag v="p1"/></equal>
              <equal><clip pos="1" part="a_nbr"/><lit-tag v="pl"/></equal>
            </and></test>
            <let><var n="pron_word"/><lit v="meie"/></let>
          </when></choose>
          <choose><when>
            <test><and>
              <equal><clip pos="1" part="a_person"/><lit-tag v="p2"/></equal>
              <equal><clip pos="1" part="a_nbr"/><lit-tag v="pl"/></equal>
            </and></test>
            <let><var n="pron_word"/><lit v="teie"/></let>
          </when></choose>
          <let><var n="pron_nbr"/><clip pos="1" part="a_nbr"/></let>
          <let><var n="pron_pers"/><clip pos="1" part="a_person"/></let>
    </def-macro>

    <def-macro n="gen_pers_pron" npar="0">   <!-- create personal pronoun output strings from variables -->
          <let><var n="chunk_pron_tags"/><lit-tag v="prn"/></let>
          <append n="chunk_pron_tags"><var n="pron_nbr"/></append>
          <append n="chunk_pron_tags"><var n="pron_case"/></append>
          <append n="chunk_pron_tags"><lit-tag v="pers"/></append>
          <append n="chunk_pron_tags"><var n="pron_pers"/></append>
          <let><var n="pron_tags"/><lit-tag v="prn.pers"/></let>
          <append n="pron_tags"><var n="pron_pers"/></append>
          <append n="pron_tags"><lit-tag v="3.4"/></append>
    </def-macro>

    <def-macro n="forget_verb" npar="0" c="set the variable to empty">
        <let><var n="verb_nbr_pers"/><lit v=""/></let>
    </def-macro>

  </section-def-macros>

  <section-rules>

    <rule comment="REGLA: fallback SV QST"> <!-- kirjutad kas, ei kas -->
      <pattern>
        <pattern-item n="some-verb"/>
        <pattern-item n="QST"/>
      </pattern>
      <action>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <out>
          <chunk>
            <get-case-from pos="1">
              <clip pos="2" part="lem"/></get-case-from>
            <clip pos="2" part="tags"/>
            <clip pos="2" part="chcontent"/>
          </chunk>
          <b pos="1"/>
        </out>
        <call-macro n="insert_pers_pron"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <out>
          <chunk>
            <get-case-from pos="2">
              <clip pos="1" part="lem"/></get-case-from>
            <clip pos="1" part="tags"/>
            <clip pos="1" part="chcontent"/>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb QST SN2 -- QST SN2 verb"> <!-- kirjutad kas sina; kirjutad kas raamatut -->
      <pattern>
        <pattern-item n="some-verb"/>
        <pattern-item n="QST"/>
        <pattern-item n="SN2"/>
      </pattern>
      <action>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <out>
          <chunk>
            <get-case-from pos="1">
            <clip pos="2" part="lem"/></get-case-from>
            <clip pos="2" part="tags"/>
            <clip pos="2" part="chcontent"/>
          </chunk>
          <b pos="1"/>
        </out>
        <call-macro n="insert_pers_pron"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="poss2pronoun"><with-param pos="3"/></call-macro> <!-- turn poss suffix into a pronoun -->
        <out>
          <chunk>
            <get-case-from pos="3">
            <clip pos="3" part="lem"/></get-case-from>
            <clip pos="3" part="tags"/>
            <clip pos="3" part="chcontent"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <get-case-from pos="2">
            <clip pos="1" part="lem"/></get-case-from>
            <clip pos="1" part="tags"/>
            <clip pos="1" part="chcontent"/>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: SVNEG QST SV SN2">  <!-- ei kas kirjuta sina, ei kas kirjuta raamatut -->
      <pattern>
        <pattern-item n="SVNEG"/>
        <pattern-item n="QST"/>
        <pattern-item n="SV"/>
        <pattern-item n="SN2"/>
      </pattern>
      <action>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <call-macro n="remember_verb"><with-param pos="3"/></call-macro>
        <out>
          <chunk>
            <get-case-from pos="1">
            <clip pos="2" part="lem"/></get-case-from>
            <clip pos="2" part="tags"/>
            <clip pos="2" part="chcontent"/>
          </chunk>
          <b pos="1"/>
        </out>
        <call-macro n="insert_pers_pron"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="poss2pronoun"><with-param pos="1"/></call-macro> <!-- turn poss suffix into a pronoun -->
        <out>
          <chunk>
            <get-case-from pos="4">
            <clip pos="4" part="lem"/></get-case-from>
            <clip pos="4" part="tags"/>
            <clip pos="4" part="chcontent"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <get-case-from pos="2">
            <clip pos="1" part="lem"/></get-case-from>
            <clip pos="1" part="tags"/>
            <clip pos="1" part="chcontent"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <get-case-from pos="3">
            <clip pos="3" part="lem"/></get-case-from>
            <clip pos="3" part="tags"/>
            <clip pos="3" part="chcontent"/>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: reorder SVNEG ADV_OR_SN2 SV   ">   <!-- ei kunagi kirjuta -->
      <pattern>
        <pattern-item n="SVNEG"/>
        <pattern-item n="ADV_OR_SN2"/>
        <pattern-item n="SV"/>
      </pattern>
      <action>
        <let><var n="pron_word"/><lit v=""/></let>  <!-- to get info back from macro -->
        <call-macro n="insert_pers_pron"><with-param pos="1"/><with-param pos="1"/></call-macro>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <call-macro n="remember_verb"><with-param pos="3"/></call-macro>
        <choose>
          <when>
            <test><not><equal><var n="pron_word"/><lit v=""/></equal></not></test>
            <out>
              <chunk>
                <get-case-from pos="2">
                <clip pos="1" part="lem"/></get-case-from>
                <clip pos="1" part="tags"/>
                <clip pos="1" part="chcontent"/>
              </chunk>
              <b pos="1"/>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk>
                <clip pos="1" part="whole"/>
              </chunk>
              <b pos="1"/>
            </out>
          </otherwise>
        </choose>
        <out>
          <chunk>
            <clip pos="3" part="whole"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <clip pos="2" part="whole"/>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: SVNEG-p12 ">   <!-- en et emme ette -->
      <pattern>
        <pattern-item n="SVNEG-p12"/>
        <pattern-item n="SV"/>
      </pattern>
      <action>
        <let><var n="pron_word"/><lit v=""/></let>  <!-- to get info back from macro -->
        <call-macro n="insert_pers_pron"><with-param pos="1"/><with-param pos="1"/></call-macro>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <call-macro n="remember_verb"><with-param pos="2"/></call-macro>
        <choose>
          <when>
            <test><not><equal><var n="pron_word"/><lit v=""/></equal></not></test>
            <out>
              <chunk>
                <get-case-from pos="2">
                <clip pos="1" part="lem"/></get-case-from>
                <clip pos="1" part="tags"/>
                <clip pos="1" part="chcontent"/>
              </chunk>
              <b pos="1"/>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk>
                <clip pos="1" part="whole"/>
              </chunk>
              <b pos="1"/>
            </out>
          </otherwise>
        </choose>
        <out>
          <chunk>
            <clip pos="2" part="whole"/>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: some-verb">
      <pattern>
        <pattern-item n="some-verb"/>
      </pattern>
      <action>
        <call-macro n="remember_verb"><with-param pos="1"/></call-macro>
        <out>
          <chunk>
            <clip pos="1" part="lem"/>
            <clip pos="1" part="tags"/>
            <clip pos="1" part="chcontent"/>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: SN2">
      <pattern>
        <pattern-item n="SN2"/>
      </pattern>
      <action>
      <call-macro n="poss2pronoun"><with-param pos="1"/></call-macro> <!-- turn poss suffix into a pronoun -->
      <out>
        <chunk>
          <clip pos="1" part="whole"/>
        </chunk>
      </out>
      </action>
    </rule>

    <rule comment="REGLA: SENT">
      <pattern>
        <pattern-item n="SENT"/>
      </pattern>
      <action>
        <out>
          <chunk>
            <clip pos="1" part="whole"/>
          </chunk>
        </out>
        <call-macro n="forget_verb"><with-param pos="1"/></call-macro>  <!-- a new sentence starts from blank -->
      </action>
    </rule>


  </section-rules>
</interchunk>

