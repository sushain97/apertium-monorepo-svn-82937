<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="any">
      <cat-item tags="*"/>
    </def-cat>
    <def-cat n="cmp">   <!-- compound word non-final component-->
      <cat-item tags="*.cmp"/>
      <cat-item tags="*.cmp.guio"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
      <cat-item lemma="sama" tags="prn.*"/>
    </def-cat>
    <def-cat n="nom">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="der-minen">
      <cat-item tags="vblex.der_minen.*"/>
    </def-cat>
    <def-cat n="declinable">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
      <cat-item tags="prn.*"/>
      <cat-item tags="num.*"/>
      <cat-item tags="adj.*"/>
      <cat-item tags="vblex.der_minen.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="part"/>
    </def-cat>
    <def-cat n="cnjcoo">
      <cat-item tags="cnjcoo.*"/>
    </def-cat>
    <def-cat n="cnjsub">
      <cat-item tags="cnjsub.*"/>
    </def-cat>
    <def-cat n="kanssa">
      <cat-item lemma="kanssa" tags="post.*"/>
    </def-cat>
    <def-cat n="post">
      <cat-item tags="post"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>
    <def-cat n="qst">
      <cat-item tags="qst"/>
    </def-cat>
    <def-cat n="pitää">
      <cat-item lemma="pitää" tags="vblex.*"/>
    </def-cat>
    <def-cat n="ei-neg">                <!-- en, et, ..., älä, ... -->
      <cat-item tags="vblex.neg.*"/>
    </def-cat>
    <def-cat n="adds">
      <cat-item tags="vblex.*.pe4"/>
      <cat-item tags="vblex.*.pe4.*"/>
    </def-cat>
    <def-cat n="verb-fin">
      <cat-item tags="vblex.*.cond.*"/>
      <cat-item tags="vblex.*.pot.*"/>
      <cat-item tags="vblex.actv.indic.*"/>
      <cat-item tags="vblex.pasv.indic.*"/>
      <cat-item tags="vblex.*.imp.*"/>
    </def-cat>
    <def-cat n="verb-infa">                      <!-- <vblex><actv><infa><sg><lat> -->
      <cat-item tags="vblex.actv.infa.*"/>
    </def-cat>
    <def-cat n="verb-infe">                      <!-- <vblex><actv><infe>... -->
      <cat-item tags="vblex.actv.infe.*"/>
    </def-cat>
    <def-cat n="verb-infma">                      <!-- <vblex><actv><infma><sg><ine> -->
      <cat-item tags="vblex.actv.infma.*"/>
    </def-cat>
    <def-cat n="verb-agprc">                      <!-- <vblex><actv><agprc> antama, antaman, ... antamat, ... -->
      <cat-item tags="vblex.actv.agprc"/>
      <cat-item tags="vblex.agprc"/>
      <cat-item tags="vblex.actv.agprc.*"/>
      <cat-item tags="vblex.agprc.*"/>
    </def-cat>
    <def-cat n="verb-actv-prsprc">               <!-- <vblex><actv><prsprc><pl><nom> -->
      <cat-item tags="vblex.actv.prsprc"/>       <!-- antava -->
      <cat-item tags="vblex.actv.prsprc.*"/>       <!-- antava -->
    </def-cat>
    <def-cat n="verb-actv-prfprc">              <!-- <vblex><actv><prfprc><pl><nom> -->
      <cat-item tags="vblex.actv.prfprc"/>        <!-- antanut, antaneet -->
      <cat-item tags="vblex.actv.prfprc.*"/>        <!-- antanut, antaneet -->
    </def-cat>
    <def-cat n="verb-pasv-prsprc">               <!-- <vblex><pasv><prsprc><pl><nom>  -->
      <cat-item tags="vblex.pss.prsprc"/>        <!-- annetava --> 
      <cat-item tags="vblex.pasv.prsprc"/>        <!-- annetava --> 
      <cat-item tags="vblex.pss.prsprc.*"/>        <!-- annetava --> 
      <cat-item tags="vblex.pasv.prsprc.*"/>        <!-- annetava --> 
    </def-cat>
    <def-cat n="verb-pasv-prfprc">              <!-- <vblex><pasv><prfprc><pl><nom> -->
      <cat-item tags="vblex.pss.prfprc"/>        <!-- annettu -->
      <cat-item tags="vblex.pasv.prfprc"/>        <!-- annettu -->
      <cat-item tags="vblex.pss.prfprc.*"/>        <!-- annettu -->
      <cat-item tags="vblex.pasv.prfprc.*"/>        <!-- annettu -->
    </def-cat>
    <def-cat n="sent">
      <cat-item lemma="." tags="sent"/>
      <cat-item lemma="!" tags="sent"/>
      <cat-item lemma="?" tags="sent"/>
    </def-cat>

  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_pos">
      <attr-item tags="adv"/>
      <attr-item tags="n"/>
      <attr-item tags="np"/>
      <attr-item tags="num.card"/>
      <attr-item tags="num.ord"/>
      <attr-item tags="adj"/>
      <attr-item tags="prn"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
    </def-attr>
    <def-attr n="a_func">
      <attr-item tags="@+FAUXV"/>
      <attr-item tags="@+FMAINV"/>
      <attr-item tags="@-FADVL"/>
      <attr-item tags="@-FADVL→"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@-FOBJ"/>
      <attr-item tags="@-FOBJ"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-FOPRED→"/>
      <attr-item tags="@-FSPRED→"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-F←ADVL"/>
      <attr-item tags="@-F←ADVL-ela"/>
      <attr-item tags="@-F←ADVL-ine"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-F←OPRED"/>
      <attr-item tags="@-F←SPRED"/>
      <attr-item tags="@-F←SUBJ"/>
      <attr-item tags="@-OPRED→"/>
      <attr-item tags="@-SPRED→"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@ADVL-ela→"/>
      <attr-item tags="@ADVL-ine→"/>
      <attr-item tags="@ADVL←"/>
      <attr-item tags="@ADVL←OBJ"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@ADVL→CS"/>
      <attr-item tags="@ADVL→SUBJ"/>
      <attr-item tags="@APP"/>
      <attr-item tags="@APP-ADVL←"/>
      <attr-item tags="@APP-Num←"/>
      <attr-item tags="@APP-N←"/>
      <attr-item tags="@APP-Pron←"/>
      <attr-item tags="@APP→Pron"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@COMP-CS←"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@N"/>
      <attr-item tags="@NUM←"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@N←"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@OBJ→SPRED"/>
      <attr-item tags="@OPRED"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@PPRED"/>
      <attr-item tags="@Pron←"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@SPRED"/>
      <attr-item tags="@SPRED←OBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@SUBJ"/>
      <attr-item tags="@SUBJ←ADVL"/>
      <attr-item tags="@SUBJ←OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@VOC"/>
      <attr-item tags="@X"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@←ADVL-ela"/>
      <attr-item tags="@←ADVL-ine"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@→A"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@→CC"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@→Pron"/>
    </def-attr>
    <def-attr n="a_voice">
      <attr-item tags="actv"/>    <!-- fin -->
      <attr-item tags="pasv"/>    <!-- fin -->
      <!-- <attr-item tags="pss"/>     fin -->
      <!-- <attr-item tags="pers"/>    est -->
      <!-- <attr-item tags="impers"/>  est -->
    </def-attr>
    <def-attr n="a_temps">
      <attr-item tags="pret"/>
      <attr-item tags="pres"/>
    </def-attr>
    <def-attr n="a_inf">
      <attr-item tags="infa"/>    <!-- fin -->
      <attr-item tags="infe"/>    <!-- fin -->
      <attr-item tags="infma"/>   <!-- fin -->
      <attr-item tags="sup"/>     <!-- est -->
      <attr-item tags="ger"/>     <!-- est -->
    </def-attr>
    <def-attr n="a_mood">
      <attr-item tags="indic"/>    <!-- fin, est -->
      <attr-item tags="cond"/>   <!-- fin, est -->
      <attr-item tags="quot"/>   <!-- est; never used in transfer -->
      <attr-item tags="imprt"/>  <!-- est; never used in transfer -->
      <attr-item tags="imp"/>    <!-- fin -->
      <attr-item tags="pot"/>    <!-- fin -->
    </def-attr>
    <def-attr n="a_screeve">
      <attr-item tags="indic"/>
      <attr-item tags="cond"/>
      <attr-item tags="quot"/>     <!-- est; never used in transfer -->
      <attr-item tags="imprt"/>    <!-- est; never used in transfer -->
      <attr-item tags="imp"/>
      <attr-item tags="imp.pres"/>  <!-- some intermediate fin while transfering ? -->
      <attr-item tags="pot"/>

      <attr-item tags="indic.pres"/>    <!-- fin -->
      <attr-item tags="indic.pret"/>    <!-- fin -->

      <attr-item tags="pres.indic"/>    <!-- est -->
      <attr-item tags="pret.indic"/>    <!-- est -->
      <attr-item tags="pres.cond"/>   <!-- est -->
      <attr-item tags="pret.cond"/>   <!-- est -->
      <attr-item tags="pres.quot"/>   <!-- est; never used in transfer -->
      <attr-item tags="pret.quot"/>   <!-- est; never used in transfer -->
      <attr-item tags="pres.imprt"/>  <!-- est -->
      <attr-item tags="pret.imprt"/>  <!-- est -->
      <attr-item tags="pret.prc"/>    <!-- est olnud oldud conneg ... -->
    </def-attr>
    <def-attr n="a_person">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
      <attr-item tags="prc"/>    <!-- used in generating verb chunk tags -->
    </def-attr>
    <def-attr n="a_prntype">
      <attr-item tags="itg"/>
      <attr-item tags="rel"/>
      <attr-item tags="dem"/>
    </def-attr>
    <def-attr n="a_conneg">
      <attr-item tags="conneg"/>
      <attr-item tags="neg"/>
    </def-attr>
    <def-attr n="a_ole_conneg">
      <attr-item tags="conneg"/>
      <attr-item tags="p2.sg"/>
    </def-attr>
    <def-attr n="a_eineg">
      <attr-item tags="eineg"/>
    </def-attr>
    <def-attr n="a_p3sg">
      <attr-item tags="p3.sg"/>
    </def-attr>
    <def-attr n="a_poss">
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px3sg"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
      <attr-item tags="px3pl"/>
      <attr-item tags="px3"/>
    </def-attr>
    <def-attr n="a_der">
      <attr-item tags="der_minen"/>
      <attr-item tags="der_mine.n"/>
      <attr-item tags="der_sti"/>
    </def-attr>
    <def-attr n="a_clb">          <!-- punctuation-related tags, sneaking in from somewhere...-->
      <attr-item tags="clb"/>
      <!--attr-item tags="cm"/-->
      <attr-item tags="guio"/>
      <attr-item tags="quot"/>
    </def-attr>
    <def-attr n="a_foc">
      <attr-item tags="foc_kin"/>
      <attr-item tags="foc_kaan"/>
      <attr-item tags="foc_gi"/>     <!-- est -->
      <attr-item tags="foc_pa"/>
      <attr-item tags="foc_ka"/>     <!-- eikä -->
      <attr-item tags="foc_han"/>
    </def-attr>
    <def-attr n="a_comp">
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="a_sgpl">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
    </def-attr>
    <def-attr n="a_case">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>   <!-- fin -->
      <attr-item tags="gen"/>
      <attr-item tags="par"/>
      <attr-item tags="ins"/>   <!-- fin -->
      <attr-item tags="abl"/>
      <attr-item tags="ill"/>
      <attr-item tags="ade"/>
      <attr-item tags="all"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
      <attr-item tags="ess"/>
      <attr-item tags="tra"/>
      <attr-item tags="abe"/>
      <attr-item tags="com"/>
      <attr-item tags="trm"/>   <!-- est -->
    </def-attr>
    <def-attr n="a_adds">
      <attr-item tags="pe4"/>      <!-- redundant; used exclusively in passive -->
      <attr-item tags="pref"/>
    </def-attr>
    <def-attr n="a_attr">
      <attr-item tags="attr"/>
    </def-attr>
    <def-attr n="a_pron_type">     <!-- personal pronouns need to be remembered for possessive handling in t2x -->
      <attr-item tags="pers"/>
    </def-attr>

  </section-def-attrs>

  <section-def-vars>
    <def-var n="chunk_number"/>
    <def-var n="chunk_case"/>
    <def-var n="chunk_poss"/>
    <def-var n="EOS" v="true"/>
    <def-var n="caseFirstWord"/>
    <def-var n="px_poss"/>      <!-- for oma -->
    <def-var n="pron_tags"/>  <!-- kanssani etc: for inserted pronoun -->
    <def-var n="chunk_pron_tags"/>  <!-- kanssani etc: for inserted pronoun -->
    <def-var n="pron_word"/>  <!-- kanssani etc: for inserted pronoun -->
    <def-var n="sl_lemma"/>  <!-- for pidama - meeldima etc -->
    <def-var n="c_name"/>   <!-- for pidama - meeldima etc -->
    <def-var n="xxx" c="to remember smth"/>
    <def-var n="cmp-non-final" c="non-final component in a compund word"/>
    <def-var n="cmp-non-final2" c="the 2nd non-final component"/> 
    <def-var n="sn-adj" c="adj in a noun phrase "/>
    <def-var n="sn-adj2" c="the 2nd adj in noun phrase"/>       
    <def-var n="sn-final"/>
    <def-var n="sn-non-final"/>
  </section-def-vars>

  <section-def-macros>
    <def-macro n="f_adj1" npar="1">
      <choose>
        <when>
          <test><equal><clip pos="1" side="tl" part="a_attr"/><lit-tag v="attr"/></equal></test>
          <!--let><clip pos="1" side="tl" part="tags"/><lit-tag v="adj"/></let-->
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="remember_sl_lemma" npar="1">
          <let><var n="sl_lemma"/><clip pos="1" side="sl" part="lem"/></let>
    </def-macro>

    <def-macro n="default_sg" npar="1">  <!-- if the case is determined, but no number, define number as sg -->
      <choose>
        <when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="a_case"/><lit-tag v=""/></equal></not>
            <equal><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v=""/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="sg"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="make-sn-final" npar="1" c="make in-chunk string for nominal chunk final component">  
      <let><var n="sn-final"/>
        <concat>
          <clip pos="1" side="tl" part="lem"/>
          <clip pos="1" side="tl" part="a_pos"/>
          <lit-tag v="2"/>
          <lit-tag v="3"/>
         <clip pos="1" side="tl" part="a_foc"/>
       </concat>
     </let> 
    </def-macro>

    <def-macro n="make-sn-adj" npar="1" c="make in-chunk string for nominal chunk adj component">  
      <let><var n="sn-adj"/>
        <concat>
          <clip pos="1" side="tl" part="lem"/>
          <clip pos="1" side="tl" part="a_pos"/>
          <clip pos="1" side="tl" part="a_comp"/>
          <lit-tag v="2"/>
          <lit-tag v="3"/>
          <clip pos="1" side="tl" part="a_foc"/>
       </concat>
     </let> 
    </def-macro>

    <def-macro n="make-cmp-non-final" npar="2" c="make in-chunk string for compound word non-final component">  
      <call-macro n="cmp1-case"><with-param pos="1"/><with-param pos="2"/></call-macro>
      <let><var n="cmp-non-final"/>
        <concat>
          <clip pos="1" side="tl" part="lem"/>
          <clip pos="1" side="tl" part="a_pos"/>
          <clip pos="1" side="tl" part="a_comp"/>
          <clip pos="1" side="tl" part="a_sgpl"/>
          <clip pos="1" side="tl" part="a_case"/>
          <clip pos="1" side="tl" part="a_foc"/>
       </concat>
     </let> 
    </def-macro>

    <def-macro n="cmp1-case" npar="2" c="non-final compound case">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="nom"/></equal> <!-- fin default is nom -->
            <equal><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></let>       <!-- est default is gen -->
          <choose>
            <when>
              <test>
                <ends-with><clip pos="1" side="tl" part="lemh"/><lit v="us"/></ends-with>    <!-- ...us --> 
              </test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>       <!-- est should be nom -->
            </when>
            <when>
              <test><and>
                <equal><clip pos="1" side="tl" part="a_pos"/><lit-tag v="adj"/></equal>    <!-- suur --> 
                <equal><clip pos="1" side="tl" part="a_pos"/><lit-tag v="n"/></equal>      <!-- saadik --> 
              </and></test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>       <!-- est should be nom -->
            </when>
            <when>
              <test><and>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="noor"/></equal>       <!-- noor --> 
                <equal><clip pos="1" side="tl" part="a_pos"/><lit-tag v="n"/></equal>      <!-- mees --> 
              </and></test>
              <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>       <!-- est should be nom -->
            </when>
            <!-- many more special cases needed here ... --> 
          </choose>
        </when>
      </choose>
    </def-macro>

    <def-macro n="remove-Px" npar="1"> <!-- remove possessive suffixes in all cases except a noun without preceding adjective until there is a better solution to choose whether it will be useful in a sentence -->
        <let><clip pos="1" side="tl" part="a_poss"/><lit v=""/></let>
    </def-macro>
    
    <def-macro n="replace-foc1" npar="1">
      <choose>
        <when>
          <test>
            <or> 
              <equal><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_kin"/></equal>
              <equal><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_kaan"/></equal>
            </or>
          </test>
          <let><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_gi"/></let>
        </when>
        <when> <!-- Delete this for now -->
          <test><equal><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_pa"/></equal></test>
          <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let>
        </when>
        <when> <!-- Delete this from tl -->
          <test><equal><clip pos="1" side="tl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
          <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let>
        </when>
        <when> <!-- Don't preserve the hyph -->
          <test><and><equal><clip pos="1" side="tl" part="a_adds"/><lit-tag v="pref"/></equal>
          <equal><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></equal></and></test>
          <let><clip pos="1" side="tl" part="a_adds"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></let>
        </when>
        <when> 
          <test><equal><clip pos="1" side="tl" part="a_adds"/><lit-tag v="pref"/></equal></test>
          <let><clip pos="1" side="tl" part="a_adds"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="replace_foc_han" npar="1"> 
        <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let>
            <out>
              <b/>
              <chunk name="han"> 
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                </tags>
                <lu>
                  <lit v="ju"/>
                  <lit-tag v="adv"/>
                </lu>
              </chunk>
            </out>
    </def-macro>

    <def-macro n="firstWord" npar="1" c="modified by mginesti 11/nov/10; for est by hkaalep 15.mar.17">
      <let><var n="caseFirstWord"/><lit v="aa"/></let> <!-- by default, this is NOT the 1st word in a sentence -->
                                                       <!-- ... and the lemma has the case it has in the text -->
      <choose>
        <when>    <!-- this is the 1st word in a sentence -->
          <test><equal><var n="EOS"/><lit v="true"/></equal></test> 
          <let><var n="caseFirstWord"/><lit v="Aa"/></let>     <!-- remember that it was upper-cased -->
          <choose>
            <when>   <!--it is a name, i.e. np (or acronym, which we do not have currently) -->
              <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="np"/></equal></test>
            </when>  <!-- do not change the upper-lower -->
            <otherwise>
              <modify-case><clip pos="1" side="tl" part="lem"/><lit v="aa"/></modify-case> <!-- set it to lower case... -->
            </otherwise>
          </choose>
        </when>
      </choose>
      <let><var n="EOS"/><lit v="false"/></let>
    </def-macro>

    <def-macro n="default-conversion1" npar="1">
      <let><clip pos="1" side="tl" part="a_known"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="x_func"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_func"/><lit v=""/></let> <!-- delete the function tags -->
      <let><clip pos="1" side="tl" part="a_dialect"/><lit v=""/></let>
      <let><clip pos="1" side="tl" part="a_clb"/><lit v=""/></let>
    </def-macro>

  </section-def-macros>

  <section-rules>

    <rule comment="REGLA: NOM">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><clip pos="1" side="sl" part="a_poss"/></let>

        <call-macro n="make-sn-final"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
            </tags>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: CMP NOM">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <!-- glue back together -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="2"/></call-macro>
        <call-macro n="make-cmp-non-final"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="2"/></call-macro>

        <let><var n="chunk_number"/><clip pos="2" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="2" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><clip pos="2" side="sl" part="a_poss"/></let>

        <out>
          <chunk name="cmp_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
            </tags>
            <lu>
              <var n="cmp-non-final"/>
            </lu>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: CMP CMP NOM">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <!-- glue back together -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="3"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="3"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="2"/></call-macro>
        <call-macro n="default_sg"><with-param pos="3"/></call-macro>
        <call-macro n="make-cmp-non-final"><with-param pos="2"/><with-param pos="3"/></call-macro>
        <let><var n="cmp-non-final2"/><var n="cmp-non-final"/></let>     <!-- save it -->
        <call-macro n="make-cmp-non-final"><with-param pos="1"/><with-param pos="2"/></call-macro> 
        <call-macro n="make-sn-final"><with-param pos="2"/></call-macro>

        <let><var n="chunk_number"/><clip pos="3" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="3" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><clip pos="3" side="sl" part="a_poss"/></let>

        <out>
          <chunk name="cmp_cmp_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
            </tags>
            <lu>
              <var n="cmp-non-final"/>
            </lu>
            <lu>
              <var n="cmp-non-final2"/>
            </lu>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: Adj Nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><and>
                <equal><clip pos="1" side="sl" part="a_sgpl"/><clip pos="2" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><clip pos="2" side="sl" part="a_case"/></equal>
            </and></not></test>
            <reject-current-rule shifting="no"/> <!-- not the same chunk; treat adj and nom separately -->
          </when>
        </choose>
        <!-- the same chunk -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>
        <choose>  <!-- fin lyhyt tukka (sg) = est lühikesed juuksed (pl) -->
          <when>
            <test>
                <equal><clip pos="2" side="tl" part="a_sgpl"/><lit-tag v="pl"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
          </when>
        </choose>

        <let><var n="px_poss"/><clip pos="2" side="sl" part="a_poss"/></let>
        <choose>
          <when>
            <test><and>
                <equal><clip pos="1" side="sl" part="lem"/><lit v="oma"/></equal>
                <contains-substring><clip pos="2" side="sl" part="a_poss"/><lit v="px3"/></contains-substring>
            </and></test>
            <let><var n="px_poss"/><lit v=""/></let>
          </when>
        </choose>
        <call-macro n="make-sn-adj"><with-param pos="1"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="2"/></call-macro>

        <let><var n="chunk_number"/><clip pos="2" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="2" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><var n="px_poss"/></let>
        <out>
          <chunk name="a_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
              <!--tag><clip pos="2" side="sl" part="a_poss"/></tag--> <!-- ainoastaan, suorastaan, -->
            </tags>
            <lu>
              <var n="sn-adj"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: Adj Cmp Nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><and>
                <equal><clip pos="1" side="sl" part="a_sgpl"/><clip pos="3" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><clip pos="3" side="sl" part="a_case"/></equal>
            </and></not></test>
            <reject-current-rule shifting="no"/> <!-- not the same chunk; treat adj and nom separately -->
          </when>
        </choose>
        <!-- the same chunk -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="3"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="3"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="2"/></call-macro>
        <call-macro n="default_sg"><with-param pos="3"/></call-macro>
        <call-macro n="make-sn-adj"><with-param pos="1"/></call-macro>
        <call-macro n="make-cmp-non-final"><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="3"/></call-macro>

        <choose>  <!-- fin lyhyt tukka (sg) = est lühikesed juuksed (pl) -->
          <when>
            <test>
                <equal><clip pos="3" side="tl" part="a_sgpl"/><lit-tag v="pl"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
          </when>
        </choose>

        <let><var n="px_poss"/><clip pos="3" side="sl" part="a_poss"/></let>
        <choose>
          <when>
            <test><and>
                <equal><clip pos="1" side="sl" part="lem"/><lit v="oma"/></equal>
                <contains-substring><clip pos="3" side="sl" part="a_poss"/><lit v="px3"/></contains-substring>
            </and></test>
            <let><var n="px_poss"/><lit v=""/></let>
          </when>
        </choose>

        <let><var n="chunk_number"/><clip pos="3" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="3" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><var n="px_poss"/></let>
        <out>
          <chunk name="a_cmp_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
              <!--tag><clip pos="2" side="sl" part="a_poss"/></tag--> <!-- ainoastaan, suorastaan, -->
            </tags>
            <lu>
              <var n="sn-adj"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="cmp-non-final"/>
            </lu>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: Adj Cmp Cmp Nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="cmp"/>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><and>
                <equal><clip pos="1" side="sl" part="a_sgpl"/><clip pos="4" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><clip pos="4" side="sl" part="a_case"/></equal>
            </and></not></test>
            <reject-current-rule shifting="no"/> <!-- not the same chunk; treat adj and nom separately -->
          </when>
        </choose>
        <!-- the same chunk -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="3"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="4"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="3"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="4"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="2"/></call-macro>
        <call-macro n="default_sg"><with-param pos="3"/></call-macro>
        <call-macro n="default_sg"><with-param pos="4"/></call-macro>
        <call-macro n="make-sn-adj"><with-param pos="1"/></call-macro>
        <call-macro n="make-cmp-non-final"><with-param pos="3"/><with-param pos="4"/></call-macro>
        <let><var n="cmp-non-final2"/><var n="cmp-non-final"/></let>     <!-- save it -->
        <call-macro n="make-cmp-non-final"><with-param pos="2"/><with-param pos="3"/></call-macro> 
        <call-macro n="make-sn-final"><with-param pos="4"/></call-macro>

        <choose>  <!-- fin lyhyt tukka (sg) = est lühikesed juuksed (pl) -->
          <when>
            <test>
                <equal><clip pos="4" side="tl" part="a_sgpl"/><lit-tag v="pl"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
          </when>
        </choose>

        <let><var n="px_poss"/><clip pos="3" side="sl" part="a_poss"/></let>
        <choose>
          <when>
            <test><and>
                <equal><clip pos="1" side="sl" part="lem"/><lit v="oma"/></equal>
                <contains-substring><clip pos="4" side="sl" part="a_poss"/><lit v="px3"/></contains-substring>
            </and></test>
            <let><var n="px_poss"/><lit v=""/></let>
          </when>
        </choose>

        <let><var n="chunk_number"/><clip pos="4" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="4" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><var n="px_poss"/></let>
        <out>
          <chunk name="a_cmp_cmp_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
              <!--tag><clip pos="2" side="sl" part="a_poss"/></tag--> <!-- ainoastaan, suorastaan, -->
            </tags>
            <lu>
              <var n="sn-adj"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="cmp-non-final"/>
            </lu>
            <lu>
              <var n="cmp-non-final2"/>
            </lu>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: Adj Adj Nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><and>
                <equal><clip pos="1" side="sl" part="a_sgpl"/><clip pos="2" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="2" side="sl" part="a_sgpl"/><clip pos="3" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><clip pos="2" side="sl" part="a_case"/></equal>
                <equal><clip pos="2" side="sl" part="a_case"/><clip pos="3" side="sl" part="a_case"/></equal>
            </and></not></test>
            <reject-current-rule shifting="no"/> <!-- not the same chunk; treat adj and nom separately -->
          </when>
        </choose>
        <!-- the same chunk -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="3"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="3"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="2"/></call-macro>
        <choose>  <!-- fin lyhyt tukka (sg) = est lühikesed juuksed (pl) -->
          <when>
            <test>
                <equal><clip pos="3" side="tl" part="a_sgpl"/><lit-tag v="pl"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
            <let><clip pos="2" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
          </when>
        </choose>

        <let><var n="px_poss"/><clip pos="3" side="sl" part="a_poss"/></let>
        <choose>
          <when>
            <test><and>
                <equal><clip pos="1" side="sl" part="lem"/><lit v="oma"/></equal>
                <contains-substring><clip pos="3" side="sl" part="a_poss"/><lit v="px3"/></contains-substring>
            </and></test>
            <let><var n="px_poss"/><lit v=""/></let>
          </when>
        </choose>
        <call-macro n="make-sn-adj"><with-param pos="2"/></call-macro>
        <let><var n="sn-adj2"/><var n="sn-adj"/></let>
        <call-macro n="make-sn-adj"><with-param pos="1"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="3"/></call-macro>

        <let><var n="chunk_number"/><clip pos="3" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="3" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><var n="px_poss"/></let>
        <out>
          <chunk name="a_a_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
              <!--tag><clip pos="2" side="sl" part="a_poss"/></tag--> <!-- ainoastaan, suorastaan, -->
            </tags>
            <lu>
              <var n="sn-adj"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="sn-adj2"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: Adj Adj Cmp Nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><and>
                <equal><clip pos="1" side="sl" part="a_sgpl"/><clip pos="2" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="2" side="sl" part="a_sgpl"/><clip pos="4" side="sl" part="a_sgpl"/></equal>
                <equal><clip pos="1" side="sl" part="a_case"/><clip pos="2" side="sl" part="a_case"/></equal>
                <equal><clip pos="2" side="sl" part="a_case"/><clip pos="4" side="sl" part="a_case"/></equal>
            </and></not></test>
            <reject-current-rule shifting="no"/> <!-- not the same chunk; treat adj and nom separately -->
          </when>
        </choose>
        <!-- the same chunk -->
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="2"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="3"/></call-macro>
        <call-macro n="default-conversion1"><with-param pos="4"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="2"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="3"/></call-macro> <!-- ever happens ?-->
        <call-macro n="replace-foc1"><with-param pos="4"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="2"/></call-macro>
        <choose>  <!-- fin lyhyt kaunis tukka (sg) = est lühikesed kaunid juuksed (pl) -->
          <when>
            <test>
                <equal><clip pos="4" side="tl" part="a_sgpl"/><lit-tag v="pl"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
            <let><clip pos="2" side="tl" part="a_sgpl"/><lit-tag v="pl"/></let>
          </when>
        </choose>

        <let><var n="px_poss"/><clip pos="3" side="sl" part="a_poss"/></let>
        <choose>
          <when>
            <test><and>
                <equal><clip pos="1" side="sl" part="lem"/><lit v="oma"/></equal>
                <contains-substring><clip pos="3" side="sl" part="a_poss"/><lit v="px3"/></contains-substring>
            </and></test>
            <let><var n="px_poss"/><lit v=""/></let>
          </when>
        </choose>
        <call-macro n="make-sn-adj"><with-param pos="2"/></call-macro>
        <let><var n="sn-adj2"/><var n="sn-adj"/></let>
        <call-macro n="make-sn-adj"><with-param pos="1"/></call-macro>
        <call-macro n="make-cmp-non-final"><with-param pos="3"/><with-param pos="4"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="4"/></call-macro>

        <let><var n="chunk_number"/><clip pos="4" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="4" side="tl" part="a_case"/></let>
        <let><var n="chunk_poss"/><var n="px_poss"/></let>
        <out>
          <chunk name="a_a_cmp_n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><var n="chunk_poss"/></tag>
              <!--tag><clip pos="2" side="sl" part="a_poss"/></tag--> <!-- ainoastaan, suorastaan, -->
            </tags>
            <lu>
              <var n="sn-adj"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="sn-adj2"/>
            </lu>
          <b pos="1"/>
            <lu>
              <var n="cmp-non-final"/>
            </lu>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: NUM">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="make-sn-final"><with-param pos="1"/></call-macro>
        <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
            </tags>
            <lu>
              <var n="sn-final"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: PRON">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>

        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal></test>
            <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></let>
          </when>
        </choose>
        <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
        <let><clip pos="1" side="tl" part="a_prntype"/><lit v=""/></let>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="prn_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><lit-tag v="prn"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><clip pos="1" side="tl" part="a_pron_type"/></tag> <!-- no harm if it is empty -->
              <tag><clip pos="1" side="tl" part="a_person"/></tag> <!-- no harm if it is empty -->
            </tags>
            <lu>
       	      <clip pos="1" side="tl" part="lem"/>
       	      <clip pos="1" side="tl" part="a_pos"/>
              <clip pos="1" side="tl" part="a_pron_type"/> <!-- no harm if it is empty -->
              <clip pos="1" side="tl" part="a_person"/> <!-- no harm if it is empty -->
              <lit-tag v="3"/>
              <lit-tag v="4"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
        <choose>                   
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>


    <rule comment="REGLA: ei-neg">      <!-- fin en, et, ..., älä, ... -->
      <pattern>
        <pattern-item n="ei-neg"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_voice"/><lit-tag v="actv"/></let>
        <let><var n="c_name"/><concat><lit v="neg_"/><lit v="ei"/></concat></let>
        <choose>                   
          <when>                  <!-- fin älä (ei_imp) form = est ära form -->
            <test>
              <equal><clip pos="1" side="sl" part="a_mood"/><lit-tag v="imp"/></equal>
            </test>
            <let><var n="c_name"/><concat><lit v="neg_"/><lit v="älä"/></concat></let>
            <let><clip pos="1" side="tl" part="lemh"/><lit v="ära"/></let>      
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pres.imp"/></let>
            <let><clip pos="1" side="tl" part="a_conneg"/><lit v=""/></let>
            <choose>
              <when>
                <test>
                  <and>
                    <equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="imp"/></equal>
                    <equal><clip pos="1" side="sl" part="a_person"/><lit-tag v="p3"/></equal>
                  </and>
                </test>          <!-- fin älköön, älkööt = est ärgu which is underspec for number and person -->
                <let><clip pos="1" side="tl" part="a_person"/><lit v=""/></let>
                <let><clip pos="1" side="tl" part="a_sgpl"/><lit v=""/></let>
              </when>  
            </choose>
            <out>
              <chunk namefrom="c_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SVNEG"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                  <lit-tag v="neg"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>    <!-- fin ei form = est ?? -->
            <choose>
              <when>
                <test>
                  <equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_ka"/></equal>
                </test>          <!-- eikä = ega -->
                <out>
                  <chunk name="coord_eikä" case="caseFirstWord">
                    <tags>
                      <tag><lit-tag v="CC"/></tag>
                    </tags>
                    <lu>
                      <lit v="ega"/>
                      <lit-tag v="cnjcoo"/>
                    </lu>
                  </chunk>
                </out>
              </when>  
              <otherwise>    <!-- fin ei form = est ei -->

                <out>
                  <chunk namefrom="c_name" case="caseFirstWord">
                    <tags>
                      <tag><lit-tag v="SVNEG"/></tag>
                      <tag><clip pos="1" side="tl" part="a_person"/></tag>
                      <tag><clip pos="1" side="tl" part="a_sgpl"/></tag>
                    </tags>
                    <lu>
                      <clip pos="1" side="tl" part="lemh"/>
                      <lit-tag v="vblex.neg"/>
                    </lu>
                  </chunk>
                </out>
              </otherwise> 
            </choose>
          </otherwise> 
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: verb-agprc">
      <pattern>
        <pattern-item n="verb-agprc"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_voice"/><lit-tag v="actv"/></let>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="agprc_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.pasv.pret.prc"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-actv-prsprc">  <!-- fin antava = est andev -->
      <pattern>
        <pattern-item n="verb-actv-prsprc"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="prsprc_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.actv.pres.prc"/></tag>
            </tags>
            <lu>      
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-pasv-prsprc"> <!-- fin annettava = est antav -->
      <pattern>
        <pattern-item n="verb-pasv-prsprc"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="prsprc_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.pasv.pres.prc"/></tag>
            </tags>
            <lu>      
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-actv-prfprc">  <!-- fin antanut, antaneet = est andnud -->
      <pattern>
        <pattern-item n="verb-actv-prfprc"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="prfprc_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.actv.pret.prc"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-pasv-prfprc">   <!-- fin annettu = est antud -->
      <pattern>
        <pattern-item n="verb-pasv-prfprc"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="prfprc_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.pasv.pret.prc"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-infma">
      <pattern>
        <pattern-item n="verb-infma"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_voice"/><lit-tag v="actv"/></let>
        <let><clip pos="1" side="tl" part="a_sgpl"/><lit v=""/></let>
        <choose>
          <when>
            <test>
              <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="ade"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="a_voice"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_inf"/><lit-tag v="ger"/></let>
            <let><clip pos="1" side="tl" part="a_case"/><lit v=""/></let>
          </when>
          <otherwise>  
            <choose>
              <when>
                <test>
                  <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="ins"/></equal>
                </test>
                <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ill"/></let>
              </when>
            </choose>
            <let><clip pos="1" side="tl" part="a_inf"/><lit-tag v="sup"/></let>
          </otherwise>  
        </choose>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="infma_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex"/></tag>
              <tag><clip pos="1" side="tl" part="a_voice"/></tag>
              <tag><clip pos="1" side="tl" part="a_inf"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: verb-infa">
      <pattern>
        <pattern-item n="verb-infa"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_voice"/><lit-tag v="actv"/></let>
        <choose>
          <when><test><equal><clip pos="1" side="sl" part="a_case"/> 
                            <lit-tag v="tra"/>                 
                    </equal>
                    </test>
              <out>
                <chunk name="cnjsub" case="caseFirstWord">
                  <tags>
                    <tag><lit-tag v="CNJSUB"/></tag>
                  </tags>
                  <lu>
                    <lit v="et"/>
                    <lit-tag v="cnjsub"/>
                  </lu>
                </chunk>
                <b />
              </out>
          </when>
        </choose>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="infa_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.inf"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-infe">
      <pattern>
        <pattern-item n="verb-infe"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="infa_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.vblex.ger"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-fin">
      <pattern>
        <pattern-item n="verb-fin"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_adds"/><lit v=""/></let>
        <choose>
          <when>
            <test>         <!-- antaisi: est cond form annaks is underspecified for number and person -->
              <and>
                <equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="cond"/></equal>
                <equal><clip pos="1" side="sl" part="a_p3sg"/><lit-tag v="p3.sg"/></equal>
              </and>
            </test>
            <let><clip pos="1" side="tl" part="a_p3sg"/><lit v=""/></let>
          </when>
          <when>
            <test>        <!-- antakoon, antakoot: est imp form andku is underspecified for number and person --> 
              <and>
                <equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="imp"/></equal>
                <equal><clip pos="1" side="sl" part="a_person"/><lit-tag v="p3"/></equal>
              </and>
            </test>
            <let><clip pos="1" side="tl" part="a_person"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit v=""/></let>
          </when>
        </choose>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="cond"/>
            </equal></test>                   <!-- fin conditional is only present, never past -->
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pres.cond"/></let>
          </when>
        </choose>
        <choose>           <!-- fin potential = est vist + indicative -->
          <when>
            <test><equal>
              <clip pos="1" side="sl" part="a_mood"/><lit-tag v="pot"/>                 
            </equal></test>                         <!-- fin potential is only present, never past -->
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pres.indic"/></let>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                </tags>
                <lu>
                  <lit v="vist"/>
                  <lit-tag v="adv"/>
                </lu>
              </chunk>
              <b />
            </out>
          </when>
        </choose>
        <choose>
          <when>
            <test>  <!-- fin imperative is only present, never past -->
              <or>
                <equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="imp.pres"/></equal>
                <equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="imp"/></equal>
              </or>
            </test>
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pres.imp"/></let>
          </when>
        </choose>
        <choose>  <!-- change order of tense and mood tags in indicative -->
          <when> 
            <test><equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="indic.pres"/></equal></test>
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pres.indic"/></let>
          </when>
          <when> 
            <test><equal><clip pos="1" side="sl" part="a_screeve"/><lit-tag v="indic.pret"/></equal></test>
            <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pret.indic"/></let>
          </when>
        </choose>
        <!-- choose>  < ! - - conneg forms do not have sgpl ... - - >
          <when> 
            <test>
              <and>
                <equal><clip pos="1" side="sl" part="a_conneg"/> <lit-tag v="conneg"/></equal>
                <not>
                  <and>   < ! - - ... unless imp p2 sg (and perhaps more?) - - >
                    <equal><clip pos="1" side="tl" part="a_screeve"/> <lit-tag v="pres.imp"/></equal>
                    <equal><clip pos="1" side="tl" part="a_person"/> <lit-tag v="p2"/></equal>
                    <equal><clip pos="1" side="tl" part="a_sgpl"/> <lit-tag v="sg"/></equal>
                  </and>   
                </not>
              </and>
            </test>
            <let><clip pos="1" side="tl" part="a_sgpl"/><lit v=""/></let>
          </when>
        </choose -->
<!-- beginning of conneg-neg stuff -->
        <choose> 
          <when>
            <test>
              <equal> <clip pos="1" side="sl" part="a_conneg"/> <lit-tag v="conneg"/> </equal> 
            </test>
            <choose>        <!-- usually conneg forms do not have sgpl ... -->
                <when> 
                  <test>
                    <not>
                      <and>   <!-- ... unless imp p2 sg (and perhaps more?) -->
                        <equal><clip pos="1" side="tl" part="a_temps"/> <lit-tag v="pres"/></equal>
                        <equal><clip pos="1" side="tl" part="a_mood"/> <lit-tag v="imp"/></equal>
                        <equal><clip pos="1" side="tl" part="a_person"/> <lit-tag v="p2"/></equal>
                        <equal><clip pos="1" side="tl" part="a_sgpl"/> <lit-tag v="sg"/></equal>
                      </and>   
                    </not>
                  </test>
                  <let><clip pos="1" side="tl" part="a_sgpl"/><lit-tag v=""/></let>
                </when> 
            </choose> 
            <choose>  <!-- fin conneg translates to est neg in indic mood only; otherwise just delete conneg -->
                <when> 
                  <test>
                    <equal> <clip pos="1" side="tl" part="a_mood"/> <lit-tag v="indic"/> </equal>
                   </test>
                   <!-- fin indic conneg = est indic neg -->
                   <let><clip pos="1" side="tl" part="a_conneg"/><lit-tag v="neg"/></let>
                   <choose>
                     <when> 
                       <test>     <!-- olla has too many analyses in Finnish, prune them... -->
                         <equal> <clip pos="1" side="tl" part="lemh"/> <lit v="olema"/> </equal>
                       </test>
                       <choose>
                         <when> 
                           <test>
                             <equal> <clip pos="1" side="tl" part="a_temps"/> <lit-tag v="pres"/> </equal>
                           </test>
                           <!-- this gets solved with a hack in postchunk -->
                         </when> 
                         <otherwise>   <!-- temps = prt ollut, olleet, oltu etc -->
                           <let><clip pos="1" side="tl" part="a_screeve"/><lit-tag v="pret.prc"/></let>
                           <let><clip pos="1" side="tl" part="a_conneg"/><lit v=""/></let>
                         </otherwise>
                       </choose> 
                     </when>
                   </choose> 
                </when>
                <otherwise> <!-- fin imp, cond + conneg = est imprt, cond -->
                  <let><clip pos="1" side="tl" part="a_conneg"/><lit v=""/></let>
                </otherwise>
            </choose> 
          </when>
        </choose> 
<!-- end of conneg-neg stuff -->
        <let><var n="c_name"/><concat><lit v="v_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="vblex"/></tag>
              <tag><clip pos="1" side="tl" part="a_voice"/></tag>
              <tag><clip pos="1" side="tl" part="a_temps"/></tag>
              <tag><clip pos="1" side="tl" part="a_mood"/></tag>
              <tag><clip pos="1" side="tl" part="a_person"/></tag>
              <tag><clip pos="1" side="tl" part="a_sgpl"/></tag>
              <tag><clip pos="1" side="tl" part="a_conneg"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="2.3.4.5.6.7"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>



    <rule comment="REGLA: QST">
      <pattern>
        <pattern-item n="qst"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="qst" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="QST"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: CNJCOO">
      <pattern>
        <pattern-item n="cnjcoo"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>

        <choose>       <!-- fin eikä = est ja ei -->
          <when><test><equal><clip pos="1" side="sl" part="a_eineg"/> 
                              <lit-tag v="eineg"/>
                      </equal></test>
            <out>
              <chunk name="coord_ja" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="CC"/></tag>
                </tags>
                <lu>
                  <lit v="ja"/>
                  <lit-tag v="cnjcoo"/>
                </lu>
              </chunk>
              <b />
              <chunk name="neg" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SVNEG"/></tag>
                </tags>
                <lu>
                  <lit v="ei"/>
                  <lit-tag v="vblex.neg"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>  
            <let><var n="c_name"/><concat><lit v="coord_"/><var n="sl_lemma"/></concat></let>
            <out>
              <chunk namefrom="c_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="CC"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
              </chunk>
            </out>
          </otherwise>  
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: CNJSUB">
      <pattern>
        <pattern-item n="cnjsub"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="sub_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CS"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADV">
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="kanssa + poss_suff">   <!-- fires only when nom/pron + kanssa didn't -->
      <pattern>
        <pattern-item n="kanssa"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><not><or>
              <contains-substring><clip pos="1" side="sl" part="a_poss"/><lit v="px1"/></contains-substring>
              <contains-substring><clip pos="1" side="sl" part="a_poss"/><lit v="px2"/></contains-substring>
            </or></not></test>
            <reject-current-rule shifting="no"/> <!-- not kanssa + poss_suff that we can handle... -->
          </when>
        </choose>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro> <!-- is it needed here? -->

          <let><var n="pron_word"/><lit v=""/></let>
          <let><var n="pron_tags"/><lit-tag v="prn.pers"/></let>
          <let><var n="chunk_pron_tags"/><lit-tag v="prn"/></let>
          <choose><when>
            <test>
              <equal><clip pos="1" side="sl" part="a_poss"/><lit-tag v="px1sg"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="mina"/></let>
            <append n="pron_tags"><lit-tag v="p1.sg"/></append>
            <append n="chunk_pron_tags"><lit-tag v="sg.com.pers.p1"/></append>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" side="sl" part="a_poss"/><lit-tag v="px2sg"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="sina"/></let>
            <append n="pron_tags"><lit-tag v="p2.sg"/></append>
            <append n="chunk_pron_tags"><lit-tag v="sg.com.pers.p2"/></append>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" side="sl" part="a_poss"/><lit-tag v="px1pl"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="meie"/></let>
            <append n="pron_tags"><lit-tag v="p1.pl"/></append>
            <append n="chunk_pron_tags"><lit-tag v="pl.com.pers.p1"/></append>
          </when></choose>
          <choose><when>
            <test>
              <equal><clip pos="1" side="sl" part="a_poss"/><lit-tag v="px2pl"/></equal>
            </test>
            <let><var n="pron_word"/><lit v="teie"/></let>
            <append n="pron_tags"><lit-tag v="p2.pl"/></append>
            <append n="chunk_pron_tags"><lit-tag v="pl.com.pers.p2"/></append>
          </when></choose>
          <append n="pron_tags"><lit-tag v="com"/></append>

        <out>
          <chunk name="px" case="caseFirstWord"> 
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><var n="chunk_pron_tags"/></tag>
            </tags>
            <lu>
              <var n="pron_word"/>
              <var n="pron_tags"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: POST">
      <pattern>
        <pattern-item n="post"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="post_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="POST"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: PRE">
      <pattern>
        <pattern-item n="pr"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="remove-Px"><with-param pos="1"/></call-macro>
        <call-macro n="remember_sl_lemma"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><concat><lit v="pr_"/><var n="sl_lemma"/></concat></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRE"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: ADJ">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <call-macro n="f_adj1"><with-param pos="1"/></call-macro>

        <choose>
          <when><test><equal><clip pos="1" side="tl" part="a_pos"/><lit-tag v="adv"/>
                      </equal></test>
            <out>
              <chunk name="adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADJ"/></tag>
                </tags>
                <lu>
       	          <clip pos="1" side="tl" part="lem"/>
       	          <clip pos="1" side="tl" part="a_pos"/>
       	          <clip pos="1" side="tl" part="a_foc"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <choose>
              <when><test><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_sti"/>
                      </equal></test>              <!-- hiljaisesti - hiljainen - vaikne sg abl -->
                       <let><clip pos="1" side="tl" part="a_der"/><lit-tag v="sg.abl"/></let>
              </when>
            </choose>

            <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
            <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
            <out>
              <chunk name="a" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADJ"/></tag>
                  <tag><var n="chunk_number"/></tag>
                  <tag><var n="chunk_case"/></tag>
                  <!--tag><var n="chunk_poss"/></tag-->
              <!-- uudelleen, suorastaan, ikävissään, parhaimmillaan, parhaillaan, sellaisenaan, perinteisimmillään, tosissasi, vähintään, ainoastaan -->
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="a_pos"/>
                  <clip pos="1" side="tl" part="a_comp"/>
                  <lit-tag v="2"/>
                  <lit-tag v="3"/>
       	          <clip pos="1" side="tl" part="a_foc"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: DER-MINEN">
      <pattern>
        <pattern-item n="der-minen"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <call-macro n="default_sg"><with-param pos="1"/></call-macro>
        <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
        <out>
          <chunk name="v" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
            </tags>
            <lu>
       	      <clip pos="1" side="tl" part="lem"/>
       	      <clip pos="1" side="tl" part="a_pos"/> <!-- <vblex> -->
              <lit-tag v="der_mine"/>
              <lit-tag v="n"/>
              <lit-tag v="2"/>
              <lit-tag v="3"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>


    <rule comment="REGLA: SENT">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <let><var n="EOS"/><lit v="true"/></let>  <!-- next word will be the first word of a sentence -->
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="pron + kanssa nom + ga">
      <pattern>
        <pattern-item n="pron"/>
        <pattern-item n="kanssa"/>
      </pattern>
     <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="replace-foc1"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="com"/></let>
        <let><var n="chunk_number"/><clip pos="1" side="tl" part="a_sgpl"/></let>
        <let><var n="chunk_case"/><clip pos="1" side="tl" part="a_case"/></let>
        <let><clip pos="1" side="tl" part="a_prntype"/><lit v=""/></let>
        <out>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><lit-tag v="prn"/></tag>
              <tag><var n="chunk_number"/></tag>
              <tag><var n="chunk_case"/></tag>
              <tag><clip pos="1" side="tl" part="a_pron_type"/></tag> <!-- no harm if it is empty -->
              <tag><clip pos="1" side="tl" part="a_person"/></tag> <!-- no harm if it is empty -->
            </tags>
            <lu>
       	      <clip pos="1" side="tl" part="lem"/>
       	      <clip pos="1" side="tl" part="a_pos"/>
              <clip pos="1" side="tl" part="a_pron_type"/> <!-- no harm if it is empty -->
              <clip pos="1" side="tl" part="a_person"/> <!-- no harm if it is empty -->
              <lit-tag v="3"/>
              <lit-tag v="4"/>
       	      <clip pos="1" side="tl" part="a_foc"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_han"/></equal></test>
            <call-macro n="replace_foc_han"><with-param pos="1"/></call-macro>
          </when>
        </choose>
      </action>
    </rule>




    <rule comment="upper-lower case for any word">
      <pattern>
        <pattern-item n="any"/>
      </pattern>
      <action>
        <call-macro n="default-conversion1"><with-param pos="1"/></call-macro>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="any" case="caseFirstWord"> 
            <tags> <tag> <lit-tag v="any"/> </tag> </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu> 
          </chunk>
        </out>
      </action>
    </rule>


  </section-rules>
</transfer>
